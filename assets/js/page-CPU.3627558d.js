(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{755:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"cpu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu"}},[s._v("#")]),s._v(" CPU")]),s._v(" "),a("p",[s._v("：中央处理单元（Central Processing Unit），又称为中央处理器（Central Processor）、处理器（Processor）。")]),s._v(" "),a("ul",[a("li",[s._v("是计算机的核心组件，负责读取程序、解析成指令并执行。")])]),s._v(" "),a("h3",{attrs:{id:"总线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总线"}},[s._v("#")]),s._v(" 总线")]),s._v(" "),a("ul",[a("li",[s._v("主板上，CPU 与其它组件之间通过总线进行数据传输。总线根据用途分为三种：\n"),a("ul",[a("li",[s._v("地址总线（Address Bus）\n"),a("ul",[a("li",[s._v("：用于传输地址信息。")]),s._v(" "),a("li",[s._v("只能单向传输，只支持 CPU 发送信号到存储器或 I/O 接口电路。")]),s._v(" "),a("li",[s._v("地址总线的宽度决定了 CPU 直接寻址的最大范围。例如 8 位机的地址总线由 16 根线组成，可以并行传输 16 bits 的信号，因此 CPU 最大可以对 2^16 个存储单元进行直接寻址。\n"),a("ul",[a("li",[s._v("如果存储单元的数量超过该范围，CPU 就无法访问超过的部分。")]),s._v(" "),a("li",[s._v("内存每个存储单元的大小为 1 Byte ，因此 8 位机最多使用 2^16/1024=64 KB 的内存空间。同理，32 位机最多使用 2^32=4 GB 的内存空间。")])])])])]),s._v(" "),a("li",[s._v("控制总线（Control Bus）\n"),a("ul",[a("li",[s._v("：用于传输 CPU 对其它部件的控制信号，以及其它部件的应答、请求等信号，支持双向传输。")])])]),s._v(" "),a("li",[s._v("数据总线（Data Bus）\n"),a("ul",[a("li",[s._v("：用于传输数据，支持双向传输。")]),s._v(" "),a("li",[s._v("数据总线的宽度通常是字长的倍数。")])])])])])]),s._v(" "),a("h2",{attrs:{id:"结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[s._v("#")]),s._v(" 结构")]),s._v(" "),a("h3",{attrs:{id:"寄存器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寄存器"}},[s._v("#")]),s._v(" 寄存器")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("寄存器（Register）：是 CPU 内置的一些容量很小、读写速度超快的存储器，用于暂存 CPU 当前处理的数据、指令。")]),s._v(" "),a("ul",[a("li",[s._v("断电时会丢失数据。")])])]),s._v(" "),a("li",[a("p",[s._v("寄存器根据用途分为多种类型：")]),s._v(" "),a("ul",[a("li",[s._v("数据寄存器\n"),a("ul",[a("li",[s._v("：用于暂存一些通用的数据。")]),s._v(" "),a("li",[s._v("例如 8086 CPU 有多个 16 位的数据寄存器 AX、BX、CX、DX 。每个寄存器也可分为两个 8 位的寄存器使用，比如将 AX 分为成 AH、AL 。")])])]),s._v(" "),a("li",[s._v("段寄存器\n"),a("ul",[a("li",[s._v("：用于暂存程序的代码段、数据段、栈等内容。")])])]),s._v(" "),a("li",[s._v("指令指针寄存器（Instruction Pointer）\n"),a("ul",[a("li",[s._v("：用于暂存 CPU 下一条待执行指令在代码寄存器中的偏移地址。")])])]),s._v(" "),a("li",[s._v("标志位寄存器（Flag）\n"),a("ul",[a("li",[s._v("：用一组二进制位记录当前指令的执行状态。")]),s._v(" "),a("li",[s._v("例：\n"),a("ul",[a("li",[s._v("CF（Carry Flag，进位标志）：若加减运算时，最高位向前发生了进位或借位，则设置 CF=1 ，否则为 0 。只有两个操作数为无符号数时 CF 标志才有意义。")]),s._v(" "),a("li",[s._v("SF（Sign Flag，符号标志）：若运算结果的最高位为 1 ，则设置 SF=1 ，表示负数。只有两个操作数为带符号数时 SF 标志才有意义。")]),s._v(" "),a("li",[s._v("OF（Overflow Flag，溢出标志）：若运算结果发生了溢出，则设置 OF=1 ，表示运算结果错误。只有两个操作数为带符号数时 OF 标志才有意义。")]),s._v(" "),a("li",[s._v("IF（Interrupt Flag，中断标志）：若设置了 IF=1 ，则允许 CPU 响应来自 CPU 外部的可屏蔽中断的中断请求。")])])])])])])]),s._v(" "),a("li",[a("p",[s._v("CPU 执行程序的一般过程：")]),s._v(" "),a("ol",[a("li",[s._v("从磁盘读取程序，载入内存。")]),s._v(" "),a("li",[s._v("从内存或缓存读取程序，载入寄存器。")]),s._v(" "),a("li",[s._v("从寄存器读取程序，解析成指令，然后执行。\n"),a("ul",[a("li",[s._v("执行过程中，如果需要用到某些数据，则从内存载入。")]),s._v(" "),a("li",[s._v("执行过程中，可能发生上下文切换，转去执行其它程序。")])])])])])]),s._v(" "),a("h4",{attrs:{id:"上下文切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上下文切换"}},[s._v("#")]),s._v(" 上下文切换")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("CPU 的每个核同时只能执行一个程序（或者说一个线程），但 CPU 经常会在执行一个程序的过程中，转去执行其它程序。该过程称为上下文切换（Context Switch）。")]),s._v(" "),a("ul",[a("li",[s._v("此时需要暂存当前程序的执行信息（主要是寄存器中的内容），称为上下文，以供之后 CPU 跳转回来继续执行。")]),s._v(" "),a("li",[s._v("上下文切换总是会发生，可以提高 CPU 执行多个程序的效率。例如当前程序在等待磁盘 IO 时，就可以转去执行其它程序，避免 CPU 处于空闲。")]),s._v(" "),a("li",[s._v("上下文切换过于频繁时，切换产生的开销也会过大，可能降低 CPU 的总体执行效率。")])])]),s._v(" "),a("li",[a("p",[s._v("CPU 上下文切换分为几种场景：")]),s._v(" "),a("ul",[a("li",[s._v("进程上下文切换\n"),a("ul",[a("li",[s._v("CPU 从一个进程转去执行另一个进程时，需要切换寄存器、内核堆栈等内核态资源，以及虚拟内存、全局变量、栈区等用户态资源。")])])]),s._v(" "),a("li",[s._v("线程上下文切换\n"),a("ul",[a("li",[s._v("CPU 从一个线程转去执行另一个线程时，需要切换寄存器、栈区等资源，开销比进程上下文切换小得多。")]),s._v(" "),a("li",[s._v("这里是指在同一进程下切换线程。如果切换到不同进程，则属于进程上下文切换。")])])]),s._v(" "),a("li",[s._v("系统调用上下文切换\n"),a("ul",[a("li",[s._v("用户态的进程通过调用系统 API 可以切换到内核态执行，此时会发生一次上下文切换。调用结束之后，要继续执行用户态进程，又会发生一次上下文切换。")])])]),s._v(" "),a("li",[s._v("中断上下文切换\n"),a("ul",[a("li",[s._v("优先级最高，会打断一般程序的执行。")]),s._v(" "),a("li",[s._v("切换时只需要暂存程序的内核态资源，不影响用户态资源。")])])])])])]),s._v(" "),a("h3",{attrs:{id:"cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache"}},[s._v("#")]),s._v(" Cache")]),s._v(" "),a("p",[s._v("：CPU 芯片中的一个高速存储器，用于缓存 CPU 经常从内存读取的部分数据。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("CPU 执行某个指令时，如果需要读取某数据，会先尝试到 Cache 中查找该数据。此时分为两种情况：")]),s._v(" "),a("ul",[a("li",[s._v("Cache Hit ：在 Cache 中找到了，则可以立即读取该数据。\n"),a("ul",[a("li",[s._v("内核会根据 LRU 算法来自动清理缓存的数据，提高 CPU 读取数据时的 Hit 命中率。")])])]),s._v(" "),a("li",[s._v("Cache Miss ：在 Cache 中没找到，则到内存中查找该数据。")])])]),s._v(" "),a("li",[a("p",[s._v("目前的 CPU Cache 一般采用 SRAM 介质，容量为几 MB 。")]),s._v(" "),a("ul",[a("li",[s._v("通常存在多级缓存。例如 L1、L2、L3 三级缓存：\n"),a("ul",[a("li",[s._v("CPU 先到 L1 Cache 中读取数据，如果 Miss 了再到 L2 Cache 中读取数据，以此类推。")]),s._v(" "),a("li",[s._v("L1、L2、L3 Cache 的读写速度大概为 500 GB/s 、300 GB/s 、200 GB/s 。")])])]),s._v(" "),a("li",[s._v("多核 CPU 一般各有一个独立的 L1 缓存，然后共享同一个 L2、L3 缓存。")]),s._v(" "),a("li",[s._v("例：查看本机的 CPU Cache 容量"),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# lscpu | grep cache")]),s._v("\nL1d cache:             32K\nL1i cache:             32K\nL2 cache:              1024K\nL3 cache:              36608K\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])])])]),s._v(" "),a("h3",{attrs:{id:"write-buffer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#write-buffer"}},[s._v("#")]),s._v(" Write Buffer")]),s._v(" "),a("p",[s._v("：CPU 芯片中的一个高速存储器，用于缓冲 CPU 所有写入内存的数据。")]),s._v(" "),a("ul",[a("li",[s._v("优点：让 CPU 与内存异步工作，减少等待内存 IO 的耗时。")]),s._v(" "),a("li",[s._v("计算机中，几个存储设备的 IO 速度一般具有很大差距：CPU 寄存器 > Cache >> 内存 >> 磁盘 ，因此很有必要加入缓冲。\n"),a("ul",[a("li",[s._v("时钟频率、访问延迟也是这样的顺序。")]),s._v(" "),a("li",[s._v("容量则相反。磁盘的 IO 速度最慢，但成本最低，因此相同价格时的容量最大。")])])])]),s._v(" "),a("h2",{attrs:{id:"指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令"}},[s._v("#")]),s._v(" 指令")]),s._v(" "),a("ul",[a("li",[s._v("指令：是使 CPU 进行某一操作的命令代码，由操作码和操作数组成。\n"),a("ul",[a("li",[s._v("操作码：表示操作符即该操作的类型，比如数据传送、算术运算、逻辑运算、位运算等。")]),s._v(" "),a("li",[s._v("操作数：表示该操作的对象，或者对象的地址。\n"),a("ul",[a("li",[s._v("有的指令没有操作数，有的指令有 1 个操作数，有的指令有 2 个操作数。")])])]),s._v(" "),a("li",[s._v("8086 CPU 的指令示例："),a("div",{staticClass:"language-nasm line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-nasm"}},[a("code",[s._v("MOV   "),a("span",{pre:!0,attrs:{class:"token register variable"}},[s._v("AL")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("18H")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; 将源操作数 18H 存入目的操作数中，这里的目的操作数是一个数据寄存器 AL")]),s._v("\nADD   "),a("span",{pre:!0,attrs:{class:"token register variable"}},[s._v("AL")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01H")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; 加法：计算目的操作数 AL 加上源操作数，结果存入目的操作数所指的寄存器中")]),s._v("\nSUB   "),a("span",{pre:!0,attrs:{class:"token register variable"}},[s._v("AL")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("01H")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; 减法：计算目的操作数 AL 减去源操作数，结果存入目的操作数所指的寄存器中")]),s._v("\nINC   "),a("span",{pre:!0,attrs:{class:"token register variable"}},[s._v("AL")]),s._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; 增量：使操作数的值加 1")]),s._v("\nMUL   2H          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; 无符号数的乘法：计算 AX 中的值乘以该操作数，结果存入 AX")]),s._v("\nDIV   2H          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("; 无符号数的除法：计算 AX 中的值除以该操作数，结果存入 AX")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])])])])]),s._v(" "),a("h3",{attrs:{id:"指令集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令集"}},[s._v("#")]),s._v(" 指令集")]),s._v(" "),a("ul",[a("li",[s._v("指令集是指某个 CPU 可以识别和执行的所有指令，又称为指令系统。")]),s._v(" "),a("li",[s._v("常见的 CPU 指令集架构（Instruction Set Architecture ，ISA）：\n"),a("ul",[a("li",[a("p",[s._v("CISC（Complex Instruction Set Computer ，复杂指令集）")])]),s._v(" "),a("li",[a("p",[s._v("RISC（Reduced Instruction Set Computer ，精简指令集）")]),s._v(" "),a("ul",[a("li",[s._v("精简了指令数，每个时钟周期执行一条指令。")]),s._v(" "),a("li",[s._v("指令的长度统一。")]),s._v(" "),a("li",[s._v("精简了寻址方式。")])])]),s._v(" "),a("li",[a("p",[s._v("EPIC（Explicitly Parallel Instruction Computing ，显式并行指令集）")])]),s._v(" "),a("li",[a("p",[s._v("VLIW（Very Long Instruction Word ，超长指令集）")])])])])]),s._v(" "),a("h3",{attrs:{id:"型号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#型号"}},[s._v("#")]),s._v(" 型号")]),s._v(" "),a("h4",{attrs:{id:"x86"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#x86"}},[s._v("#")]),s._v(" x86")]),s._v(" "),a("ul",[a("li",[s._v("：指美国 Intel 公司发布的一系列 CPU 型号。\n"),a("ul",[a("li",[s._v("指令集属于 CISC 。")]),s._v(" "),a("li",[s._v("x86 CPU 的对外授权较少，主要由 Intel 公司与 AMD 公司交叉授权，两家公司掌控了设计、生产、销售 CPU 的全部流程。\n"),a("ul",[a("li",[s._v("有些技术专利已过期，任何公司都可以使用。")])])])])]),s._v(" "),a("li",[s._v("1987 年，Intel 公司发布了 8086 型号的 CPU ，被 IBM PC 采用而流行起来。此后的 80186、80286、80386 等型号的 CPU 都沿用这种架构，它们都以 86 结尾，因此称为 x86 架构。\n"),a("ul",[a("li",[s._v("8086 CPU 的字长为 16 ，地址总线的宽度为 20 bits ，数据总线的宽度为 16 bits 。")]),s._v(" "),a("li",[s._v("80386 CPU 的字长为 32 。")])])]),s._v(" "),a("li",[s._v("2003 年，AMD 公司将 x86 架构的字长扩展为 64 ，命名为 AMD64 ，又称为 x86_64、x64 。")])]),s._v(" "),a("h4",{attrs:{id:"arm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arm"}},[s._v("#")]),s._v(" ARM")]),s._v(" "),a("ul",[a("li",[s._v("：进阶精简指令集机器（Advanced RISC Machine），指英国 ARM 公司发布的一系列 CPU 型号。\n"),a("ul",[a("li",[s._v("字长为 32 ，指令集属于 RISC 。")]),s._v(" "),a("li",[s._v("成本低、功耗低、散热低，因此用于手机、平板等小型电子设备比 x86 更有竞争力。")]),s._v(" "),a("li",[s._v("ARM 公司只负责设计 ARM CPU 架构、指令集，不实际生产 CPU ，而是并出售许可证给其它公司，允许其研发、生产 ARM 芯片。")])])]),s._v(" "),a("li",[s._v("2011 年，ARM 公司发布了 ARMv8-A 架构，字长为 64 ，并且重新实现了 ARM 32 位的指令集。\n"),a("ul",[a("li",[s._v("ARMv8-A 架构划分了 AArch32、AArch64 两种执行状态，分别用于执行 32 位、64 位的指令。")])])]),s._v(" "),a("li",[s._v("2020 年，Apple 公司发布了一款基于 ARMv8-A 架构的 CPU ，称为 Apple Silicon M1 ，用于此后的 MacBook、iPad 等设备。")])]),s._v(" "),a("h2",{attrs:{id:"状态指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态指标"}},[s._v("#")]),s._v(" 状态指标")]),s._v(" "),a("h3",{attrs:{id:"cpu-使用率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-使用率"}},[s._v("#")]),s._v(" CPU 使用率")]),s._v(" "),a("p",[s._v("：指一定时间范围内的 CPU 平均使用率，表达式为 "),a("code",[s._v("%CPU = ( 1 - CPU 空闲时长 / 统计时长 ) × 100%")]),s._v(" 。")]),s._v(" "),a("ul",[a("li",[s._v("CPU 平时会执行多种任务，它们占用的时间会被内核分别记录："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("us"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用户态进程占用的时间，它不包括 nice 时间，包括 guest 时间")]),s._v("\n  guest                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当操作系统运行在虚拟机中时，CPU 运行 guest 操作系统的时间")]),s._v("\nsystem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内核态进程占用的时间")]),s._v("\nnice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ni"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置了 nice 优先级的用户态进程占用的时间")]),s._v("\nidle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CPU 的空闲时间，此时没有执行任务")]),s._v("\niowait"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("wa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CPU 等待磁盘读写数据的时间")]),s._v("\nhardware interrupt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("hi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 硬件中断占用的时间")]),s._v("\nsoftware interrupt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("si"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 软件中断占用的时间")]),s._v("\nsteal"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("st"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当操作系统运行在虚拟机中时，CPU 运行其它虚拟机的时间，即被偷走的时间")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[s._v("虚拟机本身需要运行一个 guest 操作系统，用于运行、管理其它虚拟操作系统。")]),s._v(" "),a("li",[s._v("正常情况下 iowait 会在很短时间内结束，如果 iowait 长时间较高，可能是磁盘 IO 量太大，或系统发生故障，这会导致某些进程一直处于 D 状态，占用 CPU 。")])])])]),s._v(" "),a("h3",{attrs:{id:"平均负载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平均负载"}},[s._v("#")]),s._v(" 平均负载")]),s._v(" "),a("p",[s._v("：load average ，指一定时间范围内平均的活跃进程数。")]),s._v(" "),a("ul",[a("li",[s._v("活跃进程包括：\n"),a("ul",[a("li",[s._v("正在被 CPU 运行的进程（Running）")]),s._v(" "),a("li",[s._v("等待被 CPU 运行的进程（Runnable）")]),s._v(" "),a("li",[s._v("不可中断的进程（比如 iowait）")])])]),s._v(" "),a("li",[s._v("理想情况下，系统的平均负载数应该刚好等于 CPU 个数，使得每个 CPU 运行一个活跃进程，且没有 CPU 空闲。\n"),a("ul",[a("li",[s._v("例：对于有 2 个 CPU 的系统，若平均负载为 1 ，说明 CPU 使用率为 50% 。\n"),a("ul",[a("li",[s._v("若平均负载为 2.6 ，说明 CPU 超载了，有部分进程竞争不到 CPU 。")])])])])]),s._v(" "),a("li",[s._v("根据消耗资源的偏向，可将进程分为：\n"),a("ul",[a("li",[s._v("CPU 密集型进程：进程经常用 CPU 执行运算任务，因此平均负载高时，CPU 使用率也高。")]),s._v(" "),a("li",[s._v("IO 密集型进程：进程经常等待磁盘 IO 或网络 IO ，因此平均负载高时，CPU 使用率不一定高。")])])])]),s._v(" "),a("h2",{attrs:{id:"相关概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[s._v("#")]),s._v(" 相关概念")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("字长（Word Size）：又称为位元，指 CPU 的算术逻辑单元每次最多能处理多少位二进制数据。")]),s._v(" "),a("ul",[a("li",[s._v("现代 CPU 的字长通常是 32 位、64 位。")])])]),s._v(" "),a("li",[a("p",[s._v("多核 CPU ：指包含多个处理器核心的 CPU ，可以同时执行多个指令。")]),s._v(" "),a("ul",[a("li",[s._v("通常核心数为偶数。")])])]),s._v(" "),a("li",[a("p",[s._v("时钟周期（Clock Cycle）：CPU 的振荡器发出时钟脉冲的间隔时长。")]),s._v(" "),a("ul",[a("li",[s._v("其倒数称为时钟频率。")]),s._v(" "),a("li",[s._v("例如：一个 4 GHz 的 CPU ，每秒产生 "),a("code",[s._v("4*10^9")]),s._v(" 个时钟脉冲，时钟周期为 "),a("code",[s._v("0.25*10*-9")]),s._v(" 秒。")])])]),s._v(" "),a("li",[a("p",[s._v("指令周期：CPU 执行一条指令所需的时长。")]),s._v(" "),a("ul",[a("li",[s._v("不同指令的指令周期不同，因此通常是计算平均值。")]),s._v(" "),a("li",[s._v("早期的 CPU ，每个时钟周期只能执行一条指令。现代的 CPU ，每个时钟周期可能执行多条指令。")]),s._v(" "),a("li",[s._v("将 CPU 的时钟频率，乘以每个时钟周期平均执行的指令数（Instructions Per Cycle ，IPC），就得到每秒平均执行的指令数（Instructions Per Second ，IPS）。")])])]),s._v(" "),a("li",[a("p",[s._v("引发 CPU 中断的原因称为中断源，主要分为两大类：")]),s._v(" "),a("ul",[a("li",[s._v("内部中断：是 CPU 内部的中断，例如除法出错中断、溢出中断、软件中断指令 INT n 。")]),s._v(" "),a("li",[s._v("外部中断：又称为硬件中断，是计算机的其它组件通过 CPU 的芯片引脚传入的中断信号。")])])])]),s._v(" "),a("h3",{attrs:{id:"计算机结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算机结构"}},[s._v("#")]),s._v(" 计算机结构")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1945 年，冯·诺依曼（Von Neumann）在论文中提出了一种可以存储指令并执行的计算机结构，被称为冯·诺依曼结构，是目前最流行的计算机结构。")])]),s._v(" "),a("li",[a("p",[s._v("冯诺依曼结构在逻辑上分为五个部分：")]),s._v(" "),a("ul",[a("li",[s._v("运算器（Arithmetic Unit）\n"),a("ul",[a("li",[s._v("：负责执行指令、进行运算。")]),s._v(" "),a("li",[s._v("核心部件是算术逻辑单元（Arithmetic Logic Unit，ALU），能进行算术运算、逻辑运算、位运算等操作。")]),s._v(" "),a("li",[s._v("运算结果会保存到存储器中，或者暂存在累加器中。")])])]),s._v(" "),a("li",[s._v("控制器（Control Unit）\n"),a("ul",[a("li",[s._v("：负责从存储器读取指令，进行译码分析（即编码的逆过程），然后调用相关部件执行该指令。")]),s._v(" "),a("li",[s._v("例如读取到一个跟运算相关的指令，就取出操作数，发送到运算器进行运算。")])])]),s._v(" "),a("li",[s._v("存储器（Memory Unit）\n"),a("ul",[a("li",[s._v("：负责用于存储数据和指令。")]),s._v(" "),a("li",[s._v("分为内存储器、外存储器两种。")])])]),s._v(" "),a("li",[s._v("输入设备\n"),a("ul",[a("li",[s._v("：负责接收用户或其它设备输入的信息，转换成计算机能识别的数据，然后保存到存储器中。")]),s._v(" "),a("li",[s._v("例如鼠标、键盘。")])])]),s._v(" "),a("li",[s._v("输出设备\n"),a("ul",[a("li",[s._v("：负责将计算机的数据转换成适当形式的信息，输出给用户或其它设备。")]),s._v(" "),a("li",[s._v("例如显示屏、打印机。")]),s._v(" "),a("li",[s._v("输入、输出设备统称为 IO 设备。")])])])])]),s._v(" "),a("li",[a("p",[s._v("现代计算机的各个硬件通常集成在一大块集成电路板上，称为主板。其核心元件为 CPU 。")]),s._v(" "),a("ul",[a("li",[s._v("CPU 是一小块芯片，包含了运算器、控制器、寄存器、缓存等元件。")])])])]),s._v(" "),a("h3",{attrs:{id:"cpu-多核架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-多核架构"}},[s._v("#")]),s._v(" CPU 多核架构")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("现代的一个计算机中通常包含多核 CPU ，常见架构：")]),s._v(" "),a("ul",[a("li",[s._v("对称多处理器（Symmetric Multi-Processor，SMP）\n"),a("ul",[a("li",[s._v("：各个 CPU 之间平等，共享内存、IO 设备等资源。")]),s._v(" "),a("li",[s._v("同时只能有一个 CPU 通过内存总线访问内存，因此 CPU 为 2~4 核时的利用率最高。增加 CPU 数量时，则 CPU 越来越可能因为等待访问内存而阻塞，导致利用率越来越低。")])])]),s._v(" "),a("li",[s._v("非一致内存访问（Non-Uniform Memory Access，NUMA）\n"),a("ul",[a("li",[s._v("：在计算机中划分多个节点（node），每个节点包含多核 CPU 、独立内存。")]),s._v(" "),a("li",[s._v("各节点的 CPU 可以并发访问本节点的内存，也可以通过互联模块访问其它节点的内存，但比本地内存的访问速度慢。")]),s._v(" "),a("li",[s._v("SMP 属于一致内存访问。与 SMP 相比，NUMA 大幅提高了 CPU 利用率，但跨节点访问内存时慢。")])])]),s._v(" "),a("li",[s._v("大规模并行处理（Massive Parallel Processing，MPP）\n"),a("ul",[a("li",[s._v("：将多个 SMP 服务器通过网络连通，组成一个计算机系统。")]),s._v(" "),a("li",[s._v("与 NUMA 相比，MPP 不存在跨节点的内存访问。增加 CPU 时，系统性能会线性提升。")])])])])]),s._v(" "),a("li",[a("p",[s._v("例：查看本机的 NUMA 节点")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# lscpu | grep NUMA")]),s._v("\nNUMA node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":          "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\nNUMA node0 CPU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("-15\nNUMA node1 CPU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":     "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("-31\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("上例中有 2 个 NUMA 节点，分别包含 16 核 CPU 。")]),s._v(" "),a("li",[s._v("如果只有 1 个 NUMA 节点，则属于 SMP 架构。")])])])]),s._v(" "),a("h2",{attrs:{id:"相关命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关命令"}},[s._v("#")]),s._v(" 相关命令")]),s._v(" "),a("h3",{attrs:{id:"uptime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uptime"}},[s._v("#")]),s._v(" uptime")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("uptime")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示系统运行时长、CPU 平均负载")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("例："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# uptime")]),s._v("\nup "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(" days, "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("41")]),s._v(" min,  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" users,  load average: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.52")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.58")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.59")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("up 21 days, 41 min ：表示系统的运行时长。")]),s._v(" "),a("li",[s._v("1 users ：表示已登录的用户数。")]),s._v(" "),a("li",[s._v("load average: 0.52, 0.58, 0.59 ：表示最近 1 分钟、5 分钟、15 分钟的平均负载。")])])])]),s._v(" "),a("h3",{attrs:{id:"perf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#perf"}},[s._v("#")]),s._v(" perf")]),s._v(" "),a("p",[s._v("：用于查看各个事件占用的 CPU 时长。")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示占用 CPU 的各个事件（采样分析）")]),s._v("\n       -g     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加显示各个进程的子进程")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("例："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# perf top")]),s._v("\nSamples: 4K of event "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cpu-clock'")]),s._v(", "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4000")]),s._v(" Hz, Event count "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("approx."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("828026549")]),s._v(" lost: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("/0 drop: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("/0\nOverhead  Shared Object         Symbol\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22.91")]),s._v("%  perf                  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" __symbols__insert\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.82")]),s._v("%  perf                  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" rb_next\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.34")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kernel"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" clear_page_c_e\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.33")]),s._v("%  libc-2.17.so          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" __strchr_sse42\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.86")]),s._v("%  perf                  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" rb_insert_color\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ul",[a("li",[s._v("第一行中，Samples 表示采样率，event 表示事件类型，Event count 表示占用 CPU 时钟周期的事件总数。")]),s._v(" "),a("li",[s._v("Overhead  ：该事件在样本中的比例。")]),s._v(" "),a("li",[s._v("Shared  ：该事件所在的动态共享对象，比如内核名、进程名。")]),s._v(" "),a("li",[s._v("Object  ：该动态共享对象的类型，比如[.]表示用户控件、[k]表示内核空间。")]),s._v(" "),a("li",[s._v("Symbol  ：该事件的名称，大多为某个进程的函数名称，或者是内存地址。")]),s._v(" "),a("li",[s._v("在显示窗口中，可按方向键上下选择事件，按回车键进入子菜单。")])])])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf record "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("命令"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 记录执行某条命令时，其中各个事件的 CPU 使用率")]),s._v("\n\n$ perf report           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示 perf record 记录的信息")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("例："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# perf record ls")]),s._v("\nactions-runner  node_modules  Notes  package.json  perf.data  yarn.lock\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" perf record: Woken up "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("times")]),s._v(" to "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),s._v(" data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" perf record: Captured and wrote "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.014")]),s._v(" MB perf.data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v(" samples"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# perf report")]),s._v("\nSamples: "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("  of event "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'cpu-clock'")]),s._v(", Event count "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("approx."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500000")]),s._v("\nOverhead  Command  Shared Object      Symbol\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.67")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kernel.kallsyms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" copy_user_enhanced_fast_string\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.67")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kernel.kallsyms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" get_seconds\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.67")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kernel.kallsyms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" prepend_name\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.67")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("kernel.kallsyms"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("k"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" vma_interval_tree_insert\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.67")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("       ld-2.17.so         "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" _dl_lookup_symbol_x\n  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16.67")]),s._v("%  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("       libc-2.17.so       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" __sysconf\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])])])]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ perf "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("stat")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("命令"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 分析某条命令占用 CPU 的过程")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("例："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# perf stat uname")]),s._v("\nLinux\n\n  Performance counter stats "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'uname'")]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v("\n\n              "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.89")]),s._v(" msec  task-clock                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    0.393 CPUs utilized")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      context-switches          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    0.001 M/sec")]),s._v("\n                  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      cpu-migrations            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    0.000 K/sec")]),s._v("\n                "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("165")]),s._v("      page-faults               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#    0.186 M/sec")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("not supported"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("      cycles\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("not supported"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("      instructions\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("not supported"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("      branches\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("not supported"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("      branch-misses\n\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.002252426")]),s._v(" seconds "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" elapsed\n\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.000000000")]),s._v(" seconds user\n        "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.001507000")]),s._v(" seconds sys\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),s._v("各字段的含义："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("task-clock "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 该命令使用 CPU 的毫秒数。备注的 CPUs utilized 表示使用了 CPU 的几个核")]),s._v("\ncontext-switches      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 上下文切换的次数")]),s._v("\ncache-misses          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CPU 在 cache 中找不到需要读取的数据的次数")]),s._v("\ncpu-migrations        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进程被迁移到其它 CPU 上运行的次数")]),s._v("\npage-faults           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CPU 抛出 page fault 异常的次数")]),s._v("\ncycles                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CPU 的时钟周期数。一条指令的执行可能需要多个 cycles")]),s._v("\ninstructions          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指令数。Instructions/Cycles 的比值越大越好")]),s._v("\nseconds "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("time")]),s._v(" elapsed  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行该命令消耗的秒数")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);