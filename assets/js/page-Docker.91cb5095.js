(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{659:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[s._v("#")]),s._v(" Docker")]),s._v(" "),a("p",[s._v("：一个管理镜像、容器的软件。")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.docker.com/reference/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("采用 Golang 开发，在 Moby 项目中开源。")]),s._v(" "),a("li",[s._v("提供了用于 Linux、MacOS、Windows 系统的软件安装包。")])]),s._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在 CentOS 上安装：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y yum-utils       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装 yum-config-manager")]),s._v("\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加 docker 的官方镜像源")]),s._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y docker-ce      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 下载 docker 社区版")]),s._v("\nsystemctl start "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动 dockerd")]),s._v("\nsystemctl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使 dockerd 开机自启")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("在 ubuntu 上，可以用官方脚本自动安装：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -fsSL https://get.docker.com "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" -s "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" --mirror Aliyun\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本"}},[s._v("#")]),s._v(" 版本")]),s._v(" "),a("ul",[a("li",[s._v("2017 年 3 月，Docker 的软件版本号从 v1.13 升级到 17.03 ，从数字编号改为日期格式。并且分为两种发行版：\n"),a("ul",[a("li",[s._v("Docker CE ：社区版（Community Edition），免费提供。")]),s._v(" "),a("li",[s._v("Docker EE ：企业版（Enterprise Edition），增加了一些收费的功能。")])])])]),s._v(" "),a("h2",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("dockerd 的配置文件默认位于 "),a("code",[s._v("/etc/docker/daemon.json")]),s._v(" ，且默认未创建。内容示例：")]),s._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// dockerd 配置")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "containerd": "/run/containerd/containerd.sock",')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "containerd-namespace": "docker",')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "data-root": "/var/lib/docker",        // dockerd 的数据目录')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "debug": false,                        // 是否开启调试模式')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "exec-root": "/var/run/docker",        // dockerd 的工作目录')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"insecure-registries"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"10.0.0.1:80"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// dockerd 默认以 HTTPS 方式访问镜像仓库服务器。如果服务器不支持 SSL 认证，则需要将其地址加入白名单")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"live-restore"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 当 dockerd 终止时，是否保持容器运行。默认为 false ，建议启用，方便重启 dockerd")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "oom-score-adjust": -500,              // dockerd 的 oom_score_adj')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "selinux-enabled": false,')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"registry-mirrors"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// docker 默认采用官方镜像仓库 docker.io ，这里可添加对该仓库的镜像代理，需要部署官方 registry 服务器。只能 pull 不能 push ，不支持代理第三方仓库")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://harbor.test.com"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 网络配置")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "bridge": "bridge",          // 新建容器时采用的 docker network 。默认为 bridge ，改为 none 则无网络')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"default-address-pools"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// docker network 的子网范围，默认为 172.[17-31].0.0/16 和 192.168.[0-240].0/20")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"base"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"172.20.0.0/16"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 可在该范围创建子网，比如 172.20.0.0/24、172.20.1.0/24")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"size"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 子网掩码的长度，增加其值有利于创建更多子网")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "ip-forward": true,          // 是否开启 net.ipv4.ip_forward')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "ip-masq": true,             // 是否自动配置 iptables 规则来实现 masquerade ，使得只有私有 IP 的容器能够与其它主机通信')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "iptables": true,            // 是否允许 dockerd 自动配置 iptables 规则来维护容器网络')]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建容器时的默认配置。修改这些配置不会影响已创建的容器，只会影响到新创建的容器")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "default-runtime": "runc",')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "default-shm-size": "64M",')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "default-ulimits": {')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//   "nofile": {')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//     "Name": "nofile",')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//     "Hard": 64000,')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//     "Soft": 64000')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//   }")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// },")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "dns": ["8.8.8.8"],          // 容器默认的 DNS 服务器')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"log-driver"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"json-file"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置日志驱动器的类型，默认为 json-file")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"log-opts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"max-size"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"100m"')]),s._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 日志文件的最大大小。超过该大小则滚动一次，创建一个新日志文件继续写入")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v('"max-file"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 最多保留多少份日志文件。即使只保留 1 份，每次滚动时也会创建一个新日志文件")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "shutdown-timeout": 15,      // 停止容器时的超时时间')]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 是否启用可选功能")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// "features": {')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('//     "buildkit": false')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// }")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br")])]),a("ul",[a("li",[s._v("修改配置之后，需要重启 dockerd 。")])])]),s._v(" "),a("li",[a("p",[s._v("docker 命令的配置文件存放在 "),a("code",[s._v("$HOME/.docker/")]),s._v(" 目录下。")])]),s._v(" "),a("li",[a("p",[s._v("如果想让 dockerd 使用代理，需要在 "),a("code",[s._v("/usr/lib/systemd/system/docker.service")]),s._v(" 中加入环境变量：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Service"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("Environment")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HTTP_PROXY=socks5://10.0.0.1:1080"')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("然后重启 dockerd ：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("systemctl daemon-reload\nsystemctl restart "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("同理，也可以在容器内添加环境变量 HTTP_PROXY ，一些容器内应用支持通过这种方式配置代理。")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);