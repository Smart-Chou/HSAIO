(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{616:function(s,t,e){"use strict";e.r(t);var n=e(1),a=Object(n.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"elasticsearch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elasticsearch"}},[s._v("#")]),s._v(" ElasticSearch")]),s._v(" "),e("p",[s._v("：简称为 ES ，一个搜索服务器，也可用作存储 JSON 格式数据的 NoSQL 数据库。")]),s._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.elastic.co/guide/en/elasticsearch/reference/7.6/index.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),e("OutboundLink")],1)]),s._v(" "),e("li",[s._v("采用 Java 开发，基于 Lucene 实现。")]),s._v(" "),e("li",[s._v("采用 C/S 架构、TCP 通信。")])]),s._v(" "),e("h2",{attrs:{id:"版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本"}},[s._v("#")]),s._v(" 版本")]),s._v(" "),e("ul",[e("li",[s._v("v1.0 ：于 2010 年发布。最初由 Shay Banon 开发，后来由 Elastic 公司管理。")]),s._v(" "),e("li",[s._v("v6.0 ：于 2017 年发布。")]),s._v(" "),e("li",[s._v("v7.0 ：于 2019 年发布。")])]),s._v(" "),e("h2",{attrs:{id:"原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[s._v("#")]),s._v(" 原理")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("ES 允许用户写入数据，并进行搜索。")]),s._v(" "),e("ul",[e("li",[s._v("每条数据称为一个文档（document），采用 JSON 格式，可以包含多个字段（field）。")]),s._v(" "),e("li",[s._v("容纳文档的集合称为索引（index）。")])])]),s._v(" "),e("li",[e("p",[s._v("使用 ES 的一般流程：")]),s._v(" "),e("ol",[e("li",[s._v("在 ES 中创建索引，定义文档的数据结构。")]),s._v(" "),e("li",[s._v("向索引中写入一些文档。")]),s._v(" "),e("li",[s._v("向索引中搜索一些文档。")])])]),s._v(" "),e("li",[e("p",[s._v("ES 的每个索引由一个或多个分片（shard）组成。")]),s._v(" "),e("ul",[e("li",[s._v("索引下新增的文档会平均分配到各个分片中，而分片可以存储在不同 ES 节点上。\n"),e("ul",[e("li",[s._v("客户端发出查询请求时，不必知道文档存储在哪个分片、分片存储在哪个节，因为 ES 会自动完成查询。")])])]),s._v(" "),e("li",[s._v("在 ES 索引中进行查询时，是先在它的每个分片中进行查询，然后合并它们的查询结果。\n"),e("ul",[e("li",[s._v("ES 会给每个分片创建一个线程进行查询，因此划分多个分片可以并行查询，减少查询耗时。但分片数过多也可能增加查询耗时，比如要打开很多文件。")]),s._v(" "),e("li",[s._v("对于单个分片，体积过大则会增加查询耗时、故障后恢复耗时，体积过小则会增加冗余量。\n"),e("ul",[e("li",[s._v("建议单个分片的体积控制在 10G~50G 。")]),s._v(" "),e("li",[s._v("如果要存储海量数据，比如日志，可以每天创建一个新索引用于存储数据。")])])])])])])])]),s._v(" "),e("h3",{attrs:{id:"es-与-lucene"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es-与-lucene"}},[s._v("#")]),s._v(" ES 与 Lucene")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("ES 的每个分片是基于一个 Lucene 索引实现的。")])]),s._v(" "),e("li",[e("p",[s._v("ES 对 Lucene 新增文档的流程做了改进，如下：")]),s._v(" "),e("ol",[e("li",[s._v("将新增的文档写入内存缓冲区（buffer），并备份到事务日志（translog）中。\n"),e("ul",[e("li",[s._v("translog 由多个 generation 文件组成。")]),s._v(" "),e("li",[s._v("如果 ES 异常终止，则重启后会从 translog 中恢复未提交的数据。")]),s._v(" "),e("li",[s._v("对 translog 文件的修改是存储在内存 dirty page 中，如果系统宕机，则 translog 中的数据依然会丢失。")]),s._v(" "),e("li",[s._v("ES 默认每隔 5s 调用一次操作系统的 fsync ，将内存 dirty page 中的文件写入磁盘。")])])]),s._v(" "),e("li",[s._v("当 buffer 满了，或者默认每隔 1s ，ES 会将 buffer 中的文档保存为一个新的 segment ，然后清空 buffer 。该过程称为 Refresh 。\n"),e("ul",[e("li",[s._v("写入文档、删除文档时，都要等到 Refresh 之后才会生效，才能被查询到。")]),s._v(" "),e("li",[s._v("如果 Refresh 的频率过高，则会消耗较多的系统资源，还会产生大量体积小的 segment 。")])])]),s._v(" "),e("li",[s._v("重复 1、2 步骤，继续新增文档，使得 translog 文件越来越大。")]),s._v(" "),e("li",[s._v("如果 translog 文件超过一定大小，ES 就会执行一次 fsync ，然后创建一个新的 translog 文件供写入。该过程称为 Flush 。\n"),e("ul",[e("li",[s._v("如果 Flush 的频率过高，则会增加等待磁盘 IO 的耗时。")]),s._v(" "),e("li",[s._v("Refresh 与 Flush 是两种操作，不一定会同时执行。")])])])])]),s._v(" "),e("li",[e("p",[s._v("ES 支持将每个 shard 中一些较小的 segment 合并成较大的 segment ，并排除 deleted 文档。从而减少 segment 数量、清理 deleted 文档。")]),s._v(" "),e("ul",[e("li",[s._v("ES 会自动合并（normalMerge），用户也可以主动触发一次强制合并（forcemerge）。")]),s._v(" "),e("li",[s._v("合并的大概流程如下：\n"),e("ol",[e("li",[s._v("根据算法，选取一些适合合并的 segment 。")]),s._v(" "),e("li",[s._v("创建一个新的 segment ，将旧 segment 中非 deleted 的文档拷贝进去。")]),s._v(" "),e("li",[s._v("将新的 segment 保存到磁盘，将旧的 segment 删除。此过程会占用两份磁盘空间。")])])]),s._v(" "),e("li",[s._v("如果 segment 中的文档删除率达到 100% ，则自动删除该 segment 。")]),s._v(" "),e("li",[s._v("合并时会占用较多磁盘 IO ，特别是强制合并。建议采取以下优化措施：\n"),e("ul",[e("li",[s._v("降低 Refresh 的频率，避免产生大量体积小的 segment 而需要经常自动合并。")]),s._v(" "),e("li",[s._v("避免在体积大的 segment 中删除文档，从而不需要合并大的 segment 。")]),s._v(" "),e("li",[s._v("对于不再需要修改的 index ，可以执行一次 forcemerge ，永久优化.")])])])])])]),s._v(" "),e("h2",{attrs:{id:"客户端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[s._v("#")]),s._v(" 客户端")]),s._v(" "),e("ul",[e("li",[s._v("ES 服务器提供了 Restful API 供客户端访问。")]),s._v(" "),e("li",[s._v("客户端向 ES 服务器发出请求的标准格式如下："),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# curl -X GET 127.0.0.1:9200/_count?pretty -H 'content-Type:application/json' -d '")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"query"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"match_all"')]),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("'\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"count"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(",\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"_shards"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"total"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"successful"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"skipped"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(",\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"failed"')]),s._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("ul",[e("li",[s._v("curl 命令加上 "),e("code",[s._v("-H 'content-Type:application/json'")]),s._v(" 之后，便可以发送 JSON 格式的查询参数。")]),s._v(" "),e("li",[s._v("如果客户端发出的请求报文 body 不能按 JSON 格式正常解析，ES 就会返回 HTTP 400 报错。")]),s._v(" "),e("li",[s._v("ES 返回的响应报文 body 是 JSON 格式的字符串。\n"),e("ul",[e("li",[s._v("如果在请求 URL 末尾加上 "),e("code",[s._v("?pretty")]),s._v(" ，则会让 ES 返回经过缩进、换行的 JSON 字符串。")])])])])]),s._v(" "),e("li",[s._v("为了方便书写，下文将客户端的请求简记成如下格式："),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[s._v("GET /_count\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"query"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"match_all"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])])])]),s._v(" "),e("h2",{attrs:{id:"相关概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[s._v("#")]),s._v(" 相关概念")]),s._v(" "),e("h3",{attrs:{id:"lucene"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lucene"}},[s._v("#")]),s._v(" Lucene")]),s._v(" "),e("p",[s._v("：一个全文搜索引擎，作为 Java 代码库发布。")]),s._v(" "),e("ul",[e("li",[s._v("2000 年由美国工程师 Doug Cutting 开源，后来交给 ASF 管理。")]),s._v(" "),e("li",[s._v("Lucene 将存储的每条数据称为文档（document），容纳文档的集合称为索引（index）。\n"),e("ul",[e("li",[s._v("每个索引由一个或多个子索引组成。")]),s._v(" "),e("li",[s._v("每个索引使用一个 int 型变量 MAX_DOCS 控制其容量，因此最多 2^31 个文档。")])])]),s._v(" "),e("li",[s._v("子索引（sub-index）又称为索引段（index segment）。\n"),e("ul",[e("li",[s._v("每个 segment 中可以写入多个文档，并给它们分配在该 segment 中唯一的 DocId 。")]),s._v(" "),e("li",[s._v("每个 segment 会单独建立索引，因此可以单独在其中搜素。\n"),e("ul",[e("li",[s._v("在 Lucene 索引中进行查询时，是先依次在它的每个 segment 中进行查询，然后合并它们的查询结果。")])])]),s._v(" "),e("li",[s._v("当客户端请求新增文档时，Lucene 会将文档写入内存缓冲区，然后返回响应给客户端。\n"),e("ul",[e("li",[s._v("每隔一定时间，Lucene 会将内存缓冲区中的文档保存为一个新的 segment 。该过程称为 Commit 。\n"),e("ul",[e("li",[s._v("在 Lucene Commit 之前，内存缓冲区中写入的文档不能被客户端查询到，并且会在 Lucene 异常终止时丢失。")])])])])]),s._v(" "),e("li",[s._v("segment 不支持修改，只能新增、删除。\n"),e("ul",[e("li",[s._v("当客户端请求删除文档时，Lucene 只是将文档标记为 deleted ，但并不会改变磁盘上存储的 segment 。（除非删除整个索引）")]),s._v(" "),e("li",[s._v("当客户端请求查询文档时，Lucene 会依次在每个 segment 中进行查询，依然会查询 deleted 文档，只是在返回查询结果时排除掉。（导致查询耗时增加）\n"),e("ul",[e("li",[s._v("对于 ES 而言， deleted 文档消耗的查询时间比普通文档少很多，因为它会在 Lucene 查询结果中被排除，不会经过 ES 过滤、加工。")])])]),s._v(" "),e("li",[s._v("当客户端请求修改文档时，Lucene 会先在原来的 segment 中，将该文档标记为 deleted 。然后在新的 segment 中，重新写入该文档。（导致开销比新增文档更大）")])])])])])]),s._v(" "),e("h3",{attrs:{id:"solr"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#solr"}},[s._v("#")]),s._v(" Solr")]),s._v(" "),e("p",[s._v("：一个基于 Lucene 的搜索服务器，采用 Java 开发。")]),s._v(" "),e("ul",[e("li",[s._v("于 2006 年开源，由 ASF 管理。")]),s._v(" "),e("li",[s._v("基于 zookeeper 运行分布式系统。")])])])}),[],!1,null,null,null);t.default=a.exports}}]);