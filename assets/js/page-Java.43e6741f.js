(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{793:function(a,t,s){"use strict";s.r(t);var n=s(1),e=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[a._v("#")]),a._v(" Java")]),a._v(" "),s("p",[a._v("：一个编译型语言。")]),a._v(" "),s("ul",[s("li",[a._v("通过 JVM 容易实现跨平台运行，因此常用于开发 Web 应用、Android 应用。")])]),a._v(" "),s("h2",{attrs:{id:"相关历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关历史"}},[a._v("#")]),a._v(" 相关历史")]),a._v(" "),s("ul",[s("li",[a._v("1991 年，Sun 公司的 James Gosling 等人开始研发一种适用于单片机系统的编程语言。\n"),s("ul",[s("li",[a._v("他们将 C++ 语言进行简化，抛弃了多继承、指针等复杂功能，并提高程序的兼容性。")]),a._v(" "),s("li",[a._v("他们将这种语言取名为 Oak ，介绍给硬件厂商，但并没有受到欢迎。")])])]),a._v(" "),s("li",[a._v("1995 年，Sun 公司发现 Oak 语言在互联网上的应用优势——它容易移植到不同平台上运行。于是将它改名为 Java 重新发布，终于成功推广。")]),a._v(" "),s("li",[a._v("2010 年，Sun 公司被 Oracle（甲骨文）公司收购。")]),a._v(" "),s("li",[a._v("从 2019 年 1 月开始，使用 Java 8 及以上版本的 Oracle JDK 需要付费。因此推荐使用 OpenJDK 。")])]),a._v(" "),s("h2",{attrs:{id:"语法特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#语法特点"}},[a._v("#")]),a._v(" 语法特点")]),a._v(" "),s("ul",[s("li",[a._v("Java 源文件的扩展名为 .java 。需要先编译成扩展名为 .class 的类文件，再交给 JVM 解释执行。")]),a._v(" "),s("li",[a._v("每个语句的末尾以分号 ; 作为分隔符。")]),a._v(" "),s("li",[a._v("用 "),s("code",[a._v("//")]),a._v(" 声明单行注释，用 "),s("code",[a._v("/*")]),a._v("、"),s("code",[a._v("*/")]),a._v(" 声明多行注释。")]),a._v(" "),s("li",[a._v("支持面向对象编程，但不支持定义函数。")]),a._v(" "),s("li",[a._v("Java 的语法与 C++ 相似，但是做出了许多优化，比如：\n"),s("ul",[s("li",[a._v("丢弃了 C++ 中一些难用的功能，比如操作符重载、多继承。")]),a._v(" "),s("li",[a._v("用引用取代了指针，并自动回收垃圾内存。")])])])]),a._v(" "),s("h2",{attrs:{id:"相关概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关概念"}},[a._v("#")]),a._v(" 相关概念")]),a._v(" "),s("ul",[s("li",[a._v("Scala\n"),s("ul",[s("li",[a._v("：一个基于 Java 的编译型语言，2004 年发布。")]),a._v(" "),s("li",[a._v("源代码编译成 Java 字节码之后由 JVM 运行。")]),a._v(" "),s("li",[a._v("支持面向对象编程、函数式编程，属于静态类型。")])])]),a._v(" "),s("li",[a._v("JMX（Java Management Extensions）\n"),s("ul",[s("li",[a._v("：一组用于监控、管理 Java 应用的 API ，属于 Java 标准库。\n"),s("ul",[s("li",[a._v("将被管理的对象称为 MBean（Managed Bean）。")]),a._v(" "),s("li",[a._v("基于 RMI（Remote Method Invocation，远程方法调用）协议进行通信。")])])]),a._v(" "),s("li",[a._v("在 Java 应用中调用 JMX 库，实现其接口，便可以从外部通过 HTTP 通信等方式监控、管理该 Java 应用。")])])]),a._v(" "),s("li",[a._v("JAAS（Java Authentication and Authorization Service，Java 认证和授权服务）\n"),s("ul",[s("li",[a._v("：一个进行身份认证的 Java 框架，内置在 JRE 中。")])])]),a._v(" "),s("li",[a._v("JDBC（Java Database Connectivity）\n"),s("ul",[s("li",[a._v("：Java 程序访问数据库的 API 规范，主要用于关系型数据库。")]),a._v(" "),s("li",[a._v("JDBC 通过特定格式的 URL 连接到数据库，配置示例："),s("div",{staticClass:"language-yml line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("datasource")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("driverClassName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" com.mysql.jdbc.Driver\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("url")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" jdbc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("mysql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("//10.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v("3306/test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("?")]),a._v("characterEncoding=utf8"),s("span",{pre:!0,attrs:{class:"token important"}},[a._v("&connectionCollation=utf8mb4_general_ci&autoReconnect=true&useSSL=false")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("username")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" root\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[a._v("password")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token important"}},[a._v("******")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])])])])]),a._v(" "),s("li",[a._v("Mybatis\n"),s("ul",[s("li",[a._v("：一个 Java 的持久化框架。")]),a._v(" "),s("li",[a._v("用户不需要直接编写 JDBC 代码，而是先在 XML 文件中编写 SQL 语句，然后通过 Java 方法调用。但可读性差。")]),a._v(" "),s("li",[a._v("Java 持久化框架还有 Hibernate、JPA 等。")]),a._v(" "),s("li",[a._v("开发 Java Web 项目的常用框架：\n"),s("ul",[s("li",[a._v("SSH（Spring + Struts + Hibernate）")]),a._v(" "),s("li",[a._v("SSM（Spring + SpringMVC + MyBatis）")])])])])]),a._v(" "),s("li",[a._v("日志框架\n"),s("ul",[s("li",[a._v("java.util.logging ：Java 的标准库，是 JDK 内置的日志框架。")]),a._v(" "),s("li",[a._v("Log4j ：一个 Apache 开源项目，已停止开发。使用一个配置文件 log4j.properties ，支持自动切割日志。")]),a._v(" "),s("li",[a._v("LogBack ：重新实现了 Log4j ，大幅优化。")]),a._v(" "),s("li",[a._v("Log4j2 ：对 Log4j 进行了重构优化。")])])])]),a._v(" "),s("h3",{attrs:{id:"gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gc"}},[a._v("#")]),a._v(" GC")]),a._v(" "),s("p",[a._v("：垃圾回收（Garbage Collection），指销毁 Java 进程中不需要保留的对象，回收其内存。")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("JVM 规范不包含 GC ，但 JVM 通常提供了 GC 功能，每隔一定时间执行一次垃圾回收。")])]),a._v(" "),s("li",[s("p",[a._v("Java 进程占用的内存分为几部分：")]),a._v(" "),s("ul",[s("li",[a._v("Heap\n"),s("ul",[s("li",[a._v("：堆内存。主要存储 Java 类的实例对象。")]),a._v(" "),s("li",[a._v("分为 young、old 两个区域。\n"),s("ul",[s("li",[a._v("新创建的对象会先存储到 young 区域，其中大部分会在短期内停止引用而被销毁。")]),a._v(" "),s("li",[a._v("当 young 区域变满时，会根据 young GC 算法将存在时间较长的对象移到 old 区域。")]),a._v(" "),s("li",[a._v("当 old 区域的对象触发 GC 算法时，会被直接删除。")])])])])]),a._v(" "),s("li",[a._v("Non-Heap\n"),s("ul",[s("li",[a._v("：非堆内存。主要存储 Java 类、方法、常量。")]),a._v(" "),s("li",[a._v("比如 Metaspace 内存区域，用于存储 Java 类的元数据，包括常量、注解等。")])])]),a._v(" "),s("li",[a._v("Other\n"),s("ul",[s("li",[a._v("：主要是运行 JVM 本身占用的内存。")])])])])]),a._v(" "),s("li",[s("p",[a._v("识别垃圾对象的常见算法：")]),a._v(" "),s("ul",[s("li",[a._v("引用计数（Reference Counting）\n"),s("ul",[s("li",[a._v("原理：\n"),s("ul",[s("li",[a._v("每个对象内置一个引用计数器，表示有多少个地方引用了它。当引用数减为 0 时，对象不可达（unreachable），就可以销毁。")]),a._v(" "),s("li",[a._v("创建一个对象并传递给一个变量时，该对象的引用计数为 1 。")]),a._v(" "),s("li",[a._v("销毁一个对象时，将它引用的其它所有对象的引用技术减 1 。")])])]),a._v(" "),s("li",[a._v("缺点：\n"),s("ul",[s("li",[a._v("修改引用计数的开销较大。")]),a._v(" "),s("li",[a._v("难以发现循环引用的对象。比如对象 A、B 相互引用，则可能一直不会被销毁。")])])])])]),a._v(" "),s("li",[a._v("跟踪（Tracing）\n"),s("ul",[s("li",[a._v("原理：\n"),s("ol",[s("li",[a._v("选出当前的局部变量、静态变量、线程等对象，作为根集（Root Set）。")]),a._v(" "),s("li",[a._v("遍历根集中的各个对象，递归寻找它们引用的对象，记录成一条条引用链。")]),a._v(" "),s("li",[a._v("不在引用链上的对象，就可以销毁。")])])]),a._v(" "),s("li",[a._v("目前的 JVM 通常采用跟踪算法。")])])])])]),a._v(" "),s("li",[s("p",[a._v("对象的引用分为四种，从强到弱如下：")]),a._v(" "),s("ul",[s("li",[a._v("强引用（Strong Reference）\n"),s("ul",[s("li",[a._v("：指向一些必须保留的对象，比如 "),s("code",[a._v("Object obj = new Object()")]),a._v(" 。")]),a._v(" "),s("li",[a._v("即使内存不足，强引用也不会被回收。")])])]),a._v(" "),s("li",[a._v("软引用（Soft Reference）\n"),s("ul",[s("li",[a._v("：指向一些可能有用，但不是必须保留的对象。")]),a._v(" "),s("li",[a._v("当内存不足时，会被回收。")])])]),a._v(" "),s("li",[a._v("弱引用（Weak Reference）\n"),s("ul",[s("li",[a._v("：指向一些不需要保留的对象。")]),a._v(" "),s("li",[a._v("每次执行垃圾回收时，都会被回收。")])])]),a._v(" "),s("li",[a._v("虚引用（Phantom Reference）\n"),s("ul",[s("li",[a._v("：最弱的引用，相当于没有引用。")]),a._v(" "),s("li",[a._v("不能用于获取对象的实例，主要用于判断对象是否被垃圾回收。")])])])])])]),a._v(" "),s("h3",{attrs:{id:"关于-web"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关于-web"}},[a._v("#")]),a._v(" 关于 Web")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("JSP（Java Server Pages）")]),a._v(" "),s("ul",[s("li",[a._v("：一个动态网页开发技术，可以在 HTML 文件中通过特定的标签嵌入 Java 代码。")]),a._v(" "),s("li",[a._v("例："),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n今天的日期是: <%= (new java.util.Date()).toLocaleString()%>\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("</")]),a._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])])])])]),a._v(" "),s("li",[s("p",[a._v("Servlet")]),a._v(" "),s("ul",[s("li",[a._v("：一种提供 Web 应用服务的 Java 程序，本质上是实现了 javax.servlet.Servlet 接口的 Java 类。")]),a._v(" "),s("li",[a._v("可以运行在支持 Servlet 规范的 Web 服务器中，比如 Tomcat、Jetty 。")])])]),a._v(" "),s("li",[s("p",[a._v("Netty")]),a._v(" "),s("ul",[s("li",[a._v("：一个 Java 的 Socket 通信框架，支持 TCP、UDP 等协议，或自定义协议。")]),a._v(" "),s("li",[a._v("采用非阻塞 IO （NIO），并发能力强。")])])]),a._v(" "),s("li",[s("p",[a._v("Spring Framework")]),a._v(" "),s("ul",[s("li",[a._v("：一个流行的 Java 应用开发框架，于 2002 年发布。")]),a._v(" "),s("li",[a._v("内嵌了一个 Tomcat ，因此可以开发 Web 应用，作为 Web 服务器运行。")]),a._v(" "),s("li",[a._v("Spring 中的应用程序由一个或多个 bean 对象组成，由 IoC 容器管理。")]),a._v(" "),s("li",[a._v("编程时不需要主动 new 对象，而是在代码中声明需要的对象，并在 XML 文件中配置。程序运行时，IoC 容器会去自动根据配置创建对象。\n"),s("ul",[s("li",[a._v("对象的控制权从程序员手中，转交给了程序自身，因此称为控制反转（Inversion of Control ，IoC）。")]),a._v(" "),s("li",[a._v("例："),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Component")]),a._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 使用 Component 注解，将该类定义为 Bean ，默认命名为开头小写的类名，即 phone")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Phone")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Component")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Person")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Autowired")]),a._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 使用 Autowired 注解，创建对应类型的 Bean 对象并注入该属性")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Phone")]),a._v(" phone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br"),s("span",{staticClass:"line-number"},[a._v("12")]),s("br")])])])])])])]),a._v(" "),s("li",[s("p",[a._v("Spring Boot")]),a._v(" "),s("ul",[s("li",[a._v("：对 Spring 框架进行了一些开箱即用的配置，简化了开发的过程。")]),a._v(" "),s("li",[a._v("可以基于 Spring Boot 快速开发单个应用，比如单个微服务。")])])]),a._v(" "),s("li",[s("p",[a._v("Spring Cloud")]),a._v(" "),s("ul",[s("li",[a._v("：一个基于 Spring Boot 的开发框架，适合开发分布式应用，比如微服务。")]),a._v(" "),s("li",[a._v("包含了多个组件：\n"),s("ul",[s("li",[a._v("Config ：配置管理中心，基于 git 存储配置信息。例："),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@Value")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"${test.name}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 添加注解，将指定的配置参数赋值给该变量")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br")])])]),a._v(" "),s("li",[a._v("Bus ：消息总线，用于动态更新配置。\n"),s("ul",[s("li",[a._v("每次修改配置时，会自动发送 HTTP 请求通知使用该配置的所有服务，让它们重新从 Config 读取配置。")])])]),a._v(" "),s("li",[a._v("Eureka ：用于服务发现。")]),a._v(" "),s("li",[a._v("Ribbon ：一个 HTTP 客户端，发出请求时会对服务器进行负载均衡。")]),a._v(" "),s("li",[a._v("Feign ：一个声明式的 Restful 客户端，简化了访问微服务的过程，并基于 Ribbon 进行负载均衡。例："),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@FeignClient")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"service1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 添加注解，声明要调用的目标服务名")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("TestService")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@GetMapping")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/name"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 添加注解，使得调用该方法时，会发送 GET 请求到目标服务的指定 URL")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br")])])]),a._v(" "),s("li",[a._v("Hystrix ：断路器，自动进行服务熔断。")]),a._v(" "),s("li",[a._v("Zuul ：API 网关，用于将服务暴露到集群外，并进行负载均衡、鉴权。")])])])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);