(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{664:function(s,e,a){"use strict";a.r(e);var t=a(1),n=Object(t.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"kubernetes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes"}},[s._v("#")]),s._v(" Kubernetes")]),s._v(" "),a("p",[s._v("：一个大型的容器编排系统，采用 Golang 开发。")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://kubernetes.io/docs",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方文档"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("简称为 k8s ，8 表示中间的 8 个字母。")]),s._v(" "),a("li",[s._v("用于管理大量主机上的大量容器，进行自动编排。\n"),a("ul",[a("li",[s._v("传统部署方式中，每个主机专用于部署某个项目，且项目暂时停用时也不能收回主机，因此资源冗余大。")]),s._v(" "),a("li",[s._v("使用 k8s 部署时，可以自动寻找空闲的主机，部署容器化的应用，提高资源使用率。。")])])]),s._v(" "),a("li",[s._v("支持 Linux、MacOS、Windows 系统。")]),s._v(" "),a("li",[s._v("提供了滚动更新、一键回滚、服务发现、负载均衡、自动伸缩等功能，提高部署效率。")])]),s._v(" "),a("h2",{attrs:{id:"版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本"}},[s._v("#")]),s._v(" 版本")]),s._v(" "),a("ul",[a("li",[s._v("2014 年，Google 公司开源了 k8s 项目，它借鉴了 Google 内部的大规模集群管理系统 Borg、Omega 。")]),s._v(" "),a("li",[s._v("2015 年，Google 公司将 k8s 项目捐赠给 Linux 基金会下属的云原生计算基金会（CNCF）托管。")]),s._v(" "),a("li",[s._v("v1.20\n"),a("ul",[a("li",[s._v("2020 年 12 月发布。")]),s._v(" "),a("li",[s._v("CRI 不再支持 Docker 引擎，建议改用 containerd 或 CRI-O ，工作效率更高，但不能再通过 docker 命令查看、管理容器。\n"),a("ul",[a("li",[s._v("这是因为 Docker 没有直接支持 CRI 接口，导致 k8s 只能通过 Dockershim 模块间接与 Docker 通信，但维护该模块比较麻烦，现在停止维护该模块。")]),s._v(" "),a("li",[s._v("使用 Docker 构建出的镜像符合 OCI 标准，因此依然可以被 containerd 或 CRI-O 运行。")]),s._v(" "),a("li",[s._v("如果用户继续使用 Docker 运行镜像，则启动 kubelet 时会显示一条警告。")])])])])]),s._v(" "),a("li",[s._v("v1.23\n"),a("ul",[a("li",[s._v("2021 年 12 月发布。")]),s._v(" "),a("li",[s._v("默认启用 PSA（Pod Security admission）服务，在创建 Pod 时根据 Pod 安全标准进行审核。")])])])]),s._v(" "),a("h2",{attrs:{id:"架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[s._v("#")]),s._v(" 架构")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("k8s 包含多个组件进程，通常部署在多个主机上，组成分布式集群。")]),s._v(" "),a("ul",[a("li",[s._v("用户可以与 k8s 系统交互，部署自定义的应用，称为工作负载（workload）。")])])]),s._v(" "),a("li",[a("p",[s._v("每个主机称为节点（Node），分为两种：")]),s._v(" "),a("ul",[a("li",[s._v("主节点（master node）：又称为控制平面节点（control plane node），负责控制整个集群、管理所有节点。")]),s._v(" "),a("li",[s._v("工作节点（worker node）：负责部署 Pod 。")])])]),s._v(" "),a("li",[a("p",[s._v("主节点运行以下进程：")]),s._v(" "),a("ul",[a("li",[s._v("kube-apiserver\n"),a("ul",[a("li",[s._v("：负责提供 Restful API ，供用户访问、控制 k8s 集群。")]),s._v(" "),a("li",[s._v("默认监听 6443 端口，会被其它 kube 服务访问。")])])]),s._v(" "),a("li",[s._v("kube-controller-manager\n"),a("ul",[a("li",[s._v("：负责监控、管理 Node、Namespace、Pod、Service 等各种 k8s 资源。")]),s._v(" "),a("li",[s._v("管理 Pod 时，主要根据 Controller 配置。")])])]),s._v(" "),a("li",[s._v("kube-scheduler\n"),a("ul",[a("li",[s._v("：负责调度 Pod ，根据一些策略决定将 Pod 分配到哪个节点上部署。")])])]),s._v(" "),a("li",[s._v("etcd\n"),a("ul",[a("li",[s._v("：分布式数据库。")]),s._v(" "),a("li",[s._v("默认监听 2379、2380 端口，只被本机的 kube-apiserver 访问，用于存储 k8s 的配置、状态数据。")]),s._v(" "),a("li",[s._v("也可以将 etcd 部署在主节点之外，或集群之外。")])])])])]),s._v(" "),a("li",[a("p",[s._v("所有节点运行以下进程：")]),s._v(" "),a("ul",[a("li",[s._v("kubelet")]),s._v(" "),a("li",[s._v("kube-proxy\n"),a("ul",[a("li",[s._v("：负责管理节点的逻辑网络，基于 iptables 规则。如果节点收到一个发向某个 Pod 的网络包，则自动转发给该 Pod 。\n")])])])])]),s._v(" "),a("li",[a("p",[s._v("用户可使用 kubectl 命令，作为客户端与 apiserver 交互，从而管理 k8s 。")])])]),s._v(" "),a("h3",{attrs:{id:"kubelet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubelet"}},[s._v("#")]),s._v(" kubelet")]),s._v(" "),a("ul",[a("li",[s._v("默认监听 10250 端口。")]),s._v(" "),a("li",[s._v("主要工作：\n"),a("ul",[a("li",[s._v("将当前节点注册到 kube-apiserver 。")]),s._v(" "),a("li",[s._v("监控当前节点。")]),s._v(" "),a("li",[s._v("创建、管理、监控 Pod ，基于容器运行时。")])])]),s._v(" "),a("li",[s._v("kubelet 部署 Pod 时，会调用 CRI 接口 RuntimeService.RunPodSandbox ，先创建一个沙盒（Pod Sandbox），再启动 Pod 中的容器。\n"),a("ul",[a("li",[s._v("Sandbox 负责提供一个 Pod 运行环境，比如设置网络。")]),s._v(" "),a("li",[s._v("Sandbox 可以基于 Linux namespace 实现，也可以基于虚拟机实现，比如 kata-containers 。")]),s._v(" "),a("li",[s._v("基于 Linux namespace 实现 Sandbox 时，kubelet 会先在每个 Pod 中运行一个 pause 容器。\n"),a("ul",[a("li",[s._v("pause 容器是一个简单程序，便于管理 Linux namespace ，比如创建 network namespace 并共享给其它容器。")]),s._v(" "),a("li",[s._v("pause 容器一直以睡眠状态保持运行，避免 Pod 中所有容器进程停止时，Linux namespace 被自动删除。")]),s._v(" "),a("li",[s._v("如果停止 pause 容器，则会导致 kubelet 认为该 Pod 失败，触发重启事件，创建新 Pod 。")]),s._v(" "),a("li",[s._v("pause 容器可以与其它容器共用一个 PID namespace ，从而为其它容器启动 1 号进程、清理僵尸进程。不过 k8s 默认禁用了该共享功能，使得其它容器的 1 号进程的 PID 依然为 1 。")])])])])]),s._v(" "),a("li",[s._v("kubelet 中的 PLEG（Pod Lifecycle Event Generator）模块负责执行 relist 任务：获取本机的容器列表，检查所有 Pod 的状态，如果状态变化则生成 Pod 的生命周期事件。\n"),a("ul",[a("li",[s._v("每执行一次 relist ，会等 1s 再执行下一次 list 。")]),s._v(" "),a("li",[s._v("如果某次 relist 耗时超过 3min ，则报错 "),a("code",[s._v("PLEG is not healthy")]),s._v(" ，并将当前 Node 标记为 NotReady 状态。")])])]),s._v(" "),a("li",[s._v("kubelet 的配置示例："),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("failSwapOn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[s._v("true")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果节点启用了 swap 内存，则拒绝启动 kubelet")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("maxPods")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("110")]),s._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 该 kubelet 节点上最多运行的 Pod 数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("containerLogMaxSize")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 10Mi         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当容器日志文件达到该值时，切割一次")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("containerLogMaxFiles")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器日志文件被切割之后，最多保留几个文件")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("imageGCHighThresholdPercent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("85")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一个百分数。如果节点的磁盘使用率达到高水位，则自动清理未被使用的镜像，从最旧的镜像开始删除，直到磁盘使用率降至低水位")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("image-gc-low-threshold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("evictionMaxPodGracePeriod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 软驱逐 Pod 的最大宽限期，单位为秒。默认为 0 ，即不限制")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源"}},[s._v("#")]),s._v(" 资源")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("k8s 会管理主机、容器等多种对象，又称为资源（resource）。例如：")]),s._v(" "),a("ul",[a("li",[s._v("Cluster\n"),a("ul",[a("li",[s._v("：集群，由 k8s 联系在一起的一组主机。")])])]),s._v(" "),a("li",[s._v("Node\n"),a("ul",[a("li",[s._v("：节点，k8s 集群中的一个主机。")])])]),s._v(" "),a("li",[s._v("Namespace")]),s._v(" "),a("li",[s._v("Pod\n"),a("ul",[a("li",[s._v("：容器组，是 k8s 的最小管理单元。")]),s._v(" "),a("li",[s._v("Docker 以容器形式部署应用，而 k8s 以 Pod 形式部署应用。")])])]),s._v(" "),a("li",[s._v("Service\n"),a("ul",[a("li",[s._v("：对某些 Pod 的反向代理，代表一个抽象的应用服务。")])])])])]),s._v(" "),a("li",[a("p",[s._v("一些 k8s 对象之间存在上下级依赖关系，上级称为 Owner ，下级称为 Dependent 。")]),s._v(" "),a("ul",[a("li",[s._v("删除一个 Owner 时，默认会级联删除它的所有 Dependent ，反之没有影响。")]),s._v(" "),a("li",[s._v("比如一个 Deployment 是一组 Pod 的 Owner 。如果删除这些 Pod ，但保留 Deployment ，则会自动重新创建这些 Pod 。")]),s._v(" "),a("li",[s._v("依赖关系不允许跨命名空间。")])])])]),s._v(" "),a("h3",{attrs:{id:"namespace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#namespace"}},[s._v("#")]),s._v(" Namespace")]),s._v(" "),a("p",[s._v("：命名空间，用于对某些资源进行分组管理，又称为项目（project）。")]),s._v(" "),a("ul",[a("li",[s._v("命名空间可以管理 Pod、Service、PVC 等资源，不同命名空间下的这些资源相互隔离，互不可见。\n"),a("ul",[a("li",[s._v("删除一个命名空间时，会删除其下的所有资源。")]),s._v(" "),a("li",[s._v("可执行 "),a("code",[s._v("kubectl api-resources --namespaced=true")]),s._v(" 查看被命名空间管理的所有资源类型。")]),s._v(" "),a("li",[s._v("Node、IP、StorageClass、PersistentVolumes 不受命名空间影响。")])])]),s._v(" "),a("li",[s._v("一个 k8s 中可以创建多个命名空间。初始有四个："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("default         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 供用户使用")]),s._v("\nkube-system     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 供 k8s 系统内部使用，比如部署 apiserver、etcd 等系统服务")]),s._v("\nkube-node-lease "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 包含各个节点的 lease 对象")]),s._v("\nkube-public     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 公开，未认证的用户也可访问")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),a("ul",[a("li",[s._v("每种 k8s 对象通过一种配置文件进行管理。\n"),a("ul",[a("li",[s._v("配置文件可以是 JSON 或 YAML 格式。")])])]),s._v(" "),a("li",[s._v("配置文件的一般结构："),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" v1              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 与 kube-apiserver 交互时，采用的 API 版本")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" <sting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对象的类型")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对象的元数据")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" <sting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 名称，必填")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("namespace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" default        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 所属的命名空间")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("annotations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 注释")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("<key>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" <value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 标签，用于筛选对象")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("<key>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" <value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# resourceVersion: xx     # 配置文件的版本号，由 k8s 自动更新，是一串随机数字（不是哈希值），全局唯一")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[s._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 规格，描述对象的期望状态")]),s._v("\n  <"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# status:                   # 描述对象的实际状态，这部分字段由 k8s 自动写入")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#   <...>")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("ul",[a("li",[s._v("在同一 namespace 下，同种对象的 name 不能重复。\n"),a("ul",[a("li",[s._v("每个对象会被自动分配一个 UUID ，在整个 k8s 集群的所有 namespace 中唯一。")])])]),s._v(" "),a("li",[s._v("annotations、labels 采用键值对格式。\n"),a("ul",[a("li",[s._v("key、value 都是 String 类型，不能为 bool 等类型。")]),s._v(" "),a("li",[s._v("key 只能包含 "),a("code",[s._v("[a-zA-Z0-9._-]")]),s._v(" 字符，必须以字母、数字开头和结尾。")]),s._v(" "),a("li",[s._v("可以给 key 加上一个 "),a("code",[s._v("<dns_domain>/")]),s._v(" 格式的前缀。\n"),a("ul",[a("li",[s._v("前缀 "),a("code",[s._v("kubernetes.io/")]),s._v(" 、"),a("code",[s._v("k8s.io/")]),s._v(" 保留，供 k8s 系统内部使用。")])])])])])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);