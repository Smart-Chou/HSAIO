(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{722:function(s,a,e){"use strict";e.r(a);var t=e(1),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"shell"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shell"}},[s._v("#")]),s._v(" Shell")]),s._v(" "),e("ul",[e("li",[s._v("广义的 shell 泛指各种操作系统中的命令行解释器，它允许用户在 CLI 界面中输入命令并执行。\n"),e("ul",[e("li",[s._v("它是位于用户与操作系统内核之间的壳程序，使得用户可以与操作系统内核进行交互。")])])]),s._v(" "),e("li",[s._v("狭义的 shell 是指类 Unix 操作系统中的命令行解释器。\n"),e("ul",[e("li",[s._v("比如 sh、bash 等，它们的命令语法相似，是一种脚本语言，称为 shell 。")]),s._v(" "),e("li",[s._v("用户登录 Linux 系统后，会启动一个 shell 解释器，作为一个进程运行，显示 CLI 界面供用户操作。")]),s._v(" "),e("li",[s._v("用户可以在 shell 终端直接执行命令，也可以将多条 shell 命令保存为 shell 脚本（shell scrpts），然后交给 shell 解释器执行。")]),s._v(" "),e("li",[s._v("shell 解释器会将 shell 命令解释成可以被 Linux 内核执行的代码，然后传给内核去执行。")])])])]),s._v(" "),e("h2",{attrs:{id:"语法特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法特点"}},[s._v("#")]),s._v(" 语法特点")]),s._v(" "),e("ul",[e("li",[s._v("脚本文件的扩展名为 .sh 。")]),s._v(" "),e("li",[s._v("每个语句的末尾以换行符或分号 ; 作为分隔符。")]),s._v(" "),e("li",[s._v("用 # 声明单行注释。")]),s._v(" "),e("li",[s._v("支持定义函数，不支持面向对象编程。")]),s._v(" "),e("li",[s._v("shell 脚本的示例："),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token shebang important"}},[s._v("#!/bin/bash")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$#")]),s._v(" -ge "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The input are:"')]),e("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$*")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The input should be at least 2 args."')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fi")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("ul",[e("li",[s._v("脚本的第一行可以用 #! 声明一个 shell 解释器的绝对路径（也可以不声明），这样使用 ./test.sh 的方式执行该脚本时，系统就会自动采用该 shell 解释器。")])])])]),s._v(" "),e("h2",{attrs:{id:"解释器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解释器"}},[s._v("#")]),s._v(" 解释器")]),s._v(" "),e("ul",[e("li",[s._v("1971 年，Ken Thompson 在开发 Unix 系统时设计了一个命令行解释器，称为 sh 。\n"),e("ul",[e("li",[s._v("当时它只支持在终端直接执行命令，不支持执行脚本。")])])]),s._v(" "),e("li",[s._v("后来，Unix 系统上出现了多种 shell 解释器。\n"),e("ul",[e("li",[s._v("其中名为 bash 的 shell 解释器最流行，成为了大部分 Linux 发行版默认的 shell ，它兼容 sh 。")])])]),s._v(" "),e("li",[s._v("例：查看系统可用的所有 shell 解释器"),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /etc/shells")]),s._v("\n/bin/sh\n/bin/bash\n/sbin/nologin\n/usr/bin/sh\n/usr/bin/bash\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])])]),s._v(" "),e("li",[s._v("例：查看当前的 shell 解释器"),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# sh   # 进入 sh 终端")]),s._v("\nsh-4.2"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo $SHELL   # 查看用户的 login shell")]),s._v("\n/bin/bash\nsh-4.2"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo $0       # 查看当前使用的 shell")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("\nsh-4.2"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# e             # 输入一条不存在的命令，可以从报错信息中判断出当前使用的 shell")]),s._v("\nsh: e: "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("command")]),s._v(" not found\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])])]),s._v(" "),e("li",[s._v("shell 解释器在启动时，会检查其输入、输出是否指向终端，如果是，则进入交互模式（interactive）。\n"),e("ul",[e("li",[s._v("比如让 shell 解释器从文件中读取输入，就是非交互模式。")]),s._v(" "),e("li",[s._v("可以根据变量 PS1 是否存在，判断当前是否处于交互模式。")])])])]),s._v(" "),e("h2",{attrs:{id:"执行脚本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#执行脚本"}},[s._v("#")]),s._v(" 执行脚本")]),s._v(" "),e("h3",{attrs:{id:"脚本路径"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#脚本路径"}},[s._v("#")]),s._v(" 脚本路径")]),s._v(" "),e("p",[s._v("可以直接在终端输入 shell 脚本的文件路径，执行它：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ./1.sh")]),s._v("\n-bash: ./1.sh: Permission denied\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("此时系统会自动选择一个 shell 解释器来执行它。")]),s._v(" "),e("li",[s._v("通常会因为没有该文件的可执行权限而报错，需要先执行： "),e("code",[s._v("chmod +x 1.sh")])]),s._v(" "),e("li",[s._v("执行 shell 脚本时可以输入参数，比如："),e("code",[s._v("./1.sh arg1 arg2")])])]),s._v(" "),e("h3",{attrs:{id:"bash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bash"}},[s._v("#")]),s._v(" bash")]),s._v(" "),e("p",[s._v("可以用指定的 shell 解释器执行 shell 脚本，例如 bash ：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("xx.sh"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个子 shell 来执行 shell 脚本，执行完之后该子 shell 会自动退出")]),s._v("\n      -x            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 打印出执行的每条命令（每行开头会显示加号 + ）")]),s._v("\n      -n            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不执行脚本，而是检查是否有语法错误")]),s._v("\n      -c "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("comman"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不执行脚本，而是执行一条命令")]),s._v("\n      -i            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 让 shell 解释器采用交互模式")]),s._v("\n      -l            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --login ，让 shell 解释器模拟 login shell")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"source"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#source"}},[s._v("#")]),s._v(" source")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("xx.sh"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 读取 shell 脚本的内容，放到当前 shell 中执行")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("source 命令又称为点命令，可以用一个点表示，比如："),e("code",[s._v(". 1.sh")])])]),s._v(" "),e("h3",{attrs:{id:"exec"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[s._v("#")]),s._v(" exec")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("command"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行一条命令")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("关于子进程：\n"),e("ul",[e("li",[s._v("用 bash 等 shell 解释器执行脚本时，会 fork 一个子 shell 进程来执行脚本，每执行一个命令就 fork 一个子进程，因此有两层子进程。")]),s._v(" "),e("li",[s._v("用 source 执行脚本时，会在当前 shell 中执行脚本，每执行一个命令就 fork 一个子进程。")]),s._v(" "),e("li",[s._v("用 exec 执行命令时，会用该命令进程替换当前 shell 进程，因此执行完命令之后就会退出终端。")])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);