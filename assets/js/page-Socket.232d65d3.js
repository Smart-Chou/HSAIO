(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{565:function(s,t,a){s.exports=a.p+"assets/img/socket_1.0c19e2e2.png"},566:function(s,t,a){s.exports=a.p+"assets/img/socket_2.9cb315ca.png"},751:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"socket"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[s._v("#")]),s._v(" Socket")]),s._v(" "),n("p",[s._v("：套接字。是一种在内存中创建的文件描述符，并不会实际存储在磁盘上。")]),s._v(" "),n("ul",[n("li",[s._v("使用 Socket ，程序可以用读写文件的方式进行进程间通信。主要有两种用法：\n"),n("ul",[n("li",[s._v("Unix Domain Socket ：用于本机的进程之间通信，保存为一个 Socket 文件，比如 /var/lib/mysql/mysql.sock 。")]),s._v(" "),n("li",[s._v("Network Socket ：用于不同主机的进程之间通信，基于 TCP/UDP 协议通信，用 host:port 表示通信方。")])])])]),s._v(" "),n("h2",{attrs:{id:"tcp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[s._v("#")]),s._v(" TCP")]),s._v(" "),n("h3",{attrs:{id:"socket-状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#socket-状态"}},[s._v("#")]),s._v(" Socket 状态")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("建立 TCP 连接时的 Socket 状态变化：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(565),alt:"",loading:"lazy"}})]),s._v(" "),n("ul",[n("li",[n("code",[s._v("LISTEN")]),s._v("      ：server 正在监听该 Socket ，允许接收 TCP 包。")]),s._v(" "),n("li",[n("code",[s._v("SYN_SENT")]),s._v("    ：client 已发出 SYN=1 的 TCP 包，还没有收到 SYN+ACK 包。")]),s._v(" "),n("li",[n("code",[s._v("SYN_RECV")]),s._v("    ：server 已收到 SYN 包，还没有收到 ACK 包。\n"),n("ul",[n("li",[s._v("如果 server 一直未收到 ACK 包，则会在超时之后重新发送 SYN+ACK 包，再次等待。多次超时之后，server 会关闭该连接。")])])]),s._v(" "),n("li",[n("code",[s._v("ESTABLISHED")]),s._v(" ：已建立连接。")])])]),s._v(" "),n("li",[n("p",[s._v("断开 TCP 连接时的 Socket 状态变化：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(566),alt:"",loading:"lazy"}})]),s._v(" "),n("ul",[n("li",[n("code",[s._v("FIN-WAIT-1")])]),s._v(" "),n("li",[n("code",[s._v("FIN-WAIT-2")])]),s._v(" "),n("li",[n("code",[s._v("TIME_WAIT")]),s._v(" "),n("ul",[n("li",[s._v("主动关闭方在关闭连接之后，还要等待 2*MSL 时间之后才能变成 CLOSED 状态，避免对方来不及关闭连接。此时该端口占用的资源不会被内核释放。")]),s._v(" "),n("li",[s._v("MSL（Maximum Segment Lifetime）：TCP 段在网络传输中的最大生存时间，超过该时间就会被丢弃。它的默认值为 2 分钟。")]),s._v(" "),n("li",[s._v("一般 HTTP 通信时，服务器发出响应报文之后就会主动关闭连接（除非是长连接），使端口变成 TIME_WAIT 状态。")]),s._v(" "),n("li",[s._v("如果服务器处理大部分 HTTP 请求的时长，都远低于 TIME_WAIT 时长，就容易产生大量 TIME_WAIT 状态的端口，影响并发性能。")])])]),s._v(" "),n("li",[n("code",[s._v("CLOSE_WAIT")]),s._v(" "),n("ul",[n("li",[s._v("例如：HTTP 客户端发送 FIN 包来主动关闭连接时，HTTP 服务器没有马上调用 close() 关闭端口，就会长时间处于 CLOSE_WAIT 状态。")])])]),s._v(" "),n("li",[n("code",[s._v("LAST_ACK")])]),s._v(" "),n("li",[n("code",[s._v("CLOSED")]),s._v(" ：已关闭连接。")])])])]),s._v(" "),n("h3",{attrs:{id:"连接队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#连接队列"}},[s._v("#")]),s._v(" 连接队列")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("建立 TCP 连接时，server 方的内核会为每个 Socket 维护 SYN、accept 两个连接队列。")]),s._v(" "),n("ul",[n("li",[s._v("当连接变为 SYN_RECV 状态时，将连接信息存入 SYN 队列，又称为半连接队列。\n"),n("ul",[n("li",[s._v("此时每个连接占用 304 bytes 内存。")]),s._v(" "),n("li",[s._v("查看半连接的数量："),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" SYN_RECV "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("wc")]),s._v(" -l\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])])])])]),s._v(" "),n("li",[s._v("当连接变为 ESTABLISHED 状态时，将它从 SYN 队列取出，存入 accept 队列，又称为全连接队列。\n"),n("ul",[n("li",[s._v("然后等待进程主动调用 accept() 函数，取出连接。")])])])])]),s._v(" "),n("li",[n("p",[s._v("当队列满了时，Socket 不能接收新连接。")]),s._v(" "),n("ul",[n("li",[s._v("内核默认会在 SYN 队列满了时启用 SYN Cookies 功能，从而抵抗 SYN Flood 攻击。\n"),n("ul",[n("li",[s._v("原理：将 SYN_RECV 状态的连接信息不存入 SYN 队列，而是在 server 回复的 SYN+ACK 包中包含一个 cookie 信息。client 之后发出 ACK 包时如果包含该 cookie ，则允许建立连接。")]),s._v(" "),n("li",[s._v("该功能不符合 TCP 协议，与某些服务不兼容。")])])])])])]),s._v(" "),n("h3",{attrs:{id:"常见报错"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常见报错"}},[s._v("#")]),s._v(" 常见报错")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("当主机 A 向主机 B 的某个端口发送 SYN 包，请求建立 TCP 连接时：")]),s._v(" "),n("ul",[n("li",[s._v("如果主机 B 的防火墙禁用了该端口，则会拒绝通信，导致主机 A 报错："),n("code",[s._v("No route to host")]),s._v(" "),n("ul",[n("li",[s._v("防火墙也可能丢弃该包，不作出响应，导致主机 A 长时间停留在尝试连接的阶段，显示："),n("code",[s._v("Trying <host>...")])]),s._v(" "),n("li",[s._v("如果主机 A 长时间没有收到回复（连 RST 包都没收到），则超出等待时间之后会报错："),n("code",[s._v("Connection timed out")])])])]),s._v(" "),n("li",[s._v("如果主机 B 的防火墙放通了该端口，但没有进程在监听该 socket ，则会回复一个 RST 包，表示拒绝连接，导致主机 A 报错："),n("code",[s._v("Connection refused")])])])]),s._v(" "),n("li",[n("p",[s._v("当主机 A 与主机 B 通信过程中，主机 B 突然断开 TCP 连接时：")]),s._v(" "),n("ul",[n("li",[s._v("如果主机 A 继续读取数据包，主机 B 就会回复一个 RST 包，导致主机 A 报错："),n("code",[s._v("Connection reset")])]),s._v(" "),n("li",[s._v("如果主机 A 继续发送数据包，主机 B 就会回复一个 RST 包，导致主机 A 报错："),n("code",[s._v("Connection reset by peer")])])])])]),s._v(" "),n("h2",{attrs:{id:"相关-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关-api"}},[s._v("#")]),s._v(" 相关 API")]),s._v(" "),n("h3",{attrs:{id:"创建-socket"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建-socket"}},[s._v("#")]),s._v(" 创建 Socket")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("创建 Socket 的 API ：")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/socket.h>")])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建一个 Socket ，输入的参数用于指定协议、类型，返回一个文件描述符 sockfd")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("socket")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" domain"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" protocol"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将一个 Socket 绑定到指定的 IP:PORT")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("bind")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sockaddr")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("socklen_t")]),s._v(" addrlen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 让 Socket 进入 Listen 状态（常被作为服务器的进程调用）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("listen")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" backlog"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// backlog ：accept 队列的最大长度。该值的隐式最大值为 net.core.somaxconn")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 连接到指定 Socket（常被作为客户端的进程调用）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("connect")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sockaddr")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("socklen_t")]),s._v(" addrlen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 从指定 Socket的 accept 队列取出一个 TCP 握手成功的连接，为它创建并绑定一个新 Socket ，返回新的 sockfd")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 源 Socket 为 Listen 状态，新 Socket 为 ESTABLISHED 状态")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 accept 队列为空，则一直阻塞等待")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sockaddr")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("restrict addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("socklen_t")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("restrict addrlen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// addr    ：请求连接的客户端地址")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// addrlen ：客户端地址的长度，即 sizeof(addr)")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 用于停止 Socket 的通信（但并没有关闭 Socket ）")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" how"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// how ：表示操作类型，可取值：")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// SHUT_RD   ：停止接收，并丢弃接收缓冲区中的数据")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// SHUT_WR   ：停止发送，但继续传输发送缓冲区中的数据")]),s._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// SHUT_RDWR ：停止接收和发送")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("TCP 服务器的通信流程示例：")]),s._v(" "),n("ol",[n("li",[s._v("调用 socket() 创建 Socket ，然后用 bind() 绑定，用 listen() 监听，等待客户端建立 TCP 连接。")]),s._v(" "),n("li",[s._v("调用 accept() ，接收客户端的连接。")]),s._v(" "),n("li",[s._v("调用 read()、write() 读写 Socket 。")]),s._v(" "),n("li",[s._v("调用 close() 关闭 Socket 。")])])]),s._v(" "),n("li",[n("p",[s._v("每个 Socket 连接由五元组 protocol、src_addr、src_port、dst_addr、dst_port 确定，只要其中一项元素不同， Socket 的文件描述符就不同。")]),s._v(" "),n("ul",[n("li",[s._v("当服务器监听一个 TCP 端口时，可以被任意 dst_addr、dst_port 连接，因此建立的 Socket 连接有 255^4 * 65535 种可能性。")]),s._v(" "),n("li",[s._v("实际上，一个主机上建立的 Socket 连接数一般最多为几万个，主要受以下因素限制：\n"),n("ul",[n("li",[s._v("进程允许打开的文件描述符总数")]),s._v(" "),n("li",[s._v("内存总量")])])])])]),s._v(" "),n("li",[n("p",[s._v("内核收到一个发向本机的 TCP/UDP 数据包时，先检查其目标 IP 、目标端口，判断属于哪个 Socket ，然后交给监听该 Socket 的进程。")]),s._v(" "),n("ul",[n("li",[s._v("如果不存在该 Socket ，则回复一个 RST 包，表示拒绝连接。")]),s._v(" "),n("li",[s._v("如果一个进程调用 bind() 时，该端口已被其它进程绑定，则会报错："),n("code",[s._v("bind() failed: Address already in use")])]),s._v(" "),n("li",[s._v("如果 bind 的端口小于 1024 ，则需要 root 权限。")]),s._v(" "),n("li",[s._v("如果一个进程绑定 IP 为 127.0.0.1 并监听，则只会收到本机发来的数据包，因为其它主机发来的数据包的目标 IP 不可能是本机环回地址。")]),s._v(" "),n("li",[s._v("如果一个进程绑定 IP 为 0.0.0.0 并监听，则会收到所有目标 IP 的数据包，只要目标端口一致。")])])])]),s._v(" "),n("h3",{attrs:{id:"读写-socket"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#读写-socket"}},[s._v("#")]),s._v(" 读写 Socket")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Socket 支持使用文件的关闭、读写 API ：")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("close")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("read")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("也可以调用 recv()、send() 等 API 进行通信。")])])]),s._v(" "),n("li",[n("p",[s._v("关闭 Socket 的几种方式：")]),s._v(" "),n("ul",[n("li",[s._v("等创建该 Socket 的进程主动调用 close() 。\n"),n("ul",[n("li",[s._v("其它进程不允许关闭，即使是 root 用户。")])])]),s._v(" "),n("li",[s._v("终止创建该 Socket 的进程，内核会自动回收其创建的所有 Socket 。")]),s._v(" "),n("li",[s._v("通过 gdb ，调试创建该 Socket 的进程，调用 close() 。如下："),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("ss -tapn "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PORT")]),s._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 找出监听某个端口的进程的 PID")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("lsof")]),s._v(" -p "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PID")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" TCP   "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 找出该进程创建的 Socket 的文件描述符 FD")]),s._v("\ngdb  -p "),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$PID")]),s._v("              "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 调试该进程")]),s._v("\ncall close"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$FD")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("           "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关闭 Socket")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])])])])])]),s._v(" "),n("h3",{attrs:{id:"io-模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#io-模型"}},[s._v("#")]),s._v(" IO 模型")]),s._v(" "),n("ul",[n("li",[s._v("调用 API 进行网络通信时，Unix 提供了五种 IO 模型：\n"),n("ul",[n("li",[s._v("阻塞（blocking） IO")]),s._v(" "),n("li",[s._v("非阻塞（nonblocking） IO")]),s._v(" "),n("li",[s._v("IO 复用（multiplexing）")]),s._v(" "),n("li",[s._v("信号驱动（signal driven） IO")]),s._v(" "),n("li",[s._v("异步（asynchronous） IO ：简称为 AIO")])])])]),s._v(" "),n("h4",{attrs:{id:"阻塞-io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阻塞-io"}},[s._v("#")]),s._v(" 阻塞 IO")]),s._v(" "),n("ul",[n("li",[s._v("：进程调用 API 接收数据时，要等数据从 Socket 缓冲区拷贝到进程缓冲区，API 才返回。\n"),n("ul",[n("li",[s._v("发送数据时，也要等数据从进程缓冲区拷贝到 Socket 缓冲区，API 才返回。")])])]),s._v(" "),n("li",[s._v("优点：阻塞进程时，不会占用 CPU ，可运行其它进程。")]),s._v(" "),n("li",[s._v("缺点：调用 API 时会阻塞进程，耗时较久。")]),s._v(" "),n("li",[s._v("相关 API ："),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/socket.h>")])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("recv")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 接收数据。将 Socket 接收缓冲区中的数据，拷贝到 buf ，然后返回实际读取的字节数")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sockfd ：指定 Socket 的文件描述符")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// buf    ：指向一块内存空间的指针，用作读缓冲。内核会从 Socket 接收缓冲区读取数据，写入其中")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// len    ：声明 buf 缓冲区的长度")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("recvfrom")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("restrict buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sockaddr")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("restrict src_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("socklen_t")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("restrict addrlen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 与 recv() 相比，只接收来自指定源地址的数据")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("send")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 发送数据。将 buf 中的数据，拷贝到 Socket 发送缓冲区，然后返回实际拷贝的字节数")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ssize_t")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("sendto")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sockfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("buf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" len"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sockaddr")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("dest_addr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("socklen_t")]),s._v(" addrlen"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 与 send() 相比，只发送数据给指定目标地址")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("ul",[n("li",[s._v("调用 "),n("code",[s._v("recv(sockfd, buf, len, flags);")]),s._v(" 相当于 "),n("code",[s._v("recvfrom(sockfd, buf, len, flags, NULL, NULL);")]),s._v(" 。")]),s._v(" "),n("li",[s._v("收发时，如果一个数据包较大，则需要多次调用 recv() 或 send() 。")]),s._v(" "),n("li",[s._v("TCP 通信时，通常使用 recv()、send() ，因为远程主机的地址已经绑定到 Socket 了。\n"),n("ul",[n("li",[s._v("UDP 通信时，通常使用 recvfrom()、sendto() ，从而区分不同地址的远程主机。")])])])])]),s._v(" "),n("li",[s._v("进程调用 recv() 的工作流程：\n"),n("ol",[n("li",[s._v("进程动态分配一块内存空间，用作缓冲区，用 buf 指针记录。然后开始调用 recv() 。")]),s._v(" "),n("li",[s._v("网卡一边接收字节数据，一边写入 Socket 的接收缓冲区。等接收完一个数据包，就通过中断通知内核。\n"),n("ul",[n("li",[s._v("内核为会每个 Socket 创建 Recv、Send 缓冲区，用于缓冲收、发的数据。")]),s._v(" "),n("li",[s._v("为了避免缓冲区溢出，可以提高调用 recv() 的频率，或者修改 "),n("code",[s._v("net.core.rmem_default")]),s._v(" 内核参数来扩大缓冲区。")])])]),s._v(" "),n("li",[s._v("内核将 Recv 缓冲区中的数据，拷贝到进程的 buf 缓冲区。")]),s._v(" "),n("li",[s._v("recv() 函数返回，进程可以从 buf 读取数据。")])])])]),s._v(" "),n("h4",{attrs:{id:"非阻塞-io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞-io"}},[s._v("#")]),s._v(" 非阻塞 IO")]),s._v(" "),n("ul",[n("li",[s._v("：进程调用 API 时，API 立即返回一个错误码，然后进程需要轮询 IO 是否完成。")]),s._v(" "),n("li",[s._v("优点：调用 API 的耗时很短。")]),s._v(" "),n("li",[s._v("缺点：需要多次轮询，占用更多 CPU 。")])]),s._v(" "),n("h4",{attrs:{id:"io-复用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#io-复用"}},[s._v("#")]),s._v(" IO 复用")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("：进程调用 API 阻塞监视多个 Socket ，等任一 Socket 变为可读或可写时返回。然后进程再调用 recv() 或 send() 。")])]),s._v(" "),n("li",[n("p",[s._v("优点：处理大量连接时，不必为每个 Socket 都创建一个进程或线程。")])]),s._v(" "),n("li",[n("p",[s._v("select() 是最老的一种 IO 复用 API ，大部分操作系统都支持：")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/select.h>")])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("select")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("restrict readfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("restrict writefds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" fd_set "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("restrict exceptfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("timeval")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("restrict timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 阻塞监视多个文件描述符，等任一文件描述符满足条件时才返回")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nfds       ：取值等于监视的最大一个文件描述符 + 1")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// readfds    ：一组文件描述符，当任一变为可读时，函数返回")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// writefds   ：一组文件描述符，当任一变为可写时，函数返回")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// exceptfds  ：一组文件描述符，当任一发生异常时，函数返回")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// timeout    ：函数阻塞的超时时间")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("ul",[n("li",[s._v("等待文件描述符变为可读、可写，是指可以立即进行 IO 操作而不会阻塞。")]),s._v(" "),n("li",[s._v("select() 将监视的所有文件描述符记录在一个数组中，数组长度固定为 FD_SETSIZE=1024 。")])])]),s._v(" "),n("li",[n("p",[s._v("poll() 是一种改进的 API ：")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("<poll.h>")])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("poll")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pollfd")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("fds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("nfds_t")]),s._v(" nfds"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 阻塞监视多个文件描述符")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fds  ：一个指针，记录一组 pollfd 结构体的首地址")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// nfds ：pollfd 结构体的数量")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pollfd")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v("   fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("         "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 文件描述符")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")]),s._v(" events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 监视的事件，比如文件可读、可写等")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")]),s._v(" revents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 实际发生的事件。调用 poll() 时内核会赋值该变量")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ul",[n("li",[s._v("poll() 不限制文件描述符的数量，而且监视的事件比 select() 更多。")])])]),s._v(" "),n("li",[n("p",[s._v("Linux 系统独有地，将 poll() 改进为了 epoll 系列 API ：")]),s._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/epoll.h>")])]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("epoll_create")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" size"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建一个 epoll 实例，返回其文件描述符 epfd")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// size ：允许 epoll 实例监视的文件描述符总数。Linux 2.6 开始会自动调整 size ，因此传入 size>0 即可")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("epoll_ctl")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" op"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" fd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("epoll_event")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("event"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 控制一个 epoll 实例，管理对一个文件描述符 fd 的监视事件")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fd    ：一个文件描述符，如果有多个文件描述符需要监视，则需要多次调用 epoll_ctl()")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// op    ：操作类型。比如添加、删除监视的事件")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// event ：一组事件。epoll_event 结构体中记录了一个文件描述符、监视的事件")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("epoll_wait")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" epfd"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("epoll_event")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("events"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" maxevents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" timeout"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 阻塞监视一个 epoll 实例，等任一事件发生时，返回满足条件的事件数量")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 超时时，函数返回 0")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 出错时，函数返回 -1 ，并设置 errno")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// events    ：一个指针。调用 epoll_wait() 时，内核会将发生的的一组事件的首地址赋值给该指针")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// maxevents ：最多返回的事件数")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// timeout   ：阻塞的超时时间，单位 ms 。取值为 0 则立即返回，适合轮询。取值为 -1 则会一直阻塞。")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("ul",[n("li",[s._v("epoll 实例以文件形式保存，使用完之后应该 close() 。")]),s._v(" "),n("li",[s._v("epoll 只返回发生的事件，不需要检查所有文件描述符，比 select() 和 poll() 更高效，更适合监视大量文件描述符。")]),s._v(" "),n("li",[s._v("epoll 是线程安全的，而 select() 和 poll() 不是。\n"),n("ul",[n("li",[s._v("当一个线程阻塞等待 epoll 实例时，其它线程可以向该 epoll 实例添加文件描述符。如果新的文件描述符满足条件，则会解除阻塞。")])])])])])]),s._v(" "),n("h4",{attrs:{id:"信号驱动-io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#信号驱动-io"}},[s._v("#")]),s._v(" 信号驱动 IO")]),s._v(" "),n("ul",[n("li",[s._v("：进程调用 sigaction() ，函数会立即返回。等 Socket 变为可读或可写时，内核会发送 SIGIO 信号通知进程。然后进程再调用 recv() 或 send() 。")])]),s._v(" "),n("h4",{attrs:{id:"异步-io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步-io"}},[s._v("#")]),s._v(" 异步 IO")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("：进程调用 API 读写 Socket ，函数会立即返回。等内核完成 IO 操作之后，再发送信号通知进程。")])]),s._v(" "),n("li",[n("p",[s._v("相当于另外创建了一个线程，去执行 recv() 或 send() 。")])]),s._v(" "),n("li",[n("p",[s._v("其它四种 IO 模型都属于同步 IO ，进程需要等待 IO 完成，才能执行其它任务。")])]),s._v(" "),n("li",[n("p",[s._v("同步通信（Synchronous）")]),s._v(" "),n("ul",[n("li",[s._v("：指一个程序对外发送消息之后，要等收到回复，才能执行其它任务。")]),s._v(" "),n("li",[s._v("在等待回复的期间，该程序属于阻塞（Block）状态。")])])]),s._v(" "),n("li",[n("p",[s._v("异步通信（Asynchronous）")]),s._v(" "),n("ul",[n("li",[s._v("：指一个程序对外发送消息之后，不必等收到回复，就执行其它任务。")]),s._v(" "),n("li",[s._v("例如：打电话属于同步通信，需要一边说话一边听对方的回复。而发短信属于异步通信。")]),s._v(" "),n("li",[s._v("CPU 的运行速度远高于磁盘 IO 、网络 IO 速度。因此采用同步 IO 时，程序经常会阻塞，不占用 CPU 。采用异步 IO 可以大幅提高 CPU 的使用率。")])])])]),s._v(" "),n("h2",{attrs:{id:"相关命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关命令"}},[s._v("#")]),s._v(" 相关命令")]),s._v(" "),n("h3",{attrs:{id:"sockstat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sockstat"}},[s._v("#")]),s._v(" sockstat")]),s._v(" "),n("p",[s._v("通过 "),n("code",[s._v("/proc/net/sockstat")]),s._v(" 文件可查看各种状态的 socket 数量：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CentOS ~"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /proc/net/sockstat")]),s._v("\nsockets: used "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1101")]),s._v("\nTCP: inuse "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v(" orphan "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" tw "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("260")]),s._v(" alloc "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("402")]),s._v(" mem "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("37")]),s._v("\nUDP: inuse "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" mem "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\nUDPLITE: inuse "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nRAW: inuse "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nFRAG: inuse "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" memory "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[n("code",[s._v("used")]),s._v(" ：使用的 socket 数量。")]),s._v(" "),n("li",[n("code",[s._v("inuse")]),s._v(" ：监听的 socket 数量。")]),s._v(" "),n("li",[n("code",[s._v("orphan")]),s._v(" ：无主的，不属于任何进程。")]),s._v(" "),n("li",[n("code",[s._v("tw")]),s._v(" ：time_wait 。")]),s._v(" "),n("li",[n("code",[s._v("alloc")]),s._v(" ：allocated ，已分配的。")]),s._v(" "),n("li",[n("code",[s._v("mem")]),s._v(" ：内存中缓冲区的大小，单位未知。")])]),s._v(" "),n("h3",{attrs:{id:"netstat"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#netstat"}},[s._v("#")]),s._v(" netstat")]),s._v(" "),n("p",[s._v("：用于查看本机网络连接的状态。")]),s._v(" "),n("ul",[n("li",[s._v("命令："),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v("\n        -a  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有 socket")]),s._v("\n        -l  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示被进程 listen 的 socket")]),s._v("\n        -t  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示 TCP 的 socket")]),s._v("\n        -u  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示 UDP 的 socket")]),s._v("\n        -x  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示 unix socket")]),s._v("\n\n        -e  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加显示 User、Inode 列")]),s._v("\n        -p  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加显示 PID/Program name 列，表示使用每个 socket 的进程")]),s._v("\n        -n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不允许用服务名代替端口号（比如默认会把 22 端口显示成 ssh）")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])])])]),s._v(" "),n("h3",{attrs:{id:"ss"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ss"}},[s._v("#")]),s._v(" ss")]),s._v(" "),n("p",[s._v("：socket statistics ，用于查看本机 socket 的状态。")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("与 netstat 命令类似，但运行速度更快。")])]),s._v(" "),n("li",[n("p",[s._v("命令：")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("$ ss        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示 established 状态的 socket")]),s._v("\n    -a      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有状态的 socket")]),s._v("\n    -l      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示被进程 listen 的 socket")]),s._v("\n    -t      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示 TCP 的 socket")]),s._v("\n    -u      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示 UDP 的 socket")]),s._v("\n    -x      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示 unix socket")]),s._v("\n\n    -p      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示使用每个 socket 的进程名")]),s._v("\n    -n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不允许用服务名代替端口号")]),s._v("\n\n    -s      "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示各种 Socket 的统计数量")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])])]),s._v(" "),n("li",[n("p",[s._v("例：查看所有 TCP 端口的信息")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ss -tapn | cat    # 加上 cat 使显示的 users 列不换行")]),s._v("\nState      Recv-Q Send-Q Local Address:Port    Peer Address:Port\nLISTEN     "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v("    "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:34186            *:*              users:"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v('"node"'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("15647")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\nLISTEN     "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v("        *:111                  *:*              users:"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v('"systemd"'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("51")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\nLISTEN     "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("128")]),s._v("        *:22                   *:*              users:"),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("((")]),s._v('"sshd"'),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("pid"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3057")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("fd"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("))")])]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[s._v("不指定 Socket 类型时，默认显示的第一列是 "),n("code",[s._v("Netid")]),s._v(" ，表示 Socket 类型，取值包括："),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("TCP\nUDP\nu_str     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Unix Stream")]),s._v("\nu_dgr     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# UNIX datagram")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("nl")]),s._v("        "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# net link")]),s._v("\np_raw     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# raw packet")]),s._v("\np_dgr     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# datagram packet")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])])]),s._v(" "),n("li",[s._v("LISTEN 状态时：\n"),n("ul",[n("li",[s._v("Recv-Q 表示当前 accept 队列的长度。")]),s._v(" "),n("li",[s._v("Send-Q 表示 accept 队列允许的最大长度。")])])]),s._v(" "),n("li",[s._v("非 LISTEN 状态时：\n"),n("ul",[n("li",[s._v("Recv-Q 表示接收队列的长度，即已接收、尚未被进程读取的字节数。")]),s._v(" "),n("li",[s._v("Send-Q 表示发送队列的长度，即已发送、尚未收到对方 ACK 的字节数。")]),s._v(" "),n("li",[s._v("上述两个值为 0 时最好，说明内核缓冲区没有堆积。")])])]),s._v(" "),n("li",[s._v("最右端的一列 users 表示监听每个端口的进程。")])])]),s._v(" "),n("li",[n("p",[s._v("例：查看各种 Socket 的统计数量")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ss -s")]),s._v("\nTotal: "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1101")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kernel "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1405")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("           "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Total 表示存在的 Socket 数。不过 kernel 中存在的 Socket 数较多一些，因为有些 Socket 已关闭，但尚未回收")]),s._v("\nTCP:   "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("697")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("estab "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("140")]),s._v(", closed "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("538")]),s._v(", orphaned "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", synrecv "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", timewait "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("295")]),s._v("/0"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(", ports "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\nTransport Total     IP        IPv6\n*         "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1405")]),s._v("      -         -\nRAW       "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nUDP       "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("         "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("         "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("     "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 统计 UDP 类型的 Socket ，包括总数、IPv4 数量、IPv6 数量")]),s._v("\nTCP       "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("159")]),s._v("       "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("44")]),s._v("        "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("115")]),s._v("\nINET      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("162")]),s._v("       "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v("        "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("116")]),s._v("\nFRAG      "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("         "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("ul",[n("li",[s._v("执行 "),n("code",[s._v("ss -a")]),s._v(" 时不会显示 closed 状态的 Socket ，但它们的确存在，占用了文件描述符。")]),s._v(" "),n("li",[s._v("这里 closed 状态的 Socket ，不是指被 close() 关闭的 Socket （它们会被内核回收），而是指没有通信的 Socket 。比如：\n"),n("ul",[n("li",[s._v("程序创建 Socket 之后，没有成功调用 connect() ，导致该 Socket 从未进行通信。")]),s._v(" "),n("li",[s._v("程序调用了 shutdown() ，但没有调用 close() ，导致该 Socket 停止通信。")])])])])])])])}),[],!1,null,null,null);t.default=e.exports},767:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"socket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket"}},[s._v("#")]),s._v(" Socket")]),s._v(" "),a("p",[s._v("：又称为套接字，位于会话层。")]),s._v(" "),a("ul",[a("li",[s._v("是在 TCP、UDP 协议的基础上创建虚拟端口，从而区分同一个主机上不同进程收发的 TCP、UDP 数据包。\n"),a("ul",[a("li",[s._v("应用层的进程进行通信时，通过 IP 协议只能定位目标主机，不能定位目标主机上的进程。因此，通常使用 Socket 进行 TCP、UDP 通信。")])])]),s._v(" "),a("li",[s._v("简单的情况下，用 "),a("code",[s._v("IP:PORT")]),s._v(" 两个参数可以确定一个 Socket 。比如 "),a("code",[s._v("127.0.0.1:80")]),s._v(" 。\n"),a("ul",[a("li",[s._v("IP ：IPv4 或 IPv6 地址，用于定位主机。")]),s._v(" "),a("li",[s._v("PORT ：端口号，用于定位主机上的进程。")])])]),s._v(" "),a("li",[s._v("实际上，Socket 通信中的数据包一般包含以下信息：\n"),a("ul",[a("li",[s._v("SRC-IP、SRC-PORT ：发送方的 Socket 。")]),s._v(" "),a("li",[s._v("DEST-IP、DEST-PORT ：接收方的 Socket 。")]),s._v(" "),a("li",[s._v("PROTOCOL ：协议，是 int 型值，默认为 0 。\n"),a("ul",[a("li",[s._v("如果使用不同的协议，同一主机上的不同进程就可以绑定同一个端口，一个进程也可以重复绑定一个端口。")])])])])])]),s._v(" "),a("p",[s._v("例：")]),s._v(" "),a("ol",[a("li",[s._v("假设主机 A 的 IP 为 10.0.0.1 ，其上有一个进程 a ，申请使用 TCP 80 端口。")]),s._v(" "),a("li",[s._v("主机 A 将 TCP 80 端口绑定到进程 a 。")]),s._v(" "),a("li",[s._v("如果其它主机上的进程想与进程 A 通信，就发送 TCP 数据包，目标 Socket 为：10.0.0.1:80")]),s._v(" "),a("li",[s._v("路由器收到 TCP 包之后，会将它转发给 IP 相符的主机 A 。")]),s._v(" "),a("li",[s._v("主机 A 收到 TCP 包之后，会将它转发给绑定 80 端口的进程 A 。（此过程称为进程 A 在“监听”80 端口）")]),s._v(" "),a("li",[s._v("进程 A 收到 TCP 包之后，可以从中发现发送方的 Socket ，作出回复。")])]),s._v(" "),a("h2",{attrs:{id:"端口号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#端口号"}},[s._v("#")]),s._v(" 端口号")]),s._v(" "),a("ul",[a("li",[s._v("端口号在 TCP/UDP 报文中存储为 16 位的无符号整数，因此取值范围为 0~65535 。")]),s._v(" "),a("li",[s._v("如果进程申请监听端口 0 ，则会被随机分配一个可用端口来监听。如下："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# python3 -m http.server 0")]),s._v("\nServing HTTP on "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v(".0.0 port "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("33720")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("http://0.0.0.0:33720/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[s._v("小于 1024 的端口通常被系统服务、标准通信协议使用，不建议普通进程使用。例如：\n"),a("ul",[a("li",[s._v("FTP 协议     ：20、21")]),s._v(" "),a("li",[s._v("SSH 协议     ：22")]),s._v(" "),a("li",[s._v("telnet 协议  ：23")]),s._v(" "),a("li",[s._v("SMTP 协议    ：25")]),s._v(" "),a("li",[s._v("HTTP 协议    ：80")]),s._v(" "),a("li",[s._v("HTTPS 协议   ：443")])])])]),s._v(" "),a("h2",{attrs:{id:"socket-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-api"}},[s._v("#")]),s._v(" Socket API")]),s._v(" "),a("ul",[a("li",[s._v("操作系统一般会提供 Socket 通信的 API ，比如 bind、send、close 等。")])]),s._v(" "),a("h2",{attrs:{id:"♢-socket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#♢-socket"}},[s._v("#")]),s._v(" ♢ socket")]),s._v(" "),a("p",[s._v("：Python 的标准库，用于进行 Socket 通信。")])])}),[],!1,null,null,null);t.default=e.exports}}]);