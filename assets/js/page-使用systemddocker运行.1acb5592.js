(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{1056:function(e,s,t){"use strict";t.r(s);var n=t(1),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),t("p",[e._v("Vaultwarden WiKi 已删除此页面。")])]),e._v(" "),t("p",[e._v("这部分的内容允许您使用 systemd 来管理 Docker 容器的生命周期，若你喜欢的话。")]),e._v(" "),t("p",[e._v("首先，使用系统包管理器安装 "),t("code",[e._v("systemd-docker")]),e._v(" 包。这是一个用于改进 docker 与 systemd 集成的封装器。")]),e._v(" "),t("p",[e._v("有关完整介绍和配置选项，请参阅 "),t("a",{attrs:{href:"https://github.com/ibuildthecloud/systemd-docker",target:"_blank",rel:"noopener noreferrer"}},[e._v("Github 仓库"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("以 root 身份，使用你喜欢的编辑器用以下内容创建 "),t("code",[e._v("/etc/systemd/system/vaultwarden.service")]),e._v(" 文件：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[Unit]\nDescription=Vaultwarden\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker pull vaultwarden/server:latest\nExecStartPre=-/usr/bin/docker stop vaultwarden\nExecStartPre=-/usr/bin/docker rm vaultwarden\nExecStart=/usr/bin/docker run \\  \n    -p 8080:80 \\  \n    -p 8081:3012 \\  \n    --env-file /opt/.vaultwarden.env \\  \n    -v /opt/vw-data:/data/ \\  \n    --rm --name vaultwardenvaultwarden/server:latest\nExecStopPost=-/usr/bin/docker rm vaultwarden\nRestart=Always\nRestartSec=30s\nType=notify\nNotifyAccess=all\n\n[Install]\nWantedBy=multi-user.target\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("p",[e._v("根据需要调整上述示例。特别要注意 "),t("code",[e._v("-p")]),e._v(" 和 "),t("code",[e._v("-v")]),e._v(" 选项，因为它们控制着容器和主机之间的端口和卷绑定。另外，请确保为您的配置提供一个 --env-file，或者直接通过 -e KEY=VALUE 输入您的所有配置。")]),e._v(" "),t("p",[e._v("对上述选项的解释：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("TimeoutStartSec")]),e._v(" 的值 0：等待默认启动时间后，认为服务已经失败，将停止 systemd。此为必选项，因为 ExecStartPre 中的 docker pull 命令需要一段时间来完成。")]),e._v(" "),t("li",[t("code",[e._v("ExecStartPre")]),e._v("：在运行之前拉取 docker 标签。")]),e._v(" "),t("li",[t("code",[e._v("ExecStopPost")]),e._v("：删除容器（以确保我们下次可以重新启动）。我们这样做的原因是 systemd 监控的是 docker 服务而不是单个容器。因此，我们使用 "),t("code",[e._v("unless-stopped")]),e._v(" 告诉 docker 服务重启容器。这基本上就像 "),t("code",[e._v("--restart=Always")]),e._v("，但不包括 docker 服务停止的时候（或者容器被挂起）。当 docker 服务停止时，这允许我们使用 "),t("code",[e._v("Restart=Always")]),e._v(" 让 systemd 仅重启服务。")]),e._v(" "),t("li",[t("code",[e._v("Type")]),e._v(" 的值 "),t("code",[e._v("notify")]),e._v("：告诉 systemd 从已准备就绪的服务中获取通知。")]),e._v(" "),t("li",[t("code",[e._v("NotifyAccess")]),e._v(" 的值 all：是由 "),t("code",[e._v("systemd-docker")]),e._v(" 请求的。")])]),e._v(" "),t("h2",{attrs:{id:"设置环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置环境变量"}},[e._v("#")]),e._v(" 设置环境变量")]),e._v(" "),t("p",[e._v("可以通过两种方式在单元文件中直接指定环境变量：")]),e._v(" "),t("ul",[t("li",[e._v("在 "),t("code",[e._v("[Service]")]),e._v(" 块中使用 "),t("code",[e._v("Environment")]),e._v(" 指令。")]),e._v(" "),t("li",[e._v("使用 "),t("code",[e._v("docker")]),e._v(" 的 "),t("code",[e._v("-e")]),e._v(" 选项。此时，您可以省略上面示例中显示的 "),t("code",[e._v("--env")]),e._v(" 选项。")])]),e._v(" "),t("p",[e._v("要验证是否正确设置了环境变量，请检查 "),t("code",[e._v("systemctl show vaultwarden.service")]),e._v(" 的输出中是否存在 "),t("code",[e._v("Environment")]),e._v(" 行。")]),e._v(" "),t("p",[e._v("也可以在单元文件中使用 "),t("code",[e._v("EnvironmentFile")]),e._v(" 指令将环境变量存储在单独的文件中。在这种情况下，请如上面示例中所示在 docker 命令行中设置 "),t("code",[e._v("--env")]),e._v(" 选项，否则将不会处理环境文件。")]),e._v(" "),t("p",[e._v("Systemd 可以获取以下格式的文件：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Key="Value"\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("您可以在"),t("a",{attrs:{href:"https://github.com/dani-garcia/bitwarden_rs/blob/21325b7523a68ab3ae8d435ab5b73176db6155ff/.env.template",target:"_blank",rel:"noopener noreferrer"}},[e._v("此环境示例模版"),t("OutboundLink")],1),e._v("中找到更多关于环境设置和语法的说明。")]),e._v(" "),t("p",[e._v("但是，systemd 项目并没有规定该文件的存储位置。有关此文件的最佳存储位置，请查阅发行版文档。例如，基于 RedHat 的发行版通常将这些文件放在"),t("code",[e._v("/etc/sysconfig/")]),e._v(" 中。\n如果你不确定，只需使用 root 权限在 "),t("code",[e._v("/etc/")]),e._v(" 中创建一个文件即可，比如 "),t("code",[e._v("/etc/vaultwarden.service.conf")]),e._v("。\n在您的单元文件中的 "),t("code",[e._v("[Service]")]),e._v(" 块中添加一个 EnvironmentFile 指令，其值是上面创建的文件的完整路径。例如：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[Unit]\nDescription=Vaultwarden\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nEnvironmentFile=/etc/vaultwarden.service.conf\nTimeoutStartSec=0\n-snip-\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("h2",{attrs:{id:"运行服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行服务"}},[e._v("#")]),e._v(" 运行服务")]),e._v(" "),t("p",[e._v("完成上述安装和配置后，使用 "),t("code",[e._v("sudo systemctl daemon-reload")]),e._v(" 命令重新加载systemd 。然后，使用 "),t("code",[e._v("sudo systemctl start vaultwarden")]),e._v(" 命令启动 "),t("code",[e._v("Vaultwarden")]),e._v(" 服务。")]),e._v(" "),t("p",[e._v("要使服务跟随系统启动，使用 "),t("code",[e._v("sudo systemctl enable vaultwarden")]),e._v("。")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("systemctl status vaultwarden")]),e._v(" 来验证容器是否已经启动。")]),e._v(" "),t("p",[e._v("如果在启动服务时遇到 "),t("code",[e._v("json: cannot unmarshal object into Go value of type string")]),e._v(" 错误，则应使用最新版本的 Go 来自己编译 "),t("code",[e._v("systemd-docker")]),e._v(" 二进制，请参阅此"),t("a",{attrs:{href:"https://github.com/ibuildthecloud/systemd-docker/issues/50",target:"_blank",rel:"noopener noreferrer"}},[e._v("话题"),t("OutboundLink")],1),e._v("。")])])}),[],!1,null,null,null);s.default=a.exports}}]);