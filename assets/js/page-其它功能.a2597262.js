(window.webpackJsonp=window.webpackJsonp||[]).push([[250],{640:function(s,a,t){"use strict";t.r(a);var e=t(1),v=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"其它功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其它功能"}},[s._v("#")]),s._v(" 其它功能")]),s._v(" "),t("h2",{attrs:{id:"事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[s._v("#")]),s._v(" 事务")]),s._v(" "),t("ul",[t("li",[s._v("Redis 的事务不能保证原子性。")]),s._v(" "),t("li",[s._v("客户端可以将连续执行的多个命令声明为一个事务，如下："),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("multi        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 声明一个事务的开始")]),s._v("\nset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\nget"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开始执行该事务")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("ul",[t("li",[s._v("在执行 exec 之前，可以用 discard 取消执行剩下的命令（但已执行的命令并不能回滚）。")])])])]),s._v(" "),t("h2",{attrs:{id:"缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[s._v("#")]),s._v(" 缓存")]),s._v(" "),t("p",[s._v("当 MySQL 等数据库的读操作远多于写操作时，可以用 Redis 作为读缓存。")]),s._v(" "),t("ul",[t("li",[s._v("当用户查询某个 Key 时，先到 Redis 缓存中查询，如果查询不到再到数据库查询。这样可以降低数据库的压力。")]),s._v(" "),t("li",[s._v("如果在数据库查询到了该 key 的值，则放入缓存，并设置几分钟的过期时间。")])]),s._v(" "),t("h3",{attrs:{id:"部署方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署方式"}},[s._v("#")]),s._v(" 部署方式")]),s._v(" "),t("ul",[t("li",[s._v("本地缓存\n"),t("ul",[t("li",[s._v("响应速度很快（因为直接在内存中读写），但是容量有限。")])])]),s._v(" "),t("li",[s._v("分布式缓存\n"),t("ul",[t("li",[s._v("响应速度较慢（因为要经过网络通信），但是容易横向扩容。")])])]),s._v(" "),t("li",[s._v("多级缓存\n"),t("ul",[t("li",[s._v("：将访问频率高的数据存储在本地缓存中，其它 key 存储在分布式缓存中。")])])])]),s._v(" "),t("h3",{attrs:{id:"缓存穿透"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存穿透"}},[s._v("#")]),s._v(" 缓存穿透")]),s._v(" "),t("ul",[t("li",[s._v("：有恶意请求不断地查询一些不存在的 key ，绕过缓存，直接冲向数据库。")]),s._v(" "),t("li",[s._v("解决方案：\n"),t("ul",[t("li",[s._v("即使查询到的值为空，也将该 key 放入缓存。")]),s._v(" "),t("li",[s._v("在查询缓存之前，先过滤掉明显不正常的查询请求。")])])])]),s._v(" "),t("h3",{attrs:{id:"缓存击穿"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存击穿"}},[s._v("#")]),s._v(" 缓存击穿")]),s._v(" "),t("ul",[t("li",[s._v("：大量请求一直频繁地查询某个 key（称为热 key），而该 key 在某一时刻缓存过期，导致这些请求直接冲向数据库。")]),s._v(" "),t("li",[s._v("解决方案：\n"),t("ul",[t("li",[s._v("延长热 key 的过期时间。")])])])]),s._v(" "),t("h3",{attrs:{id:"缓存雪崩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存雪崩"}},[s._v("#")]),s._v(" 缓存雪崩")]),s._v(" "),t("ul",[t("li",[s._v("：在某一时刻，大量的普通 key 都缓存过期，导致它们的请求直接冲向数据库。")]),s._v(" "),t("li",[s._v("解决方案：\n"),t("ul",[t("li",[s._v("给不同类型的 key 设置不同的缓存时长，给同一类型的 key 设置缓存时长时加上随机数，尽量分散缓存周期。")]),s._v(" "),t("li",[s._v("将这些 key 存储在多个 Redis 上，分散查询请求。")])])])]),s._v(" "),t("h2",{attrs:{id:"分区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分区"}},[s._v("#")]),s._v(" 分区")]),s._v(" "),t("p",[s._v("：用于将 key 分散保存到多个 Redis 实例。")]),s._v(" "),t("ul",[t("li",[s._v("分区的方式\n"),t("ul",[t("li",[s._v("按 value 值的范围分区。")]),s._v(" "),t("li",[s._v("按 key 的 hash 值的范围分区。")])])]),s._v(" "),t("li",[s._v("优点\n"),t("ul",[t("li",[s._v("合并多个 Redis 实例，扩展容量。")])])]),s._v(" "),t("li",[s._v("缺点\n"),t("ul",[t("li",[s._v("如果多个 key 存储在不同 Redis 实例，则不能在一个事务中处理，不能进行 set 交集、差集等运算。")])])])]),s._v(" "),t("h2",{attrs:{id:"发布-订阅"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#发布-订阅"}},[s._v("#")]),s._v(" 发布/订阅")]),s._v(" "),t("p",[s._v("Redis 提供了 发布/订阅 功能，可用作功能简单的消息队列。")])])}),[],!1,null,null,null);a.default=v.exports}}]);