(window.webpackJsonp=window.webpackJsonp||[]).push([[251],{756:function(s,a,e){"use strict";e.r(a);var t=e(1),n=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存"}},[s._v("#")]),s._v(" 内存")]),s._v(" "),e("p",[s._v("：Memory ，又称为内部存储器、主存储器、物理内存。")]),s._v(" "),e("ul",[e("li",[s._v("内存能被 CPU 直接读写，用于暂时保存 CPU 处理的数据。")]),s._v(" "),e("li",[s._v("内存一般比外存的读写速度快很多，延迟低。但是受成本制约，存储容量小。")])]),s._v(" "),e("h2",{attrs:{id:"存储技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储技术"}},[s._v("#")]),s._v(" 存储技术")]),s._v(" "),e("h3",{attrs:{id:"rom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rom"}},[s._v("#")]),s._v(" ROM")]),s._v(" "),e("p",[s._v("常见技术：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("只读存储器（Read Only Memory，ROM）")]),s._v(" "),e("ul",[e("li",[s._v("只能读取数据，不能写入数据。")]),s._v(" "),e("li",[s._v("断电后数据不会丢失，因此能持久保存数据。")])])]),s._v(" "),e("li",[e("p",[s._v("可编程 ROM（Programmable ROM，PROM）")]),s._v(" "),e("ul",[e("li",[s._v("出厂时，存储的每个 bit 都为 1 ，用户可以擦除为 0 ，从而写入数据，但只能擦除一次。")])])]),s._v(" "),e("li",[e("p",[s._v("可擦除可编程 ROM（Erasable Programmable ROM，EPROM）")]),s._v(" "),e("ul",[e("li",[s._v("通过照射紫外线来擦除，可以多次擦除。")])])]),s._v(" "),e("li",[e("p",[s._v("电可擦除可编程 ROM（EEPROM）")]),s._v(" "),e("ul",[e("li",[s._v("可以用电信号多次擦除，但是以 Byte 为单位擦除，效率低。")])])]),s._v(" "),e("li",[e("p",[s._v("闪存（FLash Memory）")]),s._v(" "),e("ul",[e("li",[s._v("属于改进型的 EEPROM ，基于浮栅晶体管存储电荷。")]),s._v(" "),e("li",[s._v("主要分类：\n"),e("ul",[e("li",[s._v("NOR\n"),e("ul",[e("li",[s._v("：基于与或门（NOT-OR）。")]),s._v(" "),e("li",[s._v("容量小，一般为几十 MB 。擦写速度慢，支持随机访问。")]),s._v(" "),e("li",[s._v("常用于 BIOS 等存储数据少的嵌入式设备。")])])]),s._v(" "),e("li",[s._v("NAND\n"),e("ul",[e("li",[s._v("：基于与非门（NOT-AND）。")]),s._v(" "),e("li",[s._v("容量大。擦写速度快，以 Block 为单位访问。")]),s._v(" "),e("li",[s._v("常用于 U 盘、SD 卡、SSD 硬盘。")])])])])]),s._v(" "),e("li",[s._v("传统的嵌入式设备（比如 BIOS ）一般采用 EPROM 存储数据，目前改用 Flash 。")])])])]),s._v(" "),e("h3",{attrs:{id:"ram"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ram"}},[s._v("#")]),s._v(" RAM")]),s._v(" "),e("p",[s._v("：随机存储器（Random Access Memory），泛指可以在任意位置读、写数据的存储器。")]),s._v(" "),e("p",[s._v("常见技术：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("动态 RAM（DRAM）")]),s._v(" "),e("ul",[e("li",[s._v("：基于电容存储电荷，用电容的充、放电之后的电压高低表示二进制的 1、0 。不过电容的电荷会缓慢耗散，需要定期刷新电容。")]),s._v(" "),e("li",[s._v("结构简单，容易做到高密度、大存储容量。")]),s._v(" "),e("li",[s._v("一个内存条包含几个内存芯片以及外围电路，每个内存芯片中都集成了大量的内存颗粒。")]),s._v(" "),e("li",[s._v("常用于制作计算机的内存，已演变出多代技术：\n"),e("ul",[e("li",[s._v("SDRAM ：同步 DRAM ，时钟频率与 CPU 一致。")]),s._v(" "),e("li",[s._v("DDR SDRAM ：提高时钟频率、读写速度。")]),s._v(" "),e("li",[s._v("DDR2 SDRAM ：读写速度大约为 5 GB/s 。")]),s._v(" "),e("li",[s._v("DDR3 SDRAM ：读写速度大约为 10 GB/s 。")]),s._v(" "),e("li",[s._v("DDR4 SDRAM ：读写速度大约为 30 GB/s 。")])])])])]),s._v(" "),e("li",[e("p",[s._v("静态 RAM（SRAM）")]),s._v(" "),e("ul",[e("li",[s._v("：用两个 CMOS 晶体管组成非门，在保持供电的情况下会保持电信号。")]),s._v(" "),e("li",[s._v("SRAM 比 DRAM 的成本更高，但读写速度快很多。")]),s._v(" "),e("li",[s._v("常用于制作 CPU Cache 。")])])]),s._v(" "),e("li",[e("p",[s._v("非易失性 RAM（Non-Volatile ，NVRAM）")]),s._v(" "),e("ul",[e("li",[s._v("：基于浮栅晶体管存储电荷，即使断电也可以持久保持电信号。")]),s._v(" "),e("li",[s._v("非易失性是指断电后数据不会丢失，而 DRAM、SRAM 都是易失性，需要保持供电。")])])]),s._v(" "),e("li",[e("p",[s._v("ECC（Error Checking and Correcting）")]),s._v(" "),e("ul",[e("li",[s._v("：一种数据纠错技术。是在内存条中增加一颗 ECC 芯片，用于检查数据并纠正错误的二进制位，从而降低出错率，比如抵抗电磁干扰。")]),s._v(" "),e("li",[s._v("ECC 内存比普通内存贵了 1 倍多，常用于服务器，而家用电脑一般不兼容。")])])])]),s._v(" "),e("h2",{attrs:{id:"内存管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存管理"}},[s._v("#")]),s._v(" 内存管理")]),s._v(" "),e("h3",{attrs:{id:"page"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#page"}},[s._v("#")]),s._v(" Page")]),s._v(" "),e("ul",[e("li",[s._v("内核基于 buddy system 以 page 为单位管理内存，一个 page 默认为 4 KB 。")]),s._v(" "),e("li",[s._v("Huge Page ：指大于 4 KB 的内存页，比如 2MB、1GB 。\n"),e("ul",[e("li",[s._v("优点：\n"),e("ul",[e("li",[s._v("减少进程存储数据时使用的 Page 数，从而减少查询 Page Table 的次数和耗时。")]),s._v(" "),e("li",[s._v("支持锁定 Page ，禁止交换到 Swap 分区。")])])])])])]),s._v(" "),e("h3",{attrs:{id:"page-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#page-cache"}},[s._v("#")]),s._v(" Page Cache")]),s._v(" "),e("p",[s._v("：简称为 Cache ，是在内存中选出一组地址不连续的 page ，用于读写磁盘时的缓存、缓冲。")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("注意与 CPU Cache 区分。")])]),s._v(" "),e("li",[e("p",[s._v("功能：缓存从磁盘读取到内存的数据。")]),s._v(" "),e("ul",[e("li",[s._v("优点：\n"),e("ul",[e("li",[s._v("减少重复读取的耗时。")])])])])]),s._v(" "),e("li",[e("p",[s._v("功能：缓冲从内存写入磁盘的数据。")]),s._v(" "),e("ul",[e("li",[s._v("优点：\n"),e("ul",[e("li",[s._v("累计一定数据再写入磁盘，提高写磁盘的效率。")]),s._v(" "),e("li",[s._v("让内存与磁盘异步工作，减少等待磁盘 IO 的耗时。")])])]),s._v(" "),e("li",[s._v("缺点：\n"),e("ul",[e("li",[s._v("进程读取磁盘时，所有数据都要先被内核拷贝到 Page Cache ，再拷贝到进程内存空间。写磁盘的流程反之。\n"),e("ul",[e("li",[s._v("因此与不用 Cache 相比，耗时更久，占用内存更多（不过 Cache 会自动释放）。")])])]),s._v(" "),e("li",[s._v("写数据时，需要保证将脏页同步到磁盘。")])])])])]),s._v(" "),e("li",[e("p",[s._v("修改缓存中的数据时，需要保证缓存与磁盘的数据一致性，主要有三种策略：")]),s._v(" "),e("ul",[e("li",[s._v("不缓存（no-cache）\n"),e("ul",[e("li",[s._v("：删除缓存中的原数据，直接将数据写入磁盘。")])])]),s._v(" "),e("li",[s._v("写穿透缓存（write through cache）\n"),e("ul",[e("li",[s._v("：修改缓存中的数据，并立即同步到磁盘。")])])]),s._v(" "),e("li",[s._v("写回（write back）\n"),e("ul",[e("li",[s._v("：修改缓存中的数据，并将被修改的页面标记为脏页（dirty page）。由内核定期将脏页同步到磁盘。")]),s._v(" "),e("li",[s._v("与写透缓存相比，减少了磁盘 IO 次数，效率更高。\n"),e("ul",[e("li",[s._v("但实现难度更大。比如主机突然宕机，脏页可能来不及同步到磁盘，导致数据丢失。")])])]),s._v(" "),e("li",[s._v("Linux 的 Cache 默认采用该策略。")])])])])]),s._v(" "),e("li",[e("p",[s._v("Buffer Cache")]),s._v(" "),e("ul",[e("li",[s._v("Linux v2.4 以前，Page Cache 用于读写文件时，Buffer Cache 用于读写磁盘时。")]),s._v(" "),e("li",[s._v("Linux v2.4 开始，Buffer Cache 与 Page Cache 合并，成为后者的一部分。")])])]),s._v(" "),e("li",[e("p",[s._v("系统运行一段时间之后，Cache 会越来越大，而 free 内存越来越少。")]),s._v(" "),e("ul",[e("li",[s._v("此时提高了 RAM 内存的利用率，并不需要主动清理 Cache 。")]),s._v(" "),e("li",[s._v("可以执行以下命令，主动让内核清理一次缓存，不过之后内核依然会重新建立缓存："),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/vm/drop_caches   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清除 Page Cache")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/vm/drop_caches   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清除 Reclaimable slab ，包括 dentries、inodes")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/vm/drop_caches   "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清除 Page Cache、Reclaimable slab")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])])])])])]),s._v(" "),e("h3",{attrs:{id:"mmu"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mmu"}},[s._v("#")]),s._v(" MMU")]),s._v(" "),e("p",[s._v("：Linux 内核中的内存管理单元（Memory Management Unit）。")]),s._v(" "),e("ul",[e("li",[s._v("当物理内存的 page 数不足时，MMU 可能采取三种措施：\n"),e("ul",[e("li",[s._v("回收最近不用的 page 。")]),s._v(" "),e("li",[s._v("将不常用的内存数据从 page 移到 swap 分区。")]),s._v(" "),e("li",[s._v("通过 OOM 杀死某些占用大量内存的进程。")])])]),s._v(" "),e("li",[s._v("MMU 为每个进程都维护了一张页表（Page Table），将进程的虚拟内存空间中要使用的内容，映射到物理内存的一些 page 中。\n"),e("ul",[e("li",[s._v("当进程申请分配一块内存之后，内核并不会立即分配相应的物理内存，而是分配一块虚拟内存 pages 。等进程首次写入该内存时，CPU 会发现该内存不存在而报出缺页异常，MMU 才实际分配物理内存。")]),s._v(" "),e("li",[s._v("多个进程可以同时映射物理内存中的同一个 page ，即共享内存，采用写时复制（Copy On Write，COW）策略：\n"),e("ul",[e("li",[s._v("如果进程只是读取，则直接访问该 page 。")]),s._v(" "),e("li",[s._v("如果进程需要写入，则将该 page 拷贝一份，供该进程单独访问。")])])])])]),s._v(" "),e("li",[s._v("当进程想读写某个内存 page 时，CPU 会先获取其虚拟内存地址，然后到 Page Table 中找到对应的物理内存地址，从而访问该 page 。\n"),e("ul",[e("li",[s._v("如果 CPU 没有访问到该 page ，就会抛出缺页异常（page fault），并调用缺页异常处理程序。分为几种情况：\n"),e("ul",[e("li",[s._v("主缺页异常（major）：page 不在物理内存中，需要从磁盘载入。\n"),e("ul",[e("li",[s._v("需要等待读取磁盘，耗时较久。")])])]),s._v(" "),e("li",[s._v("次缺页异常（minor）：page 在物理内存中，但是没有分配给当前进程。\n"),e("ul",[e("li",[s._v("例如当前进程需要读取一个共享库，发现其它进程已经将该库载入内存。")])])]),s._v(" "),e("li",[s._v("segment fault ：进程要访问的虚拟内存地址超出了它的虚拟内存空间，属于越界访问。")])])])])])]),s._v(" "),e("h3",{attrs:{id:"虚拟内存空间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚拟内存空间"}},[s._v("#")]),s._v(" 虚拟内存空间")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("Linux 中，每个进程都运行在一个独立的虚拟内存空间中，就像系统中只有它一个进程。")]),s._v(" "),e("ul",[e("li",[s._v("注意它属于一个逻辑概念，并没有实际占用物理内存。与 Windows 的虚拟内存不同，后者类似于 Linux 的 Swap 分区。")])])]),s._v(" "),e("li",[e("p",[s._v("例如：在一个 32 位、4G 内存的系统中，每个进程独享一个 4G 的虚拟内存空间。")]),s._v(" "),e("ul",[e("li",[s._v("高地址的 1G 空间为内核内存空间，只能被内核态进程访问。")]),s._v(" "),e("li",[s._v("低地址的 3G 空间为用户内存空间，可以被用户态进程访问。\n"),e("ul",[e("li",[s._v("用户空间又分为五个部分：文件映射区、数据区（存储全局变量等）、只读区（存储代码、常量等）、堆区、栈区。")]),s._v(" "),e("li",[s._v("不同进程之间访问不到对方的用户内存空间，只能通过内核内存空间进行通信。")])])])])])]),s._v(" "),e("h3",{attrs:{id:"oom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#oom"}},[s._v("#")]),s._v(" OOM")]),s._v(" "),e("p",[s._v("：Out of Memory ，Linux 内核提供的一种服务，用于在系统内存不足时自动杀死某些进程，通过发送 SIGKILL 信号。")]),s._v(" "),e("ul",[e("li",[s._v("OOM 会给每个进程评一个 oom_score 分数，取值范围为 0~1000 ，表示杀死该进程的可能性。\n"),e("ul",[e("li",[s._v("oom_score 的取值等于以下两项之和：\n"),e("ul",[e("li",[s._v("系统评分：主要与进程占用的内存量呈正比。")]),s._v(" "),e("li",[s._v("用户评分：称为 oom_score_adj ，取值范围为 -1000~1000 ，默认为 0 。\n"),e("ul",[e("li",[s._v("用户可以将某些进程的 oom_score_adj 设置为负数，从而降低其 oom_score ，但最低为 0 。")])])])])])])]),s._v(" "),e("li",[s._v("例：调整 oom_score"),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo 10 > /proc/self/oom_score_adj")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /proc/self/oom_score   /proc/self/oom_score_adj")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# echo -10 > /proc/self/oom_score_adj")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /proc/self/oom_score   /proc/self/oom_score_adj")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n-10\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])])]),s._v(" "),e("li",[s._v("例：查看 OOM 日志"),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# grep -i 'out of memory' /var/log/messages")]),s._v("\nJan "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v(":48:48 CentOS kernel: Out of memory: Kill process "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("8120")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("java"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" score "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("313")]),s._v(" or sacrifice child\nJan "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),s._v(":10:21 CentOS kernel: Out of memory: Kill process "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20607")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("java"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" score "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("372")]),s._v(" or sacrifice child\nJan "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("24")]),s._v(" 05:11:08 CentOS kernel: Memory cgroup out of memory: Kill process "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("15230")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("run.py"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" score "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("251")]),s._v(" or sacrifice child\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("Memory cgroup 是 Docker 容器的 OOM 日志。")])])])]),s._v(" "),e("h3",{attrs:{id:"内存碎片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存碎片"}},[s._v("#")]),s._v(" 内存碎片")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("内存碎片（memory fragmentation）：指一些无法被使用的空闲内存。分为两类：")]),s._v(" "),e("ul",[e("li",[s._v("内部碎片\n"),e("ul",[e("li",[s._v("：已分配给进程的内存碎片。")]),s._v(" "),e("li",[s._v("buddy system 以 page 为单位管理内存，如果进程申请的内存空间不是 page 的整数倍，则分配的最后一个 page 不会被完全使用。")]),s._v(" "),e("li",[s._v("如果进程需要申请大量小于 page 的内存，比如 bool、int ，可以事先申请一大块内存作为内存池，避免产生内部碎片。")]),s._v(" "),e("li",[s._v("如果进程不停产生内部碎片，则会占用越来越多 RSS 内存，看起来像内存泄漏。")])])]),s._v(" "),e("li",[s._v("外部碎片\n"),e("ul",[e("li",[s._v("：没有分配给进程的内存碎片。")]),s._v(" "),e("li",[s._v("buddy system 以链表结构管理内存，要求每块内存空间的地址连续。多次分配、释放内存之后，空闲内存可能比较离散，找不到一块足够大、地址连续的空闲内存分配给进程。")]),s._v(" "),e("li",[s._v("进程内存被页表管理，可以将物理内存的分散地址映射到虚拟内存空间的连续地址，因此不用担心外部碎片，除非申请分配 Huge Page 。")]),s._v(" "),e("li",[s._v("当外部碎片导致不能分配内存时，内核会自动压缩内存，将空闲内存移动到连续的地址空间。用户也可以手动触发："),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/vm/drop_caches     "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除缓存，有助于减少碎片")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/vm/compact_memory  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内存压缩，需要几秒耗时")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])])])])])]),s._v(" "),e("li",[e("p",[s._v("例：查看本机空闲的内存块数量")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cat /proc/buddyinfo")]),s._v("\nNode "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", zone      DMA      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\nNode "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", zone    DMA32    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("372")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("808")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("446")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("358")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("113")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("170")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("54")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\nNode "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(", zone   Normal    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("286")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("324")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("348")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("137")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("94")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("79")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("Node 0 表示 MUMA 架构的节点编号，每个节点中划分多种内存区域 zone ：\n"),e("ul",[e("li",[s._v("DMA ：直接内存访问（Direct Memory Access）。")]),s._v(" "),e("li",[s._v("DMA32 ：用于在 64bits 系统中，按 32bits 模式访问内存。")]),s._v(" "),e("li",[s._v("Normal ：普通内存。")])])]),s._v(" "),e("li",[s._v("右侧有 11 列数字，从 0 开始编号，第 n 列数字表示体积为 2^n 个 page 的空闲内存块的数量。如果最右端的 0 较多，则说明大内存块不足。")])])]),s._v(" "),e("li",[e("p",[s._v("为了减少内部碎片，Linux 采用了 Slab 分配器：为一些经常分配的、占内存小的对象专门划分内存空间，管理单位为 Bytes 。")]),s._v(" "),e("ul",[e("li",[s._v("例如：进程描述符需要经常创建，因此事先为该类对象划分一组内存空间，称为一个 Slab ，存储时占用一个或多个 Page 。")]),s._v(" "),e("li",[s._v("每种对象需要定义一个结构体 "),e("code",[s._v("struct kmem_cache")]),s._v(" ，用于创建 Slab 、划分内存空间。")]),s._v(" "),e("li",[s._v("Slab 分为两种：\n"),e("ul",[e("li",[s._v("Unreclaim ：不可回收的。")]),s._v(" "),e("li",[s._v("Reclaimable ：可回收的。")])])])])])]),s._v(" "),e("h3",{attrs:{id:"内存分配器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存分配器"}},[s._v("#")]),s._v(" 内存分配器")]),s._v(" "),e("ul",[e("li",[s._v("内存分配器（memory allocator）：提供 malloc()、free() 等 API 供用户调用，并与内核交互，控制底层的内存分配。")]),s._v(" "),e("li",[s._v("常见的几种内存分配器：\n"),e("ul",[e("li",[s._v("ptmalloc ：由 Glibc 库提供，默认采用。只有一个内存分配区，多线程时需要频繁加锁，占用较多 CPU 。")]),s._v(" "),e("li",[s._v("jemalloc ：由 FreeBSD libc 库提供。根据 CPU 核数划分多个内存分配区，大幅减少多线程时的加锁。")]),s._v(" "),e("li",[s._v("tcmalloc ：由 Google 开发。")])])]),s._v(" "),e("li",[s._v("进程调用 malloc() 申请分配内存时，有两种实现方式：\n"),e("ul",[e("li",[s._v("调用 brk() ，改变数据段栈顶指针的位置，从而增加数据段的长度。\n"),e("ul",[e("li",[s._v("调用 free() 时不会立即释放内存，而是继续被当前进程占用，方便以后分配，因此下次申请内存时不会引发缺页异常。\n"),e("ul",[e("li",[s._v("用 brk() 申请内存一段时间之后，该内存通常不再位于栈顶，不能通过移动栈顶指针来释放。")])])]),s._v(" "),e("li",[s._v("适合分配小块内存，但可能产生进程内部的内存碎片。")])])]),s._v(" "),e("li",[s._v("调用 mmap() ，映射一块内存区域。\n"),e("ul",[e("li",[s._v("调用 free() 时会立即释放内存，因此每次申请内存都会引发缺页异常。")]),s._v(" "),e("li",[s._v("适合分配大块内存。")]),s._v(" "),e("li",[s._v("默认当 malloc() 申请的内存小于 MMAP_THRESHOLD=128KB 时，采用 brk() 方式，否则采用 mmap() 方式。")])])])])])]),s._v(" "),e("h2",{attrs:{id:"内存开销"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存开销"}},[s._v("#")]),s._v(" 内存开销")]),s._v(" "),e("ul",[e("li",[s._v("计算机的物理内存，一般少部分被内核占用，大部分被进程占用。")])]),s._v(" "),e("h3",{attrs:{id:"内核内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内核内存"}},[s._v("#")]),s._v(" 内核内存")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("内核占用的内存举例：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("Kernel Modules    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内核模块，可用 lsmod 命令查看")]),s._v("\nKernel Stack      "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 内核会给每个线程分配一个栈区，程序陷入内核态之后才可以访问，默认为 16KB")]),s._v("\nPage Tables       "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# MMU 为每个进程都维护了一张页表")]),s._v("\n\nBuffers\nCache\nSlab\nSockets           "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每个 Socket 大约占用 3 KB 内存，对应的 IO 缓冲区最多占用 200 KB")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("通过 "),e("code",[s._v("/proc/meminfo")]),s._v(" 文件可以获取内存的使用情况。")]),s._v(" "),e("ul",[e("li",[s._v("但它不会统计以下内存：\n"),e("ul",[e("li",[s._v("Socket 内存")]),s._v(" "),e("li",[s._v("通过 alloc_pages() 分配的内存")])])])])])]),s._v(" "),e("h3",{attrs:{id:"进程内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进程内存"}},[s._v("#")]),s._v(" 进程内存")]),s._v(" "),e("ul",[e("li",[s._v("进程申请的所有内存称为虚拟内存（Virtual Memory，VIRT），其中实际使用的部分称为常驻内存。")]),s._v(" "),e("li",[s._v("常驻集（Resident Set Size，RSS）\n"),e("ul",[e("li",[s._v("：进程的 Page Table 中，引发过 page fault 的物理内存。")]),s._v(" "),e("li",[s._v("例如：进程申请了 100M 内存，实际只使用了 10M ，则虚拟内存为 100M ，而 RSS 为 10M 。")]),s._v(" "),e("li",[s._v("RSS = SHR + 进程独自占用的非共享内存。")]),s._v(" "),e("li",[s._v("RSS 包括堆、栈、共享内存，不包括 Swap ，也不包括 page tables、huge page、kernel stack、struct thread_info、struct task_struct 等。")]),s._v(" "),e("li",[s._v("用如下命令可以统计所有进程的 RSS 内存之和，但这样会重复累计 SHR 内存，因此比所有进程实际占用的内存量偏大。应该统计 PSS 内存之和。"),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -eo rss "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'NR>1'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{sum+=$1} END {print sum/1024}'")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])])]),s._v(" "),e("li",[s._v("工作集（Working Set）\n"),e("ul",[e("li",[s._v("：进程最近访问的内存，包括物理内存、内核内存、脏页。")]),s._v(" "),e("li",[s._v("进程的 RSS 与 Woking Set 可能差不多，也可能相差很大。")])])]),s._v(" "),e("li",[s._v("SHR\n"),e("ul",[e("li",[s._v("：Shared Memory ，进程使用的共享内存。")]),s._v(" "),e("li",[s._v("比如多个进程可能导入同一个共享库 glibc 。")])])]),s._v(" "),e("li",[s._v("PSS\n"),e("ul",[e("li",[s._v("：Proportional Set Size ，进程的比例集大小。")]),s._v(" "),e("li",[s._v("PSS = 进程平均占用的 SHR + 进程独自占用的非共享内存")]),s._v(" "),e("li",[s._v("例如：进程 A 独自占用的非共享内存为 8M ，与其它 N 个进程共享 2M 的共享内存，则进程 A 的 PSS = 9 + 2/(N+1) MB 。")])])])]),s._v(" "),e("h2",{attrs:{id:"相关命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#相关命令"}},[s._v("#")]),s._v(" 相关命令")]),s._v(" "),e("h3",{attrs:{id:"free"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#free"}},[s._v("#")]),s._v(" free")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示主机内存的使用情况")]),s._v("\n      -k          "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 采用 KB 作为显示单位（默认）")]),s._v("\n      -m          "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 采用 MB 作为显示单位")]),s._v("\n      -h          "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --human ，自动调整显示单位")]),s._v("\n      -w          "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拉宽显示，将 buffers 与 cache 列分别显示")]),s._v("\n      -s "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" -c "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔一秒显示一次，最多显示 10 次")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[s._v("例："),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# free -wh")]),s._v("\n              total        used        "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("free")]),s._v("      shared  buff/cache   available\nMem:           "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(".6G        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(".9G        187M        496K        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".6G        673M\nSwap:          "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(".0G        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(".8G        "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(".2G\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("total ：物理内存的总可用量。\n"),e("ul",[e("li",[s._v("内核 Boot 阶段占用的内存，比如内核代码，称为 Reserved ，不计入 MemTotal 。因此 MemTotal 比内存设备的实际容量偏低。")])])]),s._v(" "),e("li",[s._v("used ：已被占用的物理内存。\n"),e("ul",[e("li",[s._v("free 命令会先从 "),e("code",[s._v("/proc/meminfo")]),s._v(" 读取 MemTotal、MemFree、Buffers、Cached、Slab 信息，然后按 "),e("code",[s._v("used = total - free - buffer - cache")]),s._v(" 计算出已用内存。")])])]),s._v(" "),e("li",[s._v("free ：空闲内存。表示既没有被进程使用，也没有被划分成缓存的内存。\n"),e("ul",[e("li",[s._v("free 内存较少并不代表物理内存紧张，因为系统在必要时可以回收大量缓存。")]),s._v(" "),e("li",[s._v("当 available 内存较少、甚至 Swap 分区被使用时，才说明物理内存紧张。")])])]),s._v(" "),e("li",[s._v("shared ：共享内存，属于 used 内存。")]),s._v(" "),e("li",[s._v("buffers ：指 Buffer Cache 。")]),s._v(" "),e("li",[s._v("cache ：指 Page Cache + Slab 。")]),s._v(" "),e("li",[s._v("available ：可用内存，包括 free 内存和可以被回收的 buff/cache 。\n"),e("ul",[e("li",[s._v("该值是估算的，并不准确。")])])])])])]),s._v(" "),e("h3",{attrs:{id:"sync"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sync"}},[s._v("#")]),s._v(" sync")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sync")]),s._v("            "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将脏页立即同步到磁盘")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("h3",{attrs:{id:"pmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pmap"}},[s._v("#")]),s._v(" pmap")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[s._v("$ pmap  "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("pid"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示一个进程的虚拟内存空间的内存映射表")]),s._v("\n        -x        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加显示 RSS、Dirty Page 列")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("例："),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pmap 1 -x")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(":   /usr/lib/systemd/systemd --switched-root --system --deserialize "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("\nAddress           Kbytes     RSS   Dirty    Mode    Mapping\n0000557a0dbf2000    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1424")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1208")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    r-x--   systemd\n0000557a0df56000     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("140")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("132")]),s._v("     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("132")]),s._v("    r----   systemd\n0000557a0df79000       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("    rw---   systemd\n0000557a0f80b000    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1224")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1124")]),s._v("    "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1124")]),s._v("    rw---     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" anon "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n00007f1878000000     "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("164")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("      "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),s._v("    rw---     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" anon "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n00007f1878029000   "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("65372")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("       "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    -----     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(" anon "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),s._v("表中每行描述一块内存空间，大小不一。\n"),e("ul",[e("li",[s._v("Address ：表示该内存空间的首地址。")]),s._v(" "),e("li",[s._v("Mapping ：表示该内存空间的用途。\n"),e("ul",[e("li",[s._v("取值为 "),e("code",[s._v("[ anon ]")]),s._v(" 表示程序申请分配的内存。")]),s._v(" "),e("li",[s._v("取值为 "),e("code",[s._v("[ stack ]")]),s._v(" 表示堆栈。")]),s._v(" "),e("li",[s._v("其它取值表示用于存储文件。")])])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);