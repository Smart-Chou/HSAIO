(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{740:function(s,a,t){"use strict";t.r(a);var e=t(1),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内核"}},[s._v("#")]),s._v(" 内核")]),s._v(" "),t("h2",{attrs:{id:"版本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#版本"}},[s._v("#")]),s._v(" 版本")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.kernel.org/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网"),t("OutboundLink")],1)]),s._v(" "),t("li",[s._v("目前 Linus Torvalds 依然在主管开发 Linux 内核，源代码托管在 "),t("a",{attrs:{href:"https://github.com/torvalds/linux",target:"_blank",rel:"noopener noreferrer"}},[s._v("GitHUb"),t("OutboundLink")],1),s._v(" 上。")]),s._v(" "),t("li",[s._v("Linux 内核（kernel）的版本号命名规则为 "),t("code",[s._v("主版本.次版本.发布版本-修订版本")]),s._v(" ，例如 "),t("code",[s._v("3.10.0-11")]),s._v(" 。\n"),t("ul",[t("li",[s._v("2011 年发布 v3.0 版本。")]),s._v(" "),t("li",[s._v("2015 年发布 v4.0 版本。")]),s._v(" "),t("li",[s._v("2019 年发布 v5.0 版本。")])])])]),s._v(" "),t("h2",{attrs:{id:"架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#架构"}},[s._v("#")]),s._v(" 架构")]),s._v(" "),t("p",[s._v("Linux 系统架构从上到下分为三层：")]),s._v(" "),t("ul",[t("li",[s._v("User Space ：运行用户态进程。\n"),t("ul",[t("li",[s._v("用户启动的进程一般运行在用户态，只使用虚拟内存空间中的用户内存空间。")]),s._v(" "),t("li",[s._v("当用户态进程调用内核 API、遇到中断或异常时，就会下沉到内核态，有权限执行内核内存空间中的代码、访问底层硬件。")])])]),s._v(" "),t("li",[s._v("Kernel Space ：运行内核态进程。\n"),t("ul",[t("li",[s._v("System Call Interface（SCI）：向上对用户空间提供内核接口。")]),s._v(" "),t("li",[s._v("Virtual File System（VFS）：一个抽象的文件系统层，向下管理不同类型的文件系统，向上提供统一的文件系统接口。")]),s._v(" "),t("li",[s._v("File System ：实际的文件系统层，包括多种文件系统。")]),s._v(" "),t("li",[s._v("General Block Device Layer ：一个抽象的块设备层，向下管理不同类型的硬件设备，向上提供统一的 IO 接口。")]),s._v(" "),t("li",[s._v("Device Driver ：有很多种，分别管理不同设备。")])])]),s._v(" "),t("li",[s._v("Hardware Layer ：计算机底层的硬件层。")])]),s._v(" "),t("h2",{attrs:{id:"中断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中断"}},[s._v("#")]),s._v(" 中断")]),s._v(" "),t("p",[s._v("Linux 系统处理中断的过程通常分为两步：")]),s._v(" "),t("ol",[t("li",[s._v("处理硬件中断请求，立即处理其中不能延误的任务。")]),s._v(" "),t("li",[s._v("以软件中断的形式执行剩下的任务，比如创建成内核线程。")])]),s._v(" "),t("ul",[t("li",[s._v("这样既可以及时执行中断中重要的任务，又可以延迟执行耗时久的任务。")]),s._v(" "),t("li",[s._v("例如：当网卡收到数据帧时，会发出一个硬中断，让网卡驱动程序将数据帧拷贝到内核缓冲区中。然后网卡驱动程序发出一个软中断，通知某个内核进程来解析数据帧，转换成 IP、TCP 等协议包，最后交给给应用层的进程。")])]),s._v(" "),t("h2",{attrs:{id:"内核进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内核进程"}},[s._v("#")]),s._v(" 内核进程")]),s._v(" "),t("p",[s._v("常见的内核进程如下：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("kthreadd")]),s._v(" "),t("ul",[t("li",[s._v("系统开机时创建的第三个进程，PID 为 2 ，负责管理所有内核态进程。")])])]),s._v(" "),t("li",[t("p",[s._v("kworker")]),s._v(" "),t("ul",[t("li",[s._v("在 CPU 每个核上运行一个实例，用于并行执行内核 Workqueue 中的任务，比如定时器、中断、IO 。")])])]),s._v(" "),t("li",[t("p",[s._v("migration")]),s._v(" "),t("ul",[t("li",[s._v("用于在多个 CPU 核之间迁移运行中的进程，从而避免单核故障、实现负载均衡。")]),s._v(" "),t("li",[s._v("在 CPU 每个核上运行一个实例。")])])]),s._v(" "),t("li",[t("p",[s._v("watchdog")]),s._v(" "),t("ul",[t("li",[s._v("用于避免系统死机。进程启动之后会打开 /dev/watchdog 文件，不断对它进行写操作。如果在一定时间内（默认为 1 分钟）没有进行写操作，就会通过硬件或软件重启系统。")]),s._v(" "),t("li",[s._v("在 CPU 每个核上运行一个实例。")])])]),s._v(" "),t("li",[t("p",[s._v("kblockd")]),s._v(" "),t("ul",[t("li",[s._v("用于管理块设备。")]),s._v(" "),t("li",[s._v("在系统中运行一个实例。")])])])]),s._v(" "),t("h2",{attrs:{id:"内核参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内核参数"}},[s._v("#")]),s._v(" 内核参数")]),s._v(" "),t("h3",{attrs:{id:"sysctl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sysctl"}},[s._v("#")]),s._v(" sysctl")]),s._v(" "),t("p",[s._v("：一个内置命令，用于读取、配置系统运行时的内核参数。")]),s._v(" "),t("ul",[t("li",[s._v("用法："),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("sysctl\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("var"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 读取指定参数的值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("var"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("value"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置指定参数的值")]),s._v("\n        -a              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有可修改的内核参数")]),s._v("\n        -p "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("file"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 加载指定文件中的配置参数（默认是 /etc/sysctl.conf 文件）")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("执行 "),t("code",[s._v("sysctl -a")]),s._v(" 会从 "),t("code",[s._v("/proc/sys/")]),s._v(" 目录下的各个文件读取内核参数（超过一千个），然后显示给用户看。\n"),t("ul",[t("li",[s._v("例如，参数 "),t("code",[s._v("net.ipv4.tcp_keepalive_time")]),s._v(" 对应的文件是 "),t("code",[s._v("/proc/sys/net/ipv4/tcp_keepalive_time")]),s._v(" 。")])])])])]),s._v(" "),t("li",[s._v("sysctl 的配置在系统重启之后就会丢失，将配置保存到 "),t("code",[s._v("/etc/sysctl.conf")]),s._v(" 文件中才能永久生效。\n"),t("ul",[t("li",[s._v("系统每次重启时会自动加载该文件，用户也可以执行 "),t("code",[s._v("sysctl -p")]),s._v(" 主动加载。")])])])]),s._v(" "),t("h4",{attrs:{id:"配置参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置参数"}},[s._v("#")]),s._v(" 配置参数")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("参考文档：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://sysctl-explorer.net/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Sysctl Explorer"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt",target:"_blank",rel:"noopener noreferrer"}},[s._v("/proc/sys/net/ipv4/"),t("OutboundLink")],1)])])]),s._v(" "),t("li",[t("p",[s._v("配置文件采用 INI 格式。")]),s._v(" "),t("ul",[t("li",[s._v("键值对用 = 分隔，中间的空格会被忽略。")]),s._v(" "),t("li",[s._v("值通常是字符串型、整型或布尔型。\n"),t("ul",[t("li",[s._v("其中，布尔型用 1、0 分别表示 True、False 。")])])])])]),s._v(" "),t("li",[t("p",[s._v("关于进程：")]),s._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("kernel.pid_max")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("32768       # 整个系统中，同时运行进程的最大数量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("kernel.threads-max")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("126935      # 整个系统中，同时运行线程的最大数量")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("关于内存：")]),s._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm.max_map_count")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("65530       # 每个进程创建的内存映射区域（memory map areas）的最大数量，它们用于 malloc、shared librarie")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm.swappiness")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1           # 使用 swap 内存的推荐度，取值范围为 0~100 ，0 表示禁用")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm.overcommit_memory")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("0           # 是否允许内核分配出去的内存超过物理内存的总量，因为分配的内存不一定会被进程实际使用")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0 ：根据启发式算法适量允许")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1 ：始终允许，此时可能因为物理内存不足而触发 OOM")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2 ：始终不允许超过物理内存的 vm.overcommit_ratio 百分比，此时不会触发 OOM ，但可能因为内存不足而不能创建新进程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm.overcommit_ratio")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("50")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm.oom_kill_allocating_task")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("0     # 执行 OOM 的策略。取值如下：")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0 ：扫描全部进程，选出 oom_score 最大的进程然后杀死")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1 ：杀死当前申请内存而导致内存不足的进程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("vm.panic_on_oom")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("0           # 是否不执行 OOM ，而是让系统重启")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("关于文件：")]),s._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("fs.file-max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("791098                  # 整个系统中，允许同时打开文件的最大数量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每个文件的 inode、dcache 大概占用 1k 内存。默认设置的 fs.file-max 会允许文件占用可用内存的 10%")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("关于网络：")]),s._v(" "),t("div",{staticClass:"language-ini line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-ini"}},[t("code",[t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.icmp_echo_ignore_all")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1       # 忽略所有 icmp 包，这样本机就不能被 ping 到")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.ip_forward")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("0       # 禁止将某个网卡收到的 ipv4 数据包转发到其它网卡")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.ip_local_port_range")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("10000  65535   # 允许 Socket 绑定的本地端口范围")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关于建立 TCP 连接")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.core.somaxconn")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("4096    # 限制了调用 listen() 函数时，backlog 的最大值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_max_syn_backlog")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("128     # SYN 队列的最大长度，默认值与内存成正比")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_syncookies")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1       # 是否启用 SYN Cookies 功能。可取值：")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0 ：不启用")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1 ：默认值，当 SYN 队列满了时启用")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2 ：总是启用")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_abort_on_overflow")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("0       # 当 accept 队列满了时，server 怎么处理新的 ESTABLISHED 连接。可取值：")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 0 ：默认值，丢弃 client 发来的 ACK 包")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1 ：回复一个 RST 包给 client ，表示拒绝连接")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关于保持 TCP 连接")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_keepalive_time")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("180")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_keepalive_intvl")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_keepalive_probes")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("3")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果本机的一个 TCP 连接长达 tcp_keepalive_time 秒没有用于数据通信，则探测一下对方主机是否仍然在线")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 每隔 tcp_keepalive_intvl 秒探测一次，最多探测 tcp_keepalive_probes 次")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 减小该值可以尽早关闭无用的 Socket ，比如 CLOSE_WAIT 状态的 Socket")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关于断开 TCP 连接")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_tw_reuse")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1       # 允许将 TIME-WAIT 状态的 Socket 用于新的 TCP 连接")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_tw_recycle")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1       # 允许快速回收 TIME-WAIT 状态的 Socket")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_fin_timeout")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("30      # FIN-WAIT-2 状态的超时时间")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_max_orphans")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("65536   # 限制无主的 Socket 的最大数量，超过限制则自动回收")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关于 Socket 缓冲区")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.core.rmem_default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("212992                    # 单个 Socket 接收缓冲区的默认容量，默认为 208 KB")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.core.wmem_default")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("212992                    # 单个 Socket 发送缓冲区的最大容量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.core.rmem_max")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("212992                    # 最大容量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.core.wmem_max")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("212992")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_rmem")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("4096    87380   6291456   # 单个 TCP Socket 接收缓冲区的容量，分别为最小值、默认值、最大值，单位 bytes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_wmem")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("4096    16384   4194304   # 单个 TCP Socket 发送缓冲区的容量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.tcp_mem")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("572268  763025  1144536   # 系统全部 TCP Socket 缓冲区的容量的最小值、压力值、最大值，单位为内存页 page")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 低于最小值时，说明内存无压力")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 超过最小值时，开始节省给 Socket 分配的内存")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 超过最大值时，禁止给 Socket 分配新的 page")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.udp_mem")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("574224  765634  1148448")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.udp_rmem_min")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("4096")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("net.ipv4.udp_wmem_min")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("4096")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br")])])])]),s._v(" "),t("h3",{attrs:{id:"ulimit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ulimit"}},[s._v("#")]),s._v(" ulimit")]),s._v(" "),t("p",[s._v("：一个内置命令，用于设置 shell 终端占用的系统资源上限。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("命令：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("$ "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("ulimit")]),s._v("\n        -a        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示当前全部的资源限制信息")]),s._v("\n          -H      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 选择硬限制")]),s._v("\n          -S      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 选择软限制")]),s._v("\n        -u        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示 -u 参数的值")]),s._v("\n        -u "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nproc ，限制同时运行的进程数最多为 n 个（不能限制 root 用户）")]),s._v("\n        -m "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# rss   ，限制占用的常驻内存最多为 n kb（大部分 Linux 发行版不支持该限制）")]),s._v("\n        -v "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制占用的虚拟内存最多为 n kb")]),s._v("\n        -s "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# stack ，限制堆栈的大小为 n kb")]),s._v("\n        -t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# cpu   ，限制单个进程累计占用的 CPU 时长，超过限制时则发送 SIGKILL 信号终止该进程。进程的运行状态为 Sleeping 时不计入时长")]),s._v("\n        -n "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nofile ，限制同时打开的文件描述符数量最多为 n")]),s._v("\n        -f "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# fsize ，限制创建单个文件的大小最大为 n blocks")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("例：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("ulimit")]),s._v(" -a               "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示限制（默认是软限制）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("ulimit")]),s._v(" -aH              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示硬限制")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("ulimit")]),s._v(" -nH unlimited    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置硬限制")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("ulimit")]),s._v(" -nS "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置软限制")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("ulimit")]),s._v(" -n  unlimited    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 同时设置硬限制和软限制")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("ul",[t("li",[s._v("当进程占用的资源超过限制时，会被立即杀死。")]),s._v(" "),t("li",[s._v("软限制的值不能超过硬限制。")]),s._v(" "),t("li",[s._v("非 root 用户无权调大硬限制，只能调小硬限制、改变软限制。")])])]),s._v(" "),t("li",[t("p",[s._v("ulimit 的配置只能作用于当前 shell 终端。而 "),t("code",[s._v("/etc/security/limits.conf")]),s._v(" 文件中的配置会对指定用户永久生效，如下：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("*    hard    nofile       unlimited\n*    soft    nofile       "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("\n*    hard    maxlogins    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n*    soft    maxlogins    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("每行的格式如下：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("<domain> <type> <item> <value>\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("domain ：用户名或组名，也可用 * 匹配所有。")]),s._v(" "),t("li",[s._v("type ：取值为 hard 或 soft ，表示硬限制或软限制。")]),s._v(" "),t("li",[s._v("item、value ：限制项及其值。比如：\n"),t("ul",[t("li",[s._v("maxlogins ：当前用户同时登录的最大数量")]),s._v(" "),t("li",[s._v("maxsyslogins ：系统同时登录的最大数量")])])])])])])])}),[],!1,null,null,null);a.default=n.exports}}]);