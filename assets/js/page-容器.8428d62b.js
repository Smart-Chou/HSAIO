(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{613:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[s._v("#")]),s._v(" 容器")]),s._v(" "),a("h2",{attrs:{id:"启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动"}},[s._v("#")]),s._v(" 启动")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("image"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 根据一个镜像创建并启动一个容器，可选指定容器的启动命令")]),s._v("\n          -i                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --interactive ，保持打开容器的 stdin ，允许输入")]),s._v("\n          -t                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --tty ，创建一个伪终端，绑定到容器的 stdin ，供用户操作")]),s._v("\n          -d                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --detach ，以 daemon 方式运行，默认在当前终端的前台运行")]),s._v("\n          --init              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用 docker-init 进程作为容器的 1 号进程")]),s._v("\n          --rm                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当容器停止时，自动删除它")]),s._v("\n\n          -u "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("uid"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":gid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在容器内使用指定的用户（默认为 root）")]),s._v("\n          -w "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("path"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --workdir ，指定容器的工作目录，如果该目录不存在则会自动创建")]),s._v("\n          -e "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --env ，设置容器内的环境变量（可重复使用该命令选项）如果省略 value ，则读取宿主机上的同名环境变量")]),s._v("\n          -l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# --label ，给容器添加键值对格式的标签，比如 branch=dev 。如果不指定 value ，则默认赋值为 "" 。可以多次使用该选项')]),s._v("\n\n          --name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器的名称")]),s._v("\n          --hostname "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器内的主机名，默认为容器 ID")]),s._v("\n          --privileged        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 特权模式，默认不启用。允许在容器内访问所有设备文件，比如挂载磁盘，甚至可以在容器内运行嵌套的容器")]),s._v("\n          --entrypoint "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'xx'")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 覆盖 Dockerfile 中的 ENTRYPOINT")]),s._v("\n          --pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器采用的 PID namespace 。比如 --pid=host 是采用宿主机的 namespace ，--pid=container:redis 是采用指定容器的 namespace ，共享进程列表")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("ul",[a("li",[s._v("创建容器时，如果本机不存在指定名称的镜像，则会自动从镜像仓库拉取。")]),s._v(" "),a("li",[s._v("例："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run busybox                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行一个镜像")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -it busybox "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建容器，并进入该容器的终端")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d  busybox "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tail")]),s._v(" -f /dev/null  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个容器，让它执行一个不会停止的启动命令")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[s._v("运行嵌套容器的示例："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d --name dind --privileged docker:dind  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# dind 镜像代表 docker in docker ，内置了 dockerd")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it dind "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sh")]),s._v("                             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入 dind 容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d nginx                                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在 dind 容器内运行嵌套的容器")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" auxf                                             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看此时的进程树")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"启动命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#启动命令"}},[s._v("#")]),s._v(" 启动命令")]),s._v(" "),a("ul",[a("li",[s._v("用户创建一个容器时，需要指定一条启动命令，否则采用镜像默认的启动命令。\n"),a("ul",[a("li",[s._v("容器启动之后，用户可以进入容器内终端，执行任意命令，启动其它进程。")]),s._v(" "),a("li",[s._v("启动命令默认为容器内 PID 为 1 的进程，即 1 号进程。\n"),a("ul",[a("li",[s._v("一旦容器内 1 号进程退出，或者不在前台运行，则 dockerd 会自动停止容器。")]),s._v(" "),a("li",[s._v("因此，为了让容器保持运行，容器的启动命令应该一直保持运行，并且在前台运行，比如 "),a("code",[s._v("tail -f /dev/null")]),s._v(" 。")])])])])]),s._v(" "),a("li",[s._v("建议在容器内使用非 root 用户运行应用程序。\n"),a("ul",[a("li",[s._v("因为容器内的 root 用户虽然受到限制，没有宿主机的 root 用户那么多特权。但它也是作为 root 用户与内核交互，可能通过内核漏洞逃出容器，成为宿主机的 root 用户。")])])]),s._v(" "),a("li",[s._v("建议每个容器内只运行一个应用程序，使得启动、停止该容器相当于启动、停止该应用，这样方便管理。\n"),a("ul",[a("li",[s._v("例如一个容器内只运行一个 Nginx 服务器，它包含多个子进程。")])])]),s._v(" "),a("li",[s._v("如果容器内包含多个进程，建议用 tini、supervisord 等工具管理。\n"),a("ul",[a("li",[s._v("执行 docker stop 时，dockerd 只会发送 SIGTERM 信号给容器内的 1 号进程，然后等待 1 号进程清理容器内的其它进程。如果等待超时，则发送 SIGKILL 信号。\n"),a("ul",[a("li",[s._v("如果 1 号进程是 shell 解释器，则不会捕捉 SIGTERM 信号，也不会传递信号给子进程，因此 dockerd 只能等超时之后才杀死容器。")]),s._v(" "),a("li",[s._v("如果 1 号进程是用户自定义的程序，则可能不会捕捉 SIGTERM 信号、清理僵尸进程。")]),s._v(" "),a("li",[s._v("如果 1 号进程为 docker-init 进程（来自 tini 项目），则会以子进程的形式执行容器的启动命令。它会捕捉 SIGTERM 信号并转发给直接子进程，还会清理僵尸进程（不包括子孙进程）。")])])])])]),s._v(" "),a("li",[s._v("无状态容器（Stateless）\n"),a("ul",[a("li",[s._v("：指不需要保持连续运行的容器。其它容器称为有状态容器（Stateful）。")]),s._v(" "),a("li",[s._v("这种容器比较方便管理。可以随时重启，甚至随时销毁并从镜像重新创建，不会中断服务、不会丢失数据。")]),s._v(" "),a("li",[s._v("以运行 Web 服务器的容器为例：\n"),a("ul",[a("li",[s._v("如果 Web 服务器没有进行中的 HTTP 通信，则可以重启容器。")]),s._v(" "),a("li",[s._v("如果 Web 服务器把产生的数据保存在容器内，则只能重启容器，但不能销毁容器。如果保存在容器外的数据库中，则可以销毁容器。")])])])])])]),s._v(" "),a("h3",{attrs:{id:"重启策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重启策略"}},[s._v("#")]),s._v(" 重启策略")]),s._v(" "),a("ul",[a("li",[s._v("容器的重启策略（restart policy）：当容器停止时，是否通过 docker start 重启。\n"),a("ul",[a("li",[s._v("如果在 10 秒内连续重启，则重启间隔从 100ms 开始，每次增加一倍，最多增加到 1min。")])])]),s._v(" "),a("li",[s._v("设置重启策略："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run\n          --restart no              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 禁止自动重启（默认采用）")]),s._v("\n          --restart on-failure      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当容器异常停止时（不包括 dockerd 重启的情况），才会自动重启。该策略还可限制连续重启次数，比如 on-failure:3")]),s._v("\n          --restart unless-stopped  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当容器停止时，就自动重启（除非容器是被 docker stop 了）")]),s._v("\n          --restart always          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当容器停止时，总是会自动重启（即使被 docker stop 了，当 dockerd 重启时又会自动重启该容器）")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"资源限制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源限制"}},[s._v("#")]),s._v(" 资源限制")]),s._v(" "),a("ul",[a("li",[s._v("可以限制容器占用的系统资源："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run\n          -c "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1024")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --cpu-shares ，与其它容器抢占 CPU 时的权重，取值范围为 1~1024")]),s._v("\n          --cpus "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.5")]),s._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制同时占用 CPU 的核数（每秒的平均值）。默认为 0 即不限制")]),s._v("\n          --cpuset-cpus "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("-2,3       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制可用的 CPU 核的编号")]),s._v("\n          --cpu-period "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100000")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置 CPU 调度的 CFS 周期。单位为 us ，取值范围为 1ms~1s ，默认为 100ms")]),s._v("\n          --cpu-quota "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器在每个 CFS 周期内占用的 CPU 最大时长。取值范围为 >1ms ，默认为 0 即不限制")]),s._v("\n\n          -m 256m                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --memory ，限制占用的 RAM 内存大小，单位可以是 b、k、m、g 。默认不限制")]),s._v("\n          --memory-swap "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制占用的 RAM + swap 大小。默认取值为 0 ，相当于为 -m 的两倍。为 -1 时，不限制。与 -m 相等时，会禁用 swap")]),s._v("\n          --memory-swappiness       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 用 swap 内存的推荐度，取值范围为 0~100 ，0 表示禁用")]),s._v("\n          --oom-kill-disable "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 是否禁止 OOM 杀死进程")]),s._v("\n          --kernel-memory 4m        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制占用的内核态内存，比如 stack、slab、socket 。默认不限制。如果取值小于 --memory ，则属于后者的子集")]),s._v("\n          --shm-size 64m            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制挂载到 /dev/shm 的 tmpfs 文件系统的体积，默认为 64m")]),s._v("\n\n          --device-read-bps 1kb     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制每秒读磁盘的数据量，默认不限制")]),s._v("\n          --device-write-bps 1kb    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制每秒写磁盘的数据量")]),s._v("\n          --device-read-iops "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制每秒读磁盘的次数")]),s._v("\n          --device-write-iops "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 限制每秒读磁盘的次数")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看"}},[s._v("#")]),s._v(" 查看")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有 running 状态的容器")]),s._v("\n          -a                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有状态的容器")]),s._v("\n          -n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("int"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --last ，显示最后创建的几个容器（包括所有状态的）")]),s._v("\n          --no-trunc              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不截断显示过长的内容")]),s._v("\n          -q                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --quiet ，只显示 ID")]),s._v("\n          -s                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --size ，增加显示容器占用的磁盘空间")]),s._v("\n          -f "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("status")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("running       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --filter ，添加过滤条件，只显示部分容器")]),s._v("\n          -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"label=branch"')]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 过滤具有 branch 标签的容器")]),s._v("\n          -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"label=branch=dev"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 过滤具有 branch 标签且取值为 dev 的容器")]),s._v("\n          --format "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{{.Names}} {{.Status}}'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 自定义每个容器显示的字段信息，基于 Go 模板语法")]),s._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("diff")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示容器内 top layer 的变化，用 A、C、D 分别表示增加、更改、删除了文件")]),s._v("\n      port  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示指定容器映射的所有端口")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示指定容器内的进程列表，可加上 ps 命令的参数")]),s._v("\n      stats "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示容器的资源占用情况，包括单核 CPU 使用率、分配的内存使用率、网络 IO 量、磁盘 IO 量、创建的线程数")]),s._v("\n      inspect "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("object"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示一个 docker 对象的详细信息")]),s._v("\n          -f "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{{json .HostConfig.Binds }}"')]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --format ，只按照 JSON 格式显示指定信息")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("ul",[a("li",[s._v("docker 的容器、镜像、数据卷、网络等对象可采用 ID 或 Name 作为标识符。\n"),a("ul",[a("li",[s._v("ID   ：取自对象十六进制哈希值的开头 n 位。用户可自由指定 n 位 ID ，只需与其它对象不同即可。")]),s._v(" "),a("li",[s._v("Name ：与 "),a("code",[s._v("[A-Za-z0-9][A-Za-z0-9_.-]*")]),s._v(" 正则匹配的名称。如果用户未指定，则由 dockerd 自动分配。")]),s._v(" "),a("li",[s._v("每个对象在创建之后，不支持修改其 ID 或 Name 。")])])]),s._v(" "),a("li",[a("code",[s._v("docker ps --format")]),s._v(" 可显示以下字段，区分大小写："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v(".ID\n.Image\n.Command      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器的启动命令")]),s._v("\n.CreatedAt    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器的创建时间")]),s._v("\n.RunningFor\t  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器从创建以来，存在的时长")]),s._v("\n.Ports\t      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 镜像 EXPOSE 的端口、容器实际映射的端口")]),s._v("\n\n.Names\n.Labels       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器的所有标签")]),s._v("\n.Label        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器的指定标签的值，比如 '{{.Label \"maintainer\"}}'")]),s._v("\n\n.State        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器的运行状态，比如 created、running、exited")]),s._v("\n.Status       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器的运行状态，以及该状态的持续时间，例如： Up 2 minutes")]),s._v("\n.Size         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器占用的磁盘空间。例如：0B (virtual 206MB) 分别表示 top layer 所占磁盘空间、全部层 layer 所占虚拟磁盘空间，不包括日志驱动器、挂载卷、swap 占用的磁盘空间")]),s._v("\n.Mounts       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器挂载的所有卷，例如：/etc/localtime, /data/mysql")]),s._v("\n.Networks     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器关联的网络名")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管理"}},[s._v("#")]),s._v(" 管理")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行容器")]),s._v("\n      run                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行容器，相当于先 create 再 start")]),s._v("\n      create                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建容器，命令行参数与 docker run 差不多。此时容器处于 created 状态，没有运行")]),s._v("\n      start   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动容器，容器会从 exited 状态变为 running 状态")]),s._v("\n      restart "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启容器，相当于先 stop 再 start")]),s._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂停容器")]),s._v("\n      pause   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂停容器内所有进程，基于 Cgroup 的 freezer")]),s._v("\n      unpause "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 解除暂停的容器")]),s._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止容器")]),s._v("\n      stop    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止容器。这会向容器内 1 号进程发送 SIGTERM 信号，然后等待容器内所有进程退出")]),s._v("\n          -t "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 超时时间，默认为 10 秒。如果超时之后，容器内依然有进程未退出，则自动发送 SIGKILL 信号")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 杀死容器。这会向容器内 1 号进程发送 SIGKILL 信号")]),s._v("\n          -s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("signal"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 发送的信号，默认为 SIGKILL")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 阻塞等待容器停止，然后打印其退出码")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除容器（只能删除已停止的）")]),s._v("\n          -f                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 强制删除（可以删除正在运行的）")]),s._v("\n      container prune           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除所有已停止的容器")]),s._v("\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 修改容器")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rename")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("new_name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重命名容器")]),s._v("\n      update  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 更改容器的配置")]),s._v("\n          --cpus "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n          -m 256m\n          --restart no\n\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 管理 docker 引擎")]),s._v("\n      system\n          info                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示宿主机、docker 的配置信息")]),s._v("\n          "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示各种 docker 对象占用的磁盘空间")]),s._v("\n          prune                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除所有未被使用的 docker 对象")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br")])]),a("ul",[a("li",[s._v("例："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" restart "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -aq"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启所有容器")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("li",[s._v("容器的生命周期："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("created           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 已创建。此时容器被 dockerd 分配了 CPU 、内存等资源，创建了根目录文件系统")]),s._v("\nrunning、up       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行中")]),s._v("\npaused            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 暂停运行。此时容器内所有进程依然存在，只是不再被 CPU 执行")]),s._v("\nexited、stopped   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止运行。此时容器内所有进程都退出，占用的 CPU、内存、文件描述符等资源被释放")]),s._v("\nrestart           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启。此时容器重新被分配资源，但依然使用之前的文件系统，重新执行启动命令")]),s._v("\ndelete            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 被删除。此时容器占用的资源被释放，文件系统也被删除。最终消失不见，在 dockerd 中不能查询到该容器")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"执行命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行命令"}},[s._v("#")]),s._v(" 执行命令")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("command"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在容器内执行一条命令")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("这样可以在宿主机上让容器执行命令，不必进入容器的终端。\n"),a("ul",[a("li",[s._v("该容器必须正在运行。")])])]),s._v(" "),a("li",[s._v("例："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it centos1 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在容器内创建终端并进入")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"拷贝文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拷贝文件"}},[s._v("#")]),s._v(" 拷贝文件")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v("   /root/f1                "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":/root/    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从宿主机拷贝文件到容器内")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":/root/f1    /root/                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从容器内拷贝文件到宿主机")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("拷贝当前目录时不能使用 "),a("code",[s._v("docker cp *")]),s._v(" ，要使用 "),a("code",[s._v("docker cp .")]),s._v(" ，默认会递归拷贝、拷贝文件权限。")])]),s._v(" "),a("h2",{attrs:{id:"日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志"}},[s._v("#")]),s._v(" 日志")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" logs "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示一个容器的日志")]),s._v("\n          -f              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 保持显示")]),s._v("\n          --tail "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只显示最后几行。默认从头开始显示")]),s._v("\n          -t              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 增加显示时间戳")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("dockerd 会记录容器内 1 号进程的 stdout、stderr ，作为该容器的日志。\n"),a("ul",[a("li",[s._v("将其它进程的输出重定向到 1 号进程的终端，就会一起记录到容器的日志中。如下："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Hello  "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),s._v(" /proc/1/fd/1  "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),s._v(" /proc/1/fd/2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ln")]),s._v(" -s  /proc/1/fd/1  stdout.log\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" Hello       "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&>")]),s._v("  stdout.log\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])])])])]),s._v(" "),a("h3",{attrs:{id:"日志驱动器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#日志驱动器"}},[s._v("#")]),s._v(" 日志驱动器")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("日志驱动器（logging driver）：用于保存容器的日志。")]),s._v(" "),a("ul",[a("li",[s._v("属于每个容器的独立配置。")])])]),s._v(" "),a("li",[a("p",[s._v("docker 支持多种日志驱动器：")]),s._v(" "),a("ul",[a("li",[s._v("nong ：不保存日志。")]),s._v(" "),a("li",[s._v("local\n"),a("ul",[a("li",[s._v("将日志按文本格式保存在宿主机的 "),a("code",[s._v("/var/lib/docker/containers/{ContainerId}/local-logs/container.log")]),s._v(" 文件中。")]),s._v(" "),a("li",[s._v("默认会自动进行日志切割， max-size 为 10m ，max-file 为 5 。")])])]),s._v(" "),a("li",[s._v("json-file\n"),a("ul",[a("li",[s._v("默认启用这种。")]),s._v(" "),a("li",[s._v("将日志按 JSON 格式保存在宿主机的 "),a("code",[s._v("/var/lib/docker/containers/{ContainerId}/{ContainerId}-json.log")]),s._v(" 文件中。如下："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tail -n 1 /var/lib/docker/containers/3256c21887f9b110e84f0f4a620a2bf01a8a7b9e3a5c857e5cae53b22c5436d4/3256c21887f9b110e84f0f4a620a2bf01a8a7b9e3a5c857e5cae53b22c5436d4-json.log")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"log"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2021-02-22T03:16:15.807469Z 0 [Note] mysqld: ready for connections.'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"stream"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"stderr"')]),s._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"time"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2021-02-22T03:16:15.80758596Z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("使用 docker logs 命令查看日志时，只会显示其 log 字段的值。")])])]),s._v(" "),a("li",[s._v("默认不会进行日志切割， max-size 为 -1 即不限制大小，max-file 为 1 。")])])]),s._v(" "),a("li",[s._v("syslog  ：将日志保存到宿主机的 syslog 中。")]),s._v(" "),a("li",[s._v("journald ：将日志保存到宿主机的 journald 中。")]),s._v(" "),a("li",[s._v("fluentd ：将日志保存到 fluentd 服务中。")])])]),s._v(" "),a("li",[a("p",[s._v("每个容器只能选用一种日志驱动器。")]),s._v(" "),a("ul",[a("li",[s._v("可以在 daemon.json 中配置日志驱动器。也可以在创建一个容器时，单独配置："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run -d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n      --log-driver json-file  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n      --log-opt max-size"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("100m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n      --log-opt max-file"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n      nginx\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])])])]),s._v(" "),a("h2",{attrs:{id:"网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[s._v("#")]),s._v(" 网络")]),s._v(" "),a("h3",{attrs:{id:"网络驱动器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络驱动器"}},[s._v("#")]),s._v(" 网络驱动器")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("网络驱动器（Network driver）：用于控制容器的网络连接。")]),s._v(" "),a("ul",[a("li",[s._v("属于每个容器的独立配置。")]),s._v(" "),a("li",[s._v("基于操作系统的底层网络工具来工作，比如 iptables 。")])])]),s._v(" "),a("li",[a("p",[s._v("docker 支持多种网络驱动器：")]),s._v(" "),a("ul",[a("li",[s._v("none\n"),a("ul",[a("li",[s._v("：无网络，容器内只有一个环回网卡 lo ，因此不能访问到宿主机 ip 或其它容器 ip 。")])])]),s._v(" "),a("li",[s._v("host\n"),a("ul",[a("li",[s._v("：主机网络，让容器使用宿主机的网卡 eth 。")]),s._v(" "),a("li",[s._v("此时容器内进程相当于直接部署在宿主机上，监听端口时是监听宿主机网卡 eth 上的 Socket 。")])])]),s._v(" "),a("li",[s._v("bridge\n"),a("ul",[a("li",[s._v("：桥接网络，默认采用。")]),s._v(" "),a("li",[s._v("它表示一个虚拟子网，拥有一个子网 IP 池，由 dockerd 提供 DHCP 服务。")]),s._v(" "),a("li",[s._v("它会在宿主机上创建一个虚拟网卡，命名格式为 "),a("code",[s._v("br-<哈希值>")]),s._v(" 。")])])]),s._v(" "),a("li",[s._v("overlay\n"),a("ul",[a("li",[s._v("：用于 docker swarm ，连通多个主机的网络。")])])])])]),s._v(" "),a("li",[a("p",[s._v("每个容器可以同时加入多个 bridge 网络。")]),s._v(" "),a("ul",[a("li",[s._v("当容器加入一个 bridge 网络时，会增加一个该子网的虚拟网卡，分配一个子网 IP 。")]),s._v(" "),a("li",[s._v("当多个容器加入同一个 bridge 网络时，可通过子网 IP 相互通信。\n"),a("ul",[a("li",[s._v("此时每个容器拥有独立的虚拟网卡，相当于隔离的主机。dockerd 会自动配置 iptables 规则，实现路由转发。")]),s._v(" "),a("li",[s._v("dockerd 还支持自动将容器名 DNS 解析为 ip ，但默认的 bridge 网络未开启该功能。")])])]),s._v(" "),a("li",[s._v("如果容器没有加入 bridge 网络，则不能访问到其它容器的 IP ，会报错："),a("code",[s._v("No route to host")])])])]),s._v(" "),a("li",[a("p",[s._v("在 bridge 网络中，容器与宿主机之间的网络连通性：")]),s._v(" "),a("ul",[a("li",[s._v("从容器内可以访问到宿主机，比如 ping 宿主机的 IP 、其它主机的 IP 。")]),s._v(" "),a("li",[s._v("从宿主机不能访问到容器内，比如 ping 容器的虚拟 IP 。\n"),a("ul",[a("li",[s._v("容器内进程监听端口时，是监听其虚拟网卡上的 Socket ，因此默认不能从容器外访问到该端口，除非映射端口。")])])]),s._v(" "),a("li",[s._v("允许容器内端口被宿主机访问的几种方案：\n"),a("ul",[a("li",[s._v("创建容器时，映射端口。")]),s._v(" "),a("li",[s._v("让容器采用 host 网络。")])])])])])]),s._v(" "),a("h3",{attrs:{id:"网络对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络对象"}},[s._v("#")]),s._v(" 网络对象")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" network\n              "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有的 docker 网络对象")]),s._v("\n              inspect "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看一个网络的详细信息")]),s._v("\n              create  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个网络")]),s._v("\n                  -d bridge       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --dirver ，选择驱动器，默认为 bridge")]),s._v("\n                  --subnet  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.0/16   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 子网的范围。默认会给每个 network 创建一个独立子网")]),s._v("\n                  --gateway "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.1      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 子网中的网关，这会添加到本机的路由表，可用 route 命令查看")]),s._v("\n              "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除一个网络")]),s._v("\n              prune               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除所有未被使用的网络")]),s._v("\n\n              connect     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将一个网络连接到指定容器")]),s._v("\n                  --ip    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ip"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 指定容器在该网络中的 IP 地址，默认会随机分配")]),s._v("\n                  --alias "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 给容器添加 DNS 名称，默认采用容器名")]),s._v("\n              disconnect  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取消连接")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("ul",[a("li",[s._v("dockerd 安装之后会创建三个初始的 docker 网络：\n"),a("ul",[a("li",[s._v("bridge ：采用 bridge 驱动，会在宿主机上创建一个名为 docker0 的虚拟网卡。")]),s._v(" "),a("li",[s._v("host ：采用 host 驱动。")]),s._v(" "),a("li",[s._v("none ：采用 none 驱动。")])])]),s._v(" "),a("li",[s._v("新建一个容器时，默认的网络配置是 "),a("code",[s._v("docker run --network bridge")]),s._v(" ，因此会加入初始的 bridge 网络，与 host 主机网络隔离。\n"),a("ul",[a("li",[s._v("用户可以创建其它 bridge 类型的网络，使多个容器的网络连通。")])])])]),s._v(" "),a("p",[s._v("例：")]),s._v(" "),a("ol",[a("li",[s._v("创建一个容器："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker run -it --rm --name test1 nginx bash")]),s._v("\nroot@16948ee51a84:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ip addr            # 查看网卡，可见有一个环回网卡 lo 和虚拟网卡 eth0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("LOOPBACK,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v(" qdisc noqueue state UNKNOWN group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1/8 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" lo\n      valid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3609")]),s._v(": eth0@if3610: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue state UP group default\n    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2/16 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".255.255 scope global eth0\n      valid_lft forever preferred_lft forever\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])])]),s._v(" "),a("li",[s._v("按同样方法创建第二个容器："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker run -it --rm --name test1 nginx bash")]),s._v("\nroot@818dcf340ce3:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ping 172.17.0.2    # 与容器 test1 的网络连通")]),s._v("\nPING "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" bytes of data.\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.088")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.2: "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.067")]),s._v(" ms\nroot@818dcf340ce3:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ping test1         # 容器只加入初始的 bridge 网络时，未开启 DNS 解析")]),s._v("\nping: test1: Name or "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" not known\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])]),s._v(" "),a("li",[s._v("创建一个网络，连接两个容器："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker network create bridge1")]),s._v("\n950323e01c9f2c862a712c4fda12e55dd5a9b4afd8d59993fe1adaf581e008b0\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker network connect bridge1 test1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker network connect bridge1 test2")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[s._v("在第二个容器中测试："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("root@818dcf340ce3:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ip addr      # 可见此时增加了一个虚拟网卡 eth1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(": lo: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("LOOPBACK,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65536")]),s._v(" qdisc noqueue state UNKNOWN group default qlen "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000")]),s._v("\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1/8 scope "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" lo\n      valid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3611")]),s._v(": eth0@if3612: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue state UP group default\n    link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".0.3/16 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("172.17")]),s._v(".255.255 scope global eth0\n      valid_lft forever preferred_lft forever\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3616")]),s._v(": eth1@if3617: "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BROADCAST,MULTICAST,UP,LOWER_UP"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mtu "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1500")]),s._v(" qdisc noqueue state UP group default\n    link/ether 02:42:c0:a8:70:03 brd ff:ff:ff:ff:ff:ff link-netnsid "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    inet "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".112.3/20 brd "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".127.255 scope global eth1\n      valid_lft forever preferred_lft forever\nroot@818dcf340ce3:/"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ping test1   # 此时支持将容器名 DNS 解析到对应虚拟网卡的 IP")]),s._v("\nPING test1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".112.2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("56")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("84")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" bytes of data.\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from test1.bridge1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".112.2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.054")]),s._v(" ms\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" bytes from test1.bridge1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("192.168")]),s._v(".112.2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("icmp_seq")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("ttl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("64")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("time")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.048")]),s._v(" ms\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"网络配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络配置"}},[s._v("#")]),s._v(" 网络配置")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run\n          -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":8080                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将宿主机的 80 端口映射到容器的 8000 端口（可重复使用该命令选项），默认是指 TCP 端口")]),s._v("\n          -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":8080/udp              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 映射 UDP 端口")]),s._v("\n          -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:80:8080        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 映射宿主机指定网卡的端口")]),s._v("\n          -P                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 从宿主机上随机选取端口，映射到容器 EXPOSE 声明的所有端口")]),s._v("\n\n          --network "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("network"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 让容器加入指定的 docker 网络（启用该命令选项时，-p 选项会失效）")]),s._v("\n          --network container:"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 让容器共用指定容器的网卡")]),s._v("\n          --link "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("container"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":alias"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将当前容器通过网络连接到另一个容器，需要两个容器都加入初始的 bridge 网络。可选添加目标容器的别名，支持 DNS 解析")]),s._v("\n\n          --dns "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("ip"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器的 DNS 服务器")]),s._v("\n          --mac-address "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("string"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器的 MAC 地址。默认会根据容器 IP 自动生成")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ul",[a("li",[s._v("创建容器时，默认会继承宿主机的 DNS 配置，比如 /etc/resolv.conf ，但不包括 /etc/hosts 。\n"),a("ul",[a("li",[s._v("会自动将容器内主机名添加到容器内 /etc/hosts 中。")])])]),s._v(" "),a("li",[s._v("映射端口时，dockerd 会自动添加 iptables 规则，将宿主机的 src_port 收到的网络包转发到容器的 dst_port 。\n"),a("ul",[a("li",[s._v("此时宿主机的防火墙会暴露 src_port 端口，允许被任意外部 IP 访问。")]),s._v(" "),a("li",[s._v("这样自动添加的 iptables 规则很复杂，建议不要手动修改，容易出错。\n"),a("ul",[a("li",[s._v("比如启动、停止 firewalld.service 时，会导致 dockerd 的 iptables 规则出错。")]),s._v(" "),a("li",[s._v("如果出错，可以尝试重启 dockerd ，让它重新配置 iptables 。")])])])])])]),s._v(" "),a("p",[s._v("例：")]),s._v(" "),a("ol",[a("li",[s._v("创建两个容器"),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker run -d --name test1 --network host nginx")]),s._v("\n9c1c537e8a304ad9e4244e3c7ae1743b88d45924b7b48cbb0a9f63606c82d76d\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker run -d --name test2 -p 2080:80 nginx")]),s._v("\n4601a81b438e31e5cb371291e1299e4c5333e853a956baeb629443774a066e9c\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[s._v("在宿主机上可以访问容器的端口："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# curl -I 10.0.0.1:80      # test1 容器使用宿主机的网卡，因此能访问到")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# curl -I 10.0.0.1:2080    # test2 容器的端口已经映射到宿主机的网卡，因此能访问到")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),s._v("还可以通过环回地址访问容器的端口："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# curl -I 127.0.0.1:80")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# curl -I 127.0.0.1:2080")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])]),s._v(" "),a("li",[s._v("在容器内可以访问宿主机上的任意端口："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker exec -it test1 curl -I 10.0.0.1:80")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker exec -it test1 curl -I 10.0.0.1:2080")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker exec -it test2 curl -I 10.0.0.1:80")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker exec -it test2 curl -I 10.0.0.1:2080")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])]),s._v(" "),a("li",[s._v("在容器内访问环回地址的端口："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker exec -it test1 curl -I 127.0.0.1:80")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker exec -it test1 curl -I 127.0.0.1:2080")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker exec -it test2 curl -I 127.0.0.1:80")]),s._v("\nHTTP/1.1 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" OK\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@CentOS ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# docker exec -it test2 curl -I 127.0.0.1:2080   # test2 容器的网卡上没有监听 2080 端口，因此不能访问")]),s._v("\ncurl: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" Failed to connect to "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 port "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2080")]),s._v(": Connection refused\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储"}},[s._v("#")]),s._v(" 存储")]),s._v(" "),a("ul",[a("li",[s._v("删除容器时，其 top layer 也会被删除，因此容器内产生的数据都会丢失。")]),s._v(" "),a("li",[s._v("持久化存储容器内数据的几种方案：\n"),a("ul",[a("li",[s._v("让容器内进程，主动将数据发送到容器外，比如数据库中。")]),s._v(" "),a("li",[s._v("bind mount ：在创建容器时，将宿主机的文件、目录挂载到容器中某个路径。\n"),a("ul",[a("li",[s._v("挂载的文件、目录实际存储在宿主机上，而不是容器的 top layer 中，因此删除容器也不会影响。")])])]),s._v(" "),a("li",[s._v("volume mount ：挂载数据卷到容器中某个路径。\n"),a("ul",[a("li",[s._v("与 bind mounts 类似，但更容易迁移到其它主机。")]),s._v(" "),a("li",[s._v("同一个文件、目录或数据卷可以被多个容器同时挂载。")])])]),s._v(" "),a("li",[s._v("tmpfs mount ：将数据临时保存在内存中。")])])])]),s._v(" "),a("h3",{attrs:{id:"存储驱动器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储驱动器"}},[s._v("#")]),s._v(" 存储驱动器")]),s._v(" "),a("ul",[a("li",[s._v("存储驱动器（storage driver）：用于控制容器对 layer 的读写。\n"),a("ul",[a("li",[s._v("属于每个容器的独立配置。")])])]),s._v(" "),a("li",[s._v("docker 支持多种存储驱动器：\n"),a("ul",[a("li",[s._v("aufs")]),s._v(" "),a("li",[s._v("fuse-overlayfs")]),s._v(" "),a("li",[s._v("overlay2 ：默认采用，取代旧版的 overlay 。")]),s._v(" "),a("li",[s._v("zfs")])])]),s._v(" "),a("li",[s._v("与容器的存储驱动器不同，数据卷的驱动器默认为 local ，表示存储在本机。")])]),s._v(" "),a("h3",{attrs:{id:"挂载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#挂载"}},[s._v("#")]),s._v(" 挂载")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" run\n          -v "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("src_path"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("dst_path"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v(":mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --volume ，将宿主机的文件、目录或数据卷挂载到容器的 dst_path 路径（可重复使用该命令选项）")]),s._v("\n\n          --mount "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("bind,src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/tmp,dst"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/tmp   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --mount 的配置比 --volume 更详细，支持传入多个键值对形式的配置参数，用逗号分隔")]),s._v("\n          --mount "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("volume,src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("volume_1,dst"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/tmp,volume-driver"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("local,ro\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[a("p",[s._v("挂载时，src_path 有多种形式：")]),s._v(" "),a("ul",[a("li",[s._v("如果为绝对路径，则视作一个宿主机路径。例如 "),a("code",[s._v("/tmp:/tmp")]),s._v(" 。\n"),a("ul",[a("li",[s._v("如果该绝对路径不存在，则会自动在宿主机上创建一个该路径的目录，所有权为 root 用户，然后挂载。")])])]),s._v(" "),a("li",[s._v("如果为相对路径，则报错不支持。例如 "),a("code",[s._v("./tmp:/tmp")]),s._v(" 。")]),s._v(" "),a("li",[s._v("如果无路径，则视作一个数据卷的名称。 。\n"),a("ul",[a("li",[s._v("如果该数据卷不存在，则 dockerd 会自动在宿主机的 "),a("code",[s._v("/var/lib/docker/volumes/<volumeID>/")]),s._v(" 目录下创建一个 _data 目录，作为数据卷，挂载到容器中。\n"),a("ul",[a("li",[s._v("还会自动给 _data 目录分配合适的文件权限，供容器内进程访问。")])])])])]),s._v(" "),a("li",[s._v("如果为空，则会自动创建一个匿名的数据卷。例如 "),a("code",[s._v(":/tmp")]),s._v(" 。\n"),a("ul",[a("li",[s._v("用 docker inspect 命令可查看匿名卷的实际路径。")])])])])]),s._v(" "),a("li",[a("p",[s._v("挂载宿主机的文件时，注意 docker 基于 inode 来挂载文件。在宿主机上用 vi/vim 修改被挂载文件时，会生成一个新 inode 的文件，而容器内依然挂载原 inode 的文件。")]),s._v(" "),a("ul",[a("li",[s._v("可通过以下方式更新挂载文件：\n"),a("ul",[a("li",[s._v("通过 "),a("code",[s._v("cat f1.tmp > f1")]),s._v(" 的方式修改文件。")]),s._v(" "),a("li",[s._v("重启容器，使其自动重新挂载文件。")]),s._v(" "),a("li",[s._v("改为挂载目录，在目录中修改文件。")])])])])]),s._v(" "),a("li",[a("p",[s._v("挂载的文件、目录的所有权依然采用宿主机上的 uid、gid ，容器内使用非 root 用户时，可能对挂载路径没有访问权限。")]),s._v(" "),a("ul",[a("li",[s._v("此时需要先在宿主机上调整挂载路径的权限，比如 "),a("code",[s._v("chown -R <UID> <PATH>")]),s._v(" 。")]),s._v(" "),a("li",[s._v("可以在挂载时限制访问权限 mode ："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("-v /etc/localtime:/etc/localtime:rw  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 允许读写（默认采用）")]),s._v("\n:ro     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只允许读取")]),s._v("\n:z      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加 selinux 标签，将数据卷标记为会被多个容器共享")]),s._v("\n:Z      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加 selinux 标签，将数据卷标记为不会被其它容器共享")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[s._v("一些经常挂载的宿主机文件：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("/etc/hosts\n/etc/passwd             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 让容器采用宿主机的用户名、uid")]),s._v("\n/etc/localtime          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 让容器内采用与宿主机相同的时区，不过有的容器不会读取该文件")]),s._v("\n/var/run/docker.sock    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 允许在容器内与 dockerd 通信，可以执行 docker ps 等命令")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"数据卷"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据卷"}},[s._v("#")]),s._v(" 数据卷")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" volume\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("                "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有的数据卷")]),s._v("\n            inspect "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("volume"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看数据卷的详细信息")]),s._v("\n            create  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("volume"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建一个数据卷")]),s._v("\n                -d "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# --dirver ，选择驱动器，默认为 local")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("volume"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除一个数据卷")]),s._v("\n            prune             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除所有未使用的数据卷")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports},616:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器"}},[s._v("#")]),s._v(" 容器")]),s._v(" "),a("p",[s._v("运行多个进程时，隔离它们的运行环境有利于管理。常见的几种隔离方式：")]),s._v(" "),a("ul",[a("li",[s._v("运行多个物理主机\n"),a("ul",[a("li",[s._v("缺点：冗余大，不方便通过软件管理")])])]),s._v(" "),a("li",[s._v("在物理机上运行多个虚拟机")]),s._v(" "),a("li",[s._v("在主机上运行多个容器，每个容器内包含一组进程")])]),s._v(" "),a("h2",{attrs:{id:"虚拟机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机"}},[s._v("#")]),s._v(" 虚拟机")]),s._v(" "),a("p",[s._v("：Hypervisor ，又称为 VMM（Virtual Machine Monitor ，虚拟机监视器）")]),s._v(" "),a("ul",[a("li",[s._v("原理：\n"),a("ul",[a("li",[s._v("在计算机硬件与操作系统之间隔离出一个中间层，用于运行虚拟化的操作系统。")])])]),s._v(" "),a("li",[s._v("优点：\n"),a("ul",[a("li",[s._v("实现了对整个操作系统的隔离。")])])]),s._v(" "),a("li",[s._v("缺点：\n"),a("ul",[a("li",[s._v("重量级\n"),a("ul",[a("li",[s._v("运行虚拟机软件，大概消耗 10% 的系统资源。")]),s._v(" "),a("li",[s._v("每个虚拟机要运行一个完整的操作系统，但应用程序一般只需要用到其中少量的功能服务、系统资源，因此冗余较多。")]),s._v(" "),a("li",[s._v("部署一个应用程序时，需要先创建一个虚拟机、安装操作系统，再配置运行环境、拷贝应用程序，耗时为几小时。")])])])])]),s._v(" "),a("li",[s._v("创建虚拟机的软件举例：\n"),a("ul",[a("li",[s._v("Xen\n"),a("ul",[a("li",[s._v("2003 年发布。")])])]),s._v(" "),a("li",[s._v("OpenVZ\n"),a("ul",[a("li",[s._v("2005 年发布。")]),s._v(" "),a("li",[s._v("在底层操作系统上运行多个虚拟操作系统，共用一个内核。")]),s._v(" "),a("li",[s._v("只支持 Linux 系统。")])])]),s._v(" "),a("li",[s._v("KVM（Kernel-based Virtual Machine）\n"),a("ul",[a("li",[s._v("2006 年发布。")]),s._v(" "),a("li",[s._v("每个虚拟操作系统使用一个独立的内核，因此可采用不同的操作系统。")]),s._v(" "),a("li",[s._v("OpenVZ 属于半虚拟化，而 KVM 属于全虚拟化，开销更大。")])])]),s._v(" "),a("li",[s._v("VirtualBox")]),s._v(" "),a("li",[s._v("VMwareWorkstation")]),s._v(" "),a("li",[s._v("Windows Hyper-V")])])])]),s._v(" "),a("h2",{attrs:{id:"容器-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器-2"}},[s._v("#")]),s._v(" 容器")]),s._v(" "),a("p",[s._v("：Container ，新一代的虚拟化技术。")]),s._v(" "),a("ul",[a("li",[s._v("原理：\n"),a("ul",[a("li",[s._v("在应用程序与操作系统之间隔离出一个中间层，用于运行容器。")]),s._v(" "),a("li",[s._v("以镜像作为模板，在主机上创建容器并保持运行。\n"),a("ul",[a("li",[s._v("运行容器的主机称为宿主机，可以是物理机或虚拟机。")])])])])]),s._v(" "),a("li",[s._v("优点：\n"),a("ul",[a("li",[s._v("能隔离进程的运行环境\n"),a("ul",[a("li",[s._v("隔离程度比虚拟机低，比如容器会共享宿主机内核，但足够满足一般项目的需求。")])])]),s._v(" "),a("li",[s._v("便于管理进程\n"),a("ul",[a("li",[s._v("包含了进程管理工具的功能，比如启动、停止、自动重启。")]),s._v(" "),a("li",[s._v("进程及其子进程都运行在容器中，不会游离到容器外。")])])]),s._v(" "),a("li",[s._v("轻量级\n"),a("ul",[a("li",[s._v("运行容器引擎，大概只消耗 5% 的系统资源。")]),s._v(" "),a("li",[s._v("部署一个应用时，直接启动一个容器即可，耗时为几秒。")])])]),s._v(" "),a("li",[s._v("兼容性好\n"),a("ul",[a("li",[s._v("同一个镜像可以拷贝到不同平台上，创建容器，只需系统内核相同。")]),s._v(" "),a("li",[s._v("便于将应用迁移部署到其它主机。")])])])])]),s._v(" "),a("li",[s._v("总之，容器能在一般场景下模拟虚拟机，更轻量级，但不能完全替代虚拟机。")])]),s._v(" "),a("h3",{attrs:{id:"相关历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关历史"}},[s._v("#")]),s._v(" 相关历史")]),s._v(" "),a("ul",[a("li",[s._v("1979 年，Unix 系统加入了 chroot 技术（change root directory），用于更改正在运行的进程的根目录。\n"),a("ul",[a("li",[s._v("这里是指文件系统的根目录，不是指当前的工作目录。")]),s._v(" "),a("li",[s._v("更改根目录时，需要先拷贝 /lib 等库文件到新的根目录下，供进程调用。")])])]),s._v(" "),a("li",[s._v("2002 年，Linux 系统加入了 namespace 技术，用于隔离进程可见、可用的系统资源。")]),s._v(" "),a("li",[s._v("2008 年，Linux 系统加入了 Control group 技术，简称为 Cgroup ，用于限制进程占用的 CPU、内存等系统资源。")]),s._v(" "),a("li",[s._v("2008 年，Linux 系统加入了 LXC 工具，用于控制 namespace 和 Cgroup 。")]),s._v(" "),a("li",[s._v("2013 年，dotCloud 公司于发布 Docker 软件，使得容器技术流行、普及，公司也改名为 Docker 公司。")])]),s._v(" "),a("h3",{attrs:{id:"容器引擎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器引擎"}},[s._v("#")]),s._v(" 容器引擎")]),s._v(" "),a("ul",[a("li",[s._v("容器引擎（Container Engine）：通常是一个复杂的软件，负责与用户交互、管理镜像、管理容器。")]),s._v(" "),a("li",[s._v("容器引擎举例：\n"),a("ul",[a("li",[s._v("LXC（Linux Container）")]),s._v(" "),a("li",[s._v("Docker")]),s._v(" "),a("li",[s._v("Podman ：兼容 Docker CLI 的大部分命令。")]),s._v(" "),a("li",[s._v("Windows Hyper-V Containers")])])])]),s._v(" "),a("h3",{attrs:{id:"容器运行时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器运行时"}},[s._v("#")]),s._v(" 容器运行时")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("容器运行时（Container Runtime）：通常是一个 CLI 程序，用于创建、运行、管理容器。")]),s._v(" "),a("ul",[a("li",[s._v("有的容器引擎会直接管理容器，而有的容器引擎会调用容器运行时来管理容器。")]),s._v(" "),a("li",[s._v("早期版本的 Docker 引擎是通过 LXC 来控制 namespace、Cgroup ，实现容器化。从 0.9 版本开始，弃用 LXC ，改用 libcontainer 等 Golang 库，后来演变为 runC 组件。\n"),a("ul",[a("li",[s._v("2016 年，Docker 引擎将其底层组件 runC、containerd 抽离出来，成为独立的容器运行时项目。")]),s._v(" "),a("li",[s._v("此后，Docker 引擎会调用 containerd 来管理容器，而 containerd 会调用 runC ，runC 才会直接管理容器。")])])])])]),s._v(" "),a("li",[a("p",[s._v("OCI（Open Container Initiative ，开放容器倡议）")]),s._v(" "),a("ul",[a("li",[s._v("该组织于 2015 年创立，负责制定容器行业的镜像规范、容器运行时规范。")]),s._v(" "),a("li",[s._v("如果一个镜像符合 OCI 规范，则可以被符合 OCI 标准的容器运行时用于创建容器。")])])]),s._v(" "),a("li",[a("p",[s._v("底层的容器运行时：")]),s._v(" "),a("ul",[a("li",[s._v("runC\n"),a("ul",[a("li",[s._v("只支持 Linux 系统。")])])]),s._v(" "),a("li",[s._v("crun")]),s._v(" "),a("li",[s._v("rkt（CoreOS Rocket）\n"),a("ul",[a("li",[s._v("由 CoreOS 团队发布，以 Pod 为单位管理容器。但不符合 OCI 规范，已被弃用。")])])]),s._v(" "),a("li",[s._v("kata-containers\n"),a("ul",[a("li",[s._v("在一个轻量级虚拟机中运行容器，不共享宿主机的内核，隔离程度更高。")])])])])]),s._v(" "),a("li",[a("p",[s._v("高层的容器运行时：基于 runC 等底层的容器运行时来管理容器。例如：")]),s._v(" "),a("ul",[a("li",[s._v("containerd\n"),a("ul",[a("li",[s._v("支持 Linux、Windows 系统。")]),s._v(" "),a("li",[s._v("支持 k8s 的 CRI 接口。")])])]),s._v(" "),a("li",[s._v("CRI-O\n"),a("ul",[a("li",[s._v("主要用于将底层的容器运行时对接到 k8s CRI 接口。")])])])])])]),s._v(" "),a("h3",{attrs:{id:"容器编排工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器编排工具"}},[s._v("#")]),s._v(" 容器编排工具")]),s._v(" "),a("p",[s._v("当容器数量较多时，手动管理很麻烦，需要使用容器编排工具，例如：")]),s._v(" "),a("ul",[a("li",[s._v("Docker Compose ：由 Docker 公司发布，只能管理当前宿主机上的容器，不能管理服务器集群。")]),s._v(" "),a("li",[s._v("Docker Swarm ：由 Docker 公司发布，在 docker 软件包中自带，可以管理多台宿主机上的容器。")]),s._v(" "),a("li",[s._v("Mesos ：由 ASF 管理。")]),s._v(" "),a("li",[s._v("k8s ：由 Google 公司发布，功能多但也复杂，通过命令行操作。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);