(window.webpackJsonp=window.webpackJsonp||[]).push([[305],{741:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"开机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开机"}},[s._v("#")]),s._v(" 开机")]),s._v(" "),a("h2",{attrs:{id:"系统启动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统启动"}},[s._v("#")]),s._v(" 系统启动")]),s._v(" "),a("p",[s._v("Linux 系统的启动（boot）过程：")]),s._v(" "),a("ol",[a("li",[s._v("计算机接通电源，从 ROM 读取 BIOS（Basic Input Output System） 系统，执行它。")]),s._v(" "),a("li",[s._v("BIOS 通电检查 CPU、内存等计算机硬件是否正常。")]),s._v(" "),a("li",[s._v("BIOS 从硬盘的第一个扇区读取 MBR 即 Bootloader 程序，运行它（即将 CPU 的控制权转交给它）。\n"),a("ul",[a("li",[s._v("Linux 系统常见的 Bootloader 程序是 grub ，存储在 "),a("code",[s._v("/boot/grub/")]),s._v(" 目录下，它允许用户在开机时从多个操作系统中选择一个启动。")])])]),s._v(" "),a("li",[s._v("Bootloader 根据硬盘分区表读取 Linux 内核文件，运行它（即将 CPU 的控制权转交给它）。")]),s._v(" "),a("li",[s._v("内核创建的第一个进程是 idle ，PID 为 0 。\n"),a("ul",[a("li",[s._v("是唯一一个不通过 fork() 或 kernel_thread() 创建的进程。")]),s._v(" "),a("li",[s._v("会通过 kernel_thread() 创建 init 和 kthreadd 进程。")])])]),s._v(" "),a("li",[s._v("内核创建的第二个进程是 init ，PID 为 1 。\n"),a("ul",[a("li",[s._v("负责初始化系统，然后创建、管理所有用户态进程。")])])]),s._v(" "),a("li",[s._v("内核创建的第三个进程是 kthreadd ，PID 为 2 。\n"),a("ul",[a("li",[s._v("负责创建、管理所有内核态进程，是它们的父进程。")])])])]),s._v(" "),a("h2",{attrs:{id:"init"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#init"}},[s._v("#")]),s._v(" init")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("系统启动时，一般是通过运行 "),a("code",[s._v("/sbin/init")]),s._v(" 来启动 init 进程。")]),s._v(" "),a("ul",[a("li",[s._v("如果该文件不存在，则尝试启动 "),a("code",[s._v("/bin/sh")]),s._v(" 等终端来取代 init 进程。")]),s._v(" "),a("li",[s._v("如果依然不存在，则系统启动失败。")])])]),s._v(" "),a("li",[a("p",[s._v("init 进程启动之后，首先负责初始化系统，包括：")]),s._v(" "),a("ul",[a("li",[s._v("读取配置文件 "),a("code",[s._v("/etc/inittab")]),s._v(" ，确定当前的运行级别。")]),s._v(" "),a("li",[s._v("根据当前的运行级别，执行 "),a("code",[s._v("/etc/rc*.d/")]),s._v(" 目录下的 shell 脚本。\n"),a("ul",[a("li",[s._v("rc 是 Run Command 的缩写。")]),s._v(" "),a("li",[s._v("这些脚本是指向 "),a("code",[s._v("/etc/init.d/")]),s._v(" 目录下的脚本的符号链接，主要用于启动一些系统服务，比如 crond、sshd 等。")]),s._v(" "),a("li",[s._v("用户可以在 "),a("code",[s._v("/etc/rc.local")]),s._v(" 中添加一些自定义的启动脚本。")])])])])]),s._v(" "),a("li",[a("p",[s._v("init 进程启动之后，会以 daemon 方式保持运行，负责管理所有用户态进程，担任它们的父进程或祖先进程。")]),s._v(" "),a("ul",[a("li",[s._v("如果其它进程产生了孤儿进程，则会从 init 进程的孙进程变成子进程，受 init 进程管理。")]),s._v(" "),a("li",[s._v("用 service、chkconfig 命令可以与 init 进程交互，从而管理系统服务。")])])]),s._v(" "),a("li",[a("p",[s._v("init 有七种运行级别（run level）：")]),s._v(" "),a("ul",[a("li",[s._v("0 ：关机。")]),s._v(" "),a("li",[s._v("1 ：单用户模式（simple mode），又称为紧急模式（emergency mode），可以在忘了 root 密码时修改密码。")]),s._v(" "),a("li",[s._v("2 ：多用户模式。")]),s._v(" "),a("li",[s._v("3 ：终端模式。")]),s._v(" "),a("li",[s._v("4 ：保留。")]),s._v(" "),a("li",[s._v("5 ：图形界面模式。")]),s._v(" "),a("li",[s._v("6 ：重启。")])])]),s._v(" "),a("li",[a("p",[s._v("相关命令：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ init n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 切换运行级别")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ runlevel    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示当前的运行级别")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[s._v("#")]),s._v(" service")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v("\n         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n         start         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动服务")]),s._v("\n         stop          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止服务")]),s._v("\n         restart       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启服务（先执行 stop 命令，再执行 start 命令）")]),s._v("\n         status        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看服务的状态")]),s._v("\n         --status-all  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有服务的状态")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"chkconfig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chkconfig"}},[s._v("#")]),s._v(" chkconfig")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chkconfig")]),s._v("\n           "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看某服务是否开机自启动")]),s._v("\n           on          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置某服务开机自启动")]),s._v("\n           off         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不开机自启动")]),s._v("\n           --list      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 列出所有已启动的服务")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h2",{attrs:{id:"systemd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#systemd"}},[s._v("#")]),s._v(" systemd")]),s._v(" "),a("ul",[a("li",[s._v("传统的类 Unix 系统中，用 init 进程来初始化系统。\n"),a("ul",[a("li",[s._v("该 init 进程分为两种风格：\n"),a("ul",[a("li",[s._v("System V ：本文描述的是这种。")]),s._v(" "),a("li",[s._v("BSD")])])])])]),s._v(" "),a("li",[s._v("Ubuntu 6 开始，用 Upstart init 进程取代了 System V init 进程，不过后来又被 systemd 进程取代。\n"),a("ul",[a("li",[s._v("在 "),a("code",[s._v("/etc/init/*.conf")]),s._v(" 文件中定义一些被 Upstart init 管理的进程，称为 job 。")])])]),s._v(" "),a("li",[s._v("RHEL 7 、Ubuntu 15 开始，用 systemd 进程取代了 init 进程。\n"),a("ul",[a("li",[s._v("用 systemctl 命令可以与 systemd 进程进行交互，从而管理系统服务。")])])])]),s._v(" "),a("h3",{attrs:{id:"systemctl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#systemctl"}},[s._v("#")]),s._v(" systemctl")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ systemctl\n            start "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动 unit（会将它变成 active 状态）")]),s._v("\n            stop "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止 unit")]),s._v("\n            restart "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启 unit（先执行 stop 命令，再执行 start 命令）")]),s._v("\n            reload "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重新加载 unit")]),s._v("\n            status "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示 unit 的状态")]),s._v("\n            is-active "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示 unit 是否处于 active 状态")]),s._v("\n            show "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示 unit 的配置信息")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("enable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启用 unit")]),s._v("\n            disable "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不启用 unit")]),s._v("\n            is-enabled "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看 unit 是否被启用（从而会开机自启）")]),s._v("\n\n            list-units              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示已启动的 unit")]),s._v("\n                    --all           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示所有 unit")]),s._v("\n                    --type"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("service  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示指定类型的 unit")]),s._v("\n                    --failed        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示启动失败的 unit")]),s._v("\n\n            rescue                  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使系统进入救援模式")]),s._v("\n            emergency               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使系统进入紧急模式")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("h3",{attrs:{id:"systemd-unit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#systemd-unit"}},[s._v("#")]),s._v(" systemd unit")]),s._v(" "),a("p",[s._v("systemd 的管理对象称为 unit ，每个 unit 会保存一个特定扩展名的配置文件。主要类型如下：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("xx.service  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 系统服务")]),s._v("\nxx.socket   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进程间通信的 socket ")]),s._v("\nxx.device   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 硬件设备")]),s._v("\nxx.mount    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 挂载点")]),s._v("\nxx.target   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一组 unit ")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("例：添加配置 "),a("code",[s._v("/usr/lib/systemd/system/ping.service")])]),s._v(" "),a("div",{staticClass:"language-ini line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[a("span",{pre:!0,attrs:{class:"token section"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[s._v("unit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v("                                          # 对该 unit 的通用描述\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("Description")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("A Demo of Ping                      # 名称")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Documentation=man:hello(8)                    # 帮助文档")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# After=network.target sshd-keygen.service      # 需要在哪些 unit 之后启动")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Before=network-pre.target                     # 需要在哪些 unit 之前启动")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Conflicts=iptables.service ip6tables.service  # 与哪些 unit 冲突，即不能同时运行")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Wants=sshd-keygen.service                     # 依赖哪些 unit ，即需要同时运行")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token section"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[s._v("Service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v("                                       # Service 类型的 unit 的专用配置\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# User=root                                     # 用哪个用户来启动该 Service")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Group=root                                    # 用户组")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# WorkingDirectory=/root                        # 工作目录")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Environment="A=1"                             # 添加环境变量，可以重复使用该参数')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Environment="B=2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# EnvironmentFile=/etc/sysconfig/sshd           # 加载文件中的环境变量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("Type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("simple")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("ExecStart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/usr/bin/ping baidu.com               # 启动命令，会被 systemctl start 调用")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("ExecStop")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/bin/kill -HUP $MAINPID                # 终止命令，会被 systemctl stop 调用。如果不指定 ExecStop ，则默认是发送 SIGTERM 信号给进程")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("ExecReload")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("/bin/kill -HUP $MAINPID              # 重载命令，会被 systemctl reload 调用（这里调用了 $MAINPID 变量以获取主进程的 PID ）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ExecStartPre=...                              # 启动之前需要预先执行的命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ExecStopPost=...                              # 停止之后需要执行的命令")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("KillMode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("process                                # 终止该 Service 时的方式")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# TimeoutStopSec=10s")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("Restart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("on-failure                              # 当该 Service 的主进程退出时的重启策略")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("RestartSec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("1s                                   # 等待多少秒才自动重启（默认是 100 ms）")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token section"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token section-name selector"}},[s._v("Install")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")])]),s._v("                                       # 如何安装该 unit\n"),a("span",{pre:!0,attrs:{class:"token key attr-name"}},[s._v("WantedBy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token value attr-value"}},[s._v("multi-user.target                      # 被该 unit 依赖，就能实现开机自启")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("ul",[a("li",[s._v("每次修改 unit 的配置文件之后，要执行 "),a("code",[s._v("systemctl daemon-reload")]),s._v(" 重新加载才能生效。")]),s._v(" "),a("li",[s._v("Service 的 Type 的常见取值："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("simple      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认值，表示 ExecStart 启动的进程是该 Service 的主进程（适合在前台运行的进程）")]),s._v("\nforking     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ExecStart 启动的进程会 fork 出该 Service 的主进程（适合以 daemon 方式运行的进程）")]),s._v("\noneshot     "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 与 simple 类似，但是 systemd 会等待该进程退出之后才启动下一个 unit")]),s._v("\nnotify      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 与 simple 类似，但是 systemd 会等收到该进程的通知之后才启动下一个 unit")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[s._v("Restart 策略的常见取值："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("no          "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认值，不会重启")]),s._v("\nalways      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 总是重启")]),s._v("\non-failure  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 只有异常退出时才重启")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[s._v("KillMode 的常见取值："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("none            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 仅执行 ExecStop ，不检查进程是否退出")]),s._v("\nprocess         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果主进程超过 TimeoutStopSec 时间之后还没退出，则发送 SIGTERM 信号，但是不管子进程")]),s._v("\nmixed           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 向主进程发送 SIGTERM 信号，向子进程发送 SIGKILL 信号")]),s._v("\ncontrol-group   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 默认值，向 Cgroup 组中的所有进程发送 SIGKILL 信号")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])]),s._v(" "),a("h2",{attrs:{id:"关机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关机"}},[s._v("#")]),s._v(" 关机")]),s._v(" "),a("ul",[a("li",[s._v("执行关机命令需要 root 权限。")]),s._v(" "),a("li",[s._v("系统关机时的主要步骤：\n"),a("ul",[a("li",[s._v("循环调用 "),a("code",[s._v("close()")]),s._v(" ，关闭所有文件。")]),s._v(" "),a("li",[s._v("调用 "),a("code",[s._v("kill(-1, SIGTERM);")]),s._v(" ，终止所有进程。然后等待一定时长，再调用 "),a("code",[s._v("kill(-1, SIGKILL);")]),s._v(" ，强制终止所有进程。")]),s._v(" "),a("li",[s._v("执行 "),a("code",[s._v("swapoff -a")]),s._v(" ，停用所有 swap 分区。")]),s._v(" "),a("li",[s._v("执行 "),a("code",[s._v("umount -a")]),s._v(" ，卸载所有文件系统。")])])])]),s._v(" "),a("h3",{attrs:{id:"shutdown"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shutdown"}},[s._v("#")]),s._v(" shutdown")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在一段时间后关机（执行 init 0 来关机）")]),s._v("\n          -c  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 取消即将进行的关机")]),s._v("\n          -h "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This system will shutdown after 10 mins"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在 10 分钟后关机，并将该消息广播给所有用户")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"poweroff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#poweroff"}},[s._v("#")]),s._v(" poweroff")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ poweroff    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关机")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"halt"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#halt"}},[s._v("#")]),s._v(" halt")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("halt")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关机")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"reboot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reboot"}},[s._v("#")]),s._v(" reboot")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reboot")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 重启")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);