(window.webpackJsonp=window.webpackJsonp||[]).push([[367],{1033:function(s,t,a){"use strict";a.r(t);var e=a(1),v=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[s._v("#")]),s._v(" 问题")]),s._v(" "),a("ol",[a("li",[s._v("对字符串类型的底层原理有了解过吗？怎么实现的？")]),s._v(" "),a("li",[s._v("SDS字符串和C语言字符串有什么区别？")]),s._v(" "),a("li",[s._v("SDS的空间分配策略有了解吗？")])]),s._v(" "),a("h2",{attrs:{id:"redis简单动态字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redis简单动态字符串"}},[s._v("#")]),s._v(" Redis简单动态字符串")]),s._v(" "),a("p",[s._v("Redis 没有直接使用 C 语言传统的字符串表示（以空字符结尾的字符数组，以下简称 C 字符串），而是自己构建了一种名为"),a("strong",[s._v("简单动态字符串")]),s._v("（simple dynamic string，SDS）的抽象类型，并将"),a("code",[s._v("SDS")]),s._v("用作 Redis 的默认字符串表示。")]),s._v(" "),a("p",[s._v("在 Redis 里面， C 字符串只会作为字符串字面量， 用在一些无须对字符串值进行修改的地方， 比如打印日志：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("redisLog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("REDIS_WARNING"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Redis is now ready to exit, bye bye..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("当 Redis 需要的不仅仅是一个字符串字面量， 而是一个可以被修改的字符串值时， Redis 就会使用 SDS 来表示字符串值： 比如在 Redis 的数据库里面， 包含字符串值的键值对在底层都是由 SDS 实现的。")]),s._v(" "),a("p",[s._v("举个例子， 如果客户端执行命令：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" hello world\nOK\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("那么 Redis 将在数据库中创建了一个新的键值对， 其中：")]),s._v(" "),a("ul",[a("li",[s._v("键值对的键是一个字符串对象， 对象的底层实现是一个保存着字符串 "),a("code",[s._v('"hello"')]),s._v(" 的 SDS 。")]),s._v(" "),a("li",[s._v("键值对的值也是一个字符串对象， 对象的底层实现是一个保存着字符串 "),a("code",[s._v('"world"')]),s._v(" 的 SDS 。")])]),s._v(" "),a("p",[s._v("又比如说， 如果客户端执行命令：")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" rpush fruits apple banana cherry\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("那么 Redis 将在数据库中创建一个新的键值对， 其中：")]),s._v(" "),a("ul",[a("li",[s._v("键值对的键是一个字符串对象， 对象的底层实现是一个保存了字符串 "),a("code",[s._v('"fruits"')]),s._v(" 的 SDS 。")]),s._v(" "),a("li",[s._v("键值对的值是一个列表对象， 列表对象包含了三个字符串对象， 这三个字符串对象分别由三个 SDS 实现： 第一个 SDS 保存着字符串 "),a("code",[s._v('"apple"')]),s._v(" ， 第二个 SDS 保存着字符串 "),a("code",[s._v('"banana"')]),s._v(" ， 第三个 SDS 保存着字符串 "),a("code",[s._v('"cherry"')]),s._v(" 。")])]),s._v(" "),a("p",[s._v("除了用来保存数据库中的字符串值之外， SDS 还被用作缓冲区（buffer）： AOF 模块中的 AOF 缓冲区， 以及客户端状态中的输入缓冲区， 都是由 SDS 实现的。")]),s._v(" "),a("h3",{attrs:{id:"sds-的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds-的定义"}},[s._v("#")]),s._v(" SDS 的定义")]),s._v(" "),a("p",[s._v("每个 "),a("code",[s._v("sds.h/sdshdr")]),s._v(" 结构表示一个 SDS 值：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sdshdr")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录 buf 数组中已使用字节的数量")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于 SDS 所保存字符串的长度")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 记录 buf 数组中未使用字节的数量")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" free"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 字节数组，用于保存字符串")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("h3",{attrs:{id:"sds-示例一"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds-示例一"}},[s._v("#")]),s._v(" SDS 示例一")]),s._v(" "),a("p",[s._v("下图展示了一个 SDS 示例：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("free")]),s._v(" 属性的值为 "),a("code",[s._v("0")]),s._v(" ， 表示这个 SDS 没有分配任何未使用空间。")]),s._v(" "),a("li",[a("code",[s._v("len")]),s._v(" 属性的值为 "),a("code",[s._v("5")]),s._v(" ， 表示这个 SDS 保存了一个五字节长的字符串。")]),s._v(" "),a("li",[a("code",[s._v("buf")]),s._v(" 属性是一个 "),a("code",[s._v("char")]),s._v(" 类型的数组， 数组的前五个字节分别保存了 "),a("code",[s._v("'R'")]),s._v(" 、 "),a("code",[s._v("'e'")]),s._v(" 、 "),a("code",[s._v("'d'")]),s._v(" 、 "),a("code",[s._v("'i'")]),s._v(" 、 "),a("code",[s._v("'s'")]),s._v(" 五个字符， 而最后一个字节则保存了空字符 "),a("code",[s._v("'\\0'")]),s._v(" 。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/05/lfGB7sSr6b.png",alt:"SDS 示例",loading:"lazy"}})]),s._v(" "),a("p",[s._v("SDS 遵循 C 字符串以"),a("strong",[s._v("空字符结尾")]),s._v("的惯例， 保存空字符的 "),a("code",[s._v("1")]),s._v(" 字节空间不计算在 SDS 的 "),a("code",[s._v("len")]),s._v(" 属性里面， 并且为空字符分配额外的 "),a("code",[s._v("1")]),s._v(" 字节空间， 以及添加空字符到字符串末尾等操作都是由 SDS 函数自动完成的， 所以这个空字符对于 SDS 的使用者来说是完全透明的。")]),s._v(" "),a("p",[s._v("遵循空字符结尾这一惯例的好处是， "),a("strong",[s._v("SDS 可以直接重用一部分 C 字符串函数库里面的函数。")])]),s._v(" "),a("p",[s._v("举个例子， 如果我们有一个指向图 2-1 所示 SDS 的指针 "),a("code",[s._v("s")]),s._v(" ， 那么我们可以直接使用 "),a("code",[s._v("stdio.h/printf")]),s._v(" 函数， 通过执行以下语句：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%s"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("来打印出 SDS 保存的字符串值 "),a("code",[s._v('"Redis"')]),s._v(" ， 而无须为 SDS 编写专门的打印函数。")]),s._v(" "),a("h3",{attrs:{id:"sds-示例二"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds-示例二"}},[s._v("#")]),s._v(" SDS 示例二")]),s._v(" "),a("p",[s._v("下图展示了另一个 SDS 示例:")]),s._v(" "),a("ul",[a("li",[s._v("这个 SDS 和之前展示的 SDS 一样， 都保存了字符串值 "),a("code",[s._v('"Redis"')]),s._v(" 。")]),s._v(" "),a("li",[s._v("这个 SDS 和之前展示的 SDS 的区别在于， 这个 SDS 为 "),a("code",[s._v("buf")]),s._v(" 数组分配了五字节未使用空间， 所以它的 "),a("code",[s._v("free")]),s._v(" 属性的值为 "),a("code",[s._v("5")]),s._v(" （图中使用五个空格来表示五字节的未使用空间）。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/05/fEL0wiLsqo.png",alt:"带有未使用空间 SDS示例",loading:"lazy"}})]),s._v(" "),a("h3",{attrs:{id:"sds-与-c-字符串的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sds-与-c-字符串的区别"}},[s._v("#")]),s._v(" SDS 与 C 字符串的区别")]),s._v(" "),a("h4",{attrs:{id:"常数复杂度获取字符串长度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常数复杂度获取字符串长度"}},[s._v("#")]),s._v(" 常数复杂度获取字符串长度")]),s._v(" "),a("p",[s._v("因为 C 字符串并不记录自身的长度信息， 所以为了获取一个 C 字符串的长度， 程序必须遍历整个字符串， 对遇到的每个字符进行计数， 直到遇到代表字符串结尾的空字符为止， 这个操作的复杂度为 "),a("img",{attrs:{src:"https://atts.w3cschool.cn/attachments/image/cimg/2015-09-13_55f50e14dc650.png",alt:"O(N)",loading:"lazy"}}),s._v(" 。")]),s._v(" "),a("p",[s._v("举个例子， 下图展示了程序计算一个 C 字符串长度的过程。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/05/UdMNr3WtV0.png",alt:"image-20210705202655519",loading:"lazy"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/05/fl3KQ4pouW.png",alt:"image-20210705231924434",loading:"lazy"}})]),s._v(" "),a("p",[s._v("和 C 字符串不同， 因为 SDS 在 "),a("code",[s._v("len")]),s._v(" 属性中记录了 SDS 本身的长度， 所以获取一个 SDS 长度的复杂度仅为 "),a("img",{attrs:{src:"https://atts.w3cschool.cn/attachments/image/cimg/2015-09-13_55f50e22eca8b.png",alt:"O(1)",loading:"lazy"}}),s._v(" 。")]),s._v(" "),a("p",[s._v("举个例子， 对于下图所示的 SDS 来说， 程序只要访问 SDS 的 "),a("code",[s._v("len")]),s._v(" 属性， 就可以立即知道 SDS 的长度为 "),a("code",[s._v("5")]),s._v(" 字节：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/05/HNPdfpXop8.png",alt:"image-20210705232650521",loading:"lazy"}})]),s._v(" "),a("p",[s._v("又比如说， 对于下图展示的 SDS 来说， 程序只要访问 SDS 的 "),a("code",[s._v("len")]),s._v(" 属性， 就可以立即知道 SDS 的长度为 "),a("code",[s._v("11")]),s._v(" 字节。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/05/RcVU562qsV.png",alt:"image-20210705232724222",loading:"lazy"}})]),s._v(" "),a("p",[s._v("设置和更新 SDS 长度的工作是由 SDS 的 API 在执行时自动完成的， 使用 SDS 无须进行任何手动修改长度的工作。")]),s._v(" "),a("p",[s._v("通过使用 SDS 而不是 C 字符串， Redis 将获取字符串长度所需的复杂度从 O(1) ， 这确保了获取字符串长度的工作不会成为 Redis 的性能瓶颈。")]),s._v(" "),a("p",[s._v("比如说， 因为字符串键在底层使用 SDS 来实现， 所以即使我们对一个非常长的字符串键反复执行 STRLEN 命令， 也不会对系统性能造成任何影响， 因为 STRLEN 命令的复杂度仅为 O(1) 。")]),s._v(" "),a("h4",{attrs:{id:"杜绝缓冲区溢出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#杜绝缓冲区溢出"}},[s._v("#")]),s._v(" 杜绝缓冲区溢出")]),s._v(" "),a("p",[s._v("除了获取字符串长度的复杂度高之外， C 字符串不记录自身长度带来的另一个问题是容易造成缓冲区溢出（buffer overflow）。")]),s._v(" "),a("p",[s._v("举个例子， "),a("code",[s._v("<string.h>/strcat")]),s._v(" 函数可以将 "),a("code",[s._v("src")]),s._v(" 字符串中的内容拼接到 "),a("code",[s._v("dest")]),s._v(" 字符串的末尾：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("char *strcat(char *dest, const char *src);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因为 C 字符串不记录自身的长度， 所以 "),a("code",[s._v("strcat")]),s._v(" 假定用户在执行这个函数时， 已经为 "),a("code",[s._v("dest")]),s._v(" 分配了足够多的内存， 可以容纳 "),a("code",[s._v("src")]),s._v(" 字符串中的所有内容， 而一旦这个假定不成立时， 就会产生缓冲区溢出。")]),s._v(" "),a("p",[s._v("举个例子， 假设程序里有两个在内存中紧邻着的 C 字符串 "),a("code",[s._v("s1")]),s._v(" 和 "),a("code",[s._v("s2")]),s._v(" ， 其中 "),a("code",[s._v("s1")]),s._v(" 保存了字符串 "),a("code",[s._v('"Redis"')]),s._v(" ， 而 "),a("code",[s._v("s2")]),s._v(" 则保存了字符串 "),a("code",[s._v('"MongoDB"')]),s._v("， 如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/06/KFQoyNDFBg.png",alt:"image-20210706223154169",loading:"lazy"}})]),s._v(" "),a("p",[s._v("如果一个程序员决定通过执行：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" Cluster"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("将 "),a("code",[s._v("s1")]),s._v(" 的内容修改为 "),a("code",[s._v('"Redis Cluster"')]),s._v(" ， 但粗心的他却忘了在执行 "),a("code",[s._v("strcat")]),s._v(" 之前为 "),a("code",[s._v("s1")]),s._v(" 分配足够的空间， 那么在 "),a("code",[s._v("strcat")]),s._v(" 函数执行之后， "),a("code",[s._v("s1")]),s._v(" 的数据将溢出到 "),a("code",[s._v("s2")]),s._v(" 所在的空间中， 导致 "),a("code",[s._v("s2")]),s._v(" 保存的内容被意外地修改， 如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/06/eAKR9OszUp.png",alt:"image-20210706235353664",loading:"lazy"}})]),s._v(" "),a("p",[s._v("与 C 字符串不同， SDS 的空间分配策略完全杜绝了发生缓冲区溢出的可能性： 当 SDS API 需要对 SDS 进行修改时， API 会先检查 SDS 的空间是否满足修改所需的要求， 如果不满足的话， API 会自动将 SDS 的空间扩展至执行修改所需的大小， 然后才执行实际的修改操作， 所以使用 SDS 既不需要手动修改 SDS 的空间大小， 也不会出现前面所说的缓冲区溢出问题。")]),s._v(" "),a("p",[s._v("举个例子， SDS 的 API 里面也有一个用于执行拼接操作的 "),a("code",[s._v("sdscat")]),s._v(" 函数， 它可以将一个 C 字符串拼接到给定 SDS 所保存的字符串的后面， 但是在执行拼接操作之前， "),a("code",[s._v("sdscat")]),s._v(" 会先检查给定 SDS 的空间是否足够， 如果不够的话， "),a("code",[s._v("sdscat")]),s._v(" 就会先扩展 SDS 的空间， 然后才执行拼接操作。")]),s._v(" "),a("p",[s._v("比如说， 如果我们执行：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdscat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" Cluster"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("其中 SDS 值 "),a("code",[s._v("s")]),s._v(" 如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/06/xvLEaWzUoe.png",alt:"image-20210706235728637",loading:"lazy"}})]),s._v(" "),a("p",[s._v("那么 "),a("code",[s._v("sdscat")]),s._v(" 将在执行拼接操作之前检查 "),a("code",[s._v("s")]),s._v(" 的长度是否足够， 在发现 "),a("code",[s._v("s")]),s._v(" 目前的空间不足以拼接 "),a("code",[s._v('" Cluster"')]),s._v("之后， "),a("code",[s._v("sdscat")]),s._v(" 就会先扩展 "),a("code",[s._v("s")]),s._v(" 的空间， 然后才执行拼接 "),a("code",[s._v('" Cluster"')]),s._v(" 的操作， 拼接操作完成之后的 SDS 如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/06/XIXBIP07C3.png",alt:"image-20210706235754451",loading:"lazy"}})]),s._v(" "),a("p",[a("code",[s._v("sdscat")]),s._v(" 不仅对这个 SDS 进行了拼接操作， 它还为 SDS 分配了 "),a("code",[s._v("13")]),s._v(" 字节的未使用空间， 并且拼接之后的字符串也正好是 "),a("code",[s._v("13")]),s._v(" 字节长， 这种现象既不是 bug 也不是巧合， 它和 SDS 的空间分配策略有关。")]),s._v(" "),a("h4",{attrs:{id:"减少修改字符串时带来的内存重分配次数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少修改字符串时带来的内存重分配次数"}},[s._v("#")]),s._v(" 减少修改字符串时带来的内存重分配次数")]),s._v(" "),a("p",[s._v("正如前面所说， 因为 C 字符串并不记录自身的长度， 所以对于一个包含了 "),a("code",[s._v("N")]),s._v(" 个字符的 C 字符串来说， 这个 C 字符串的底层实现总是一个 "),a("code",[s._v("N+1")]),s._v(" 个字符长的数组（额外的一个字符空间用于保存空字符）。")]),s._v(" "),a("p",[s._v("因为 C 字符串的长度和底层数组的长度之间存在着这种关联性， 所以每次增长或者缩短一个 C 字符串， 程序都总要对保存这个 C 字符串的数组进行一次内存重分配操作：")]),s._v(" "),a("ul",[a("li",[s._v("如果程序执行的是增长字符串的操作， 比如拼接操作（append）， 那么在执行这个操作之前， 程序需要先通过内存重分配来扩展底层数组的空间大小 —— 如果忘了这一步就会产生缓冲区溢出。")]),s._v(" "),a("li",[s._v("如果程序执行的是缩短字符串的操作， 比如截断操作（trim）， 那么在执行这个操作之后， 程序需要通过内存重分配来释放字符串不再使用的那部分空间 —— 如果忘了这一步就会产生内存泄漏。")])]),s._v(" "),a("p",[s._v("举个例子， 如果我们持有一个值为 "),a("code",[s._v('"Redis"')]),s._v(" 的 C 字符串 "),a("code",[s._v("s")]),s._v(" ， 那么为了将 "),a("code",[s._v("s")]),s._v(" 的值改为 "),a("code",[s._v('"Redis Cluster"')]),s._v(" ， 在执行：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" Cluster"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("之前， 我们需要先使用内存重分配操作， 扩展 "),a("code",[s._v("s")]),s._v(" 的空间。")]),s._v(" "),a("p",[s._v("之后， 如果我们又打算将 "),a("code",[s._v("s")]),s._v(" 的值从 "),a("code",[s._v('"Redis Cluster"')]),s._v(" 改为 "),a("code",[s._v('"Redis Cluster Tutorial"')]),s._v(" ， 那么在执行：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" Tutorial"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("之前， 我们需要再次使用内存重分配扩展 "),a("code",[s._v("s")]),s._v(" 的空间， 诸如此类。")]),s._v(" "),a("p",[s._v("因为内存重分配涉及复杂的算法， 并且可能需要执行系统调用， 所以它通常是一个比较耗时的操作：")]),s._v(" "),a("ul",[a("li",[s._v("在一般程序中， 如果修改字符串长度的情况不太常出现， 那么每次修改都执行一次内存重分配是可以接受的。")]),s._v(" "),a("li",[s._v("但是 Redis 作为数据库， 经常被用于速度要求严苛、数据被频繁修改的场合， 如果每次修改字符串的长度都需要执行一次内存重分配的话， 那么光是执行内存重分配的时间就会占去修改字符串所用时间的一大部分， 如果这种修改频繁地发生的话， 可能还会对性能造成影响。")])]),s._v(" "),a("p",[s._v("为了避免 C 字符串的这种缺陷， SDS 通过未使用空间解除了字符串长度和底层数组长度之间的关联： 在 SDS 中， "),a("code",[s._v("buf")]),s._v(" 数组的长度不一定就是字符数量加一， 数组里面可以包含未使用的字节， 而这些字节的数量就由 SDS 的 "),a("code",[s._v("free")]),s._v(" 属性记录。")]),s._v(" "),a("p",[s._v("通过未使用空间， SDS 实现了空间预分配和惰性空间释放两种优化策略。")]),s._v(" "),a("h4",{attrs:{id:"空间预分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间预分配"}},[s._v("#")]),s._v(" 空间预分配")]),s._v(" "),a("p",[s._v("空间预分配用于优化 SDS 的字符串增长操作： 当 SDS 的 API 对一个 SDS 进行修改， 并且需要对 SDS 进行空间扩展的时候， 程序不仅会为 SDS 分配修改所必须要的空间， 还会为 SDS 分配额外的未使用空间。")]),s._v(" "),a("p",[s._v("其中， 额外分配的未使用空间数量由以下公式决定：")]),s._v(" "),a("ul",[a("li",[s._v("如果对 SDS 进行修改之后， SDS 的长度（也即是 "),a("code",[s._v("len")]),s._v(" 属性的值）将小于 "),a("code",[s._v("1 MB")]),s._v(" ， 那么程序分配和 "),a("code",[s._v("len")]),s._v(" 属性同样大小的未使用空间， 这时 SDS "),a("code",[s._v("len")]),s._v(" 属性的值将和 "),a("code",[s._v("free")]),s._v(" 属性的值相同。\n"),a("ul",[a("li",[s._v("举个例子， 如果进行修改之后， SDS 的 "),a("code",[s._v("len")]),s._v(" 将变成 "),a("code",[s._v("13")]),s._v(" 字节， 那么程序也会分配"),a("code",[s._v("13")]),s._v(" 字节的未使用空间， SDS 的 "),a("code",[s._v("buf")]),s._v(" 数组的实际长度将变成 "),a("code",[s._v("13 + 13 + 1 = 27")]),s._v(" 字节（额外的一字节用于保存空字符）。")])])]),s._v(" "),a("li",[s._v("如果对 SDS 进行修改之后， SDS 的长度将大于等于 "),a("code",[s._v("1 MB")]),s._v(" ， 那么程序会分配 "),a("code",[s._v("1 MB")]),s._v(" 的未使用空间。\n"),a("ul",[a("li",[s._v("举个例子， 如果进行修改之后， SDS 的 "),a("code",[s._v("len")]),s._v(" 将变成 "),a("code",[s._v("30 MB")]),s._v(" ， 那么程序会分配 "),a("code",[s._v("1 MB")]),s._v(" 的未使用空间， SDS 的 "),a("code",[s._v("buf")]),s._v(" 数组的实际长度将为 "),a("code",[s._v("30 MB + 1 MB + 1 byte")]),s._v(" 。")])])])]),s._v(" "),a("p",[a("strong",[s._v("通过空间预分配策略， Redis 可以减少连续执行字符串增长操作所需的内存重分配次数。")])]),s._v(" "),a("p",[s._v("举个例子， 对于下图所示的 SDS 值 "),a("code",[s._v("s")]),s._v(" 来说， 如果我们执行：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/07/OHSf1OMuG9.png",alt:"image-20210707001534396",loading:"lazy"}})]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdscat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" Cluster"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("那么 "),a("code",[s._v("sdscat")]),s._v(" 将执行一次内存重分配操作， 将 SDS 的长度修改为 "),a("code",[s._v("13")]),s._v(" 字节， 并将 SDS 的未使用空间同样修改为 "),a("code",[s._v("13")]),s._v(" 字节， 如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/07/yThCbAQBDc.png",alt:"image-20210707001610039",loading:"lazy"}})]),s._v(" "),a("p",[s._v("如果这时， 我们再次对 "),a("code",[s._v("s")]),s._v(" 执行：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdscat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" Tutorial"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("那么这次 "),a("code",[s._v("sdscat")]),s._v(" 将不需要执行内存重分配： 因为未使用空间里面的 "),a("code",[s._v("13")]),s._v(" 字节足以保存 "),a("code",[s._v("9")]),s._v(" 字节的 "),a("code",[s._v('" Tutorial"')]),s._v(" ， 执行 "),a("code",[s._v("sdscat")]),s._v(" 之后的 SDS 如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/07/E8tMaTwcC2.png",alt:"image-20210707001646920",loading:"lazy"}})]),s._v(" "),a("p",[a("strong",[s._v("在扩展 SDS 空间之前， SDS API 会先检查未使用空间是否足够， 如果足够的话， API 就会直接使用未使用空间， 而无须执行内存重分配。")])]),s._v(" "),a("p",[s._v("通过这种预分配策略， SDS 将连续增长 "),a("code",[s._v("N")]),s._v(" 次字符串所需的内存重分配次数从必定 "),a("code",[s._v("N")]),s._v(" 次降低为最多 "),a("code",[s._v("N")]),s._v(" 次。")]),s._v(" "),a("h4",{attrs:{id:"惰性空间释放"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性空间释放"}},[s._v("#")]),s._v(" 惰性空间释放")]),s._v(" "),a("p",[s._v("惰性空间释放用于优化 SDS 的字符串缩短操作： "),a("strong",[s._v("当 SDS 的 API 需要缩短 SDS 保存的字符串时， 程序并不立即使用内存重分配来回收缩短后多出来的字节， 而是使用 "),a("code",[s._v("free")]),s._v(" 属性将这些字节的数量记录起来， 并等待将来使用。")])]),s._v(" "),a("p",[s._v("举个例子， "),a("code",[s._v("sdstrim")]),s._v(" 函数接受一个 SDS 和一个 C 字符串作为参数， 从 SDS 左右两端分别移除所有在 C 字符串中出现过的字符。")]),s._v(" "),a("p",[s._v("比如对于下图所示的 SDS 值 "),a("code",[s._v("s")]),s._v(" 来说，执行：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/07/pPT6NKM6Yb.png",alt:"image-20210707002017412",loading:"lazy"}})]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdstrim")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"XY"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 移除 SDS 字符串中的所有 'X' 和 'Y'")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("会将 SDS 修改成下图所示的样子。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/07/sKSP4tFR6O.png",alt:"image-20210707002058777",loading:"lazy"}})]),s._v(" "),a("p",[s._v("注意执行 "),a("code",[s._v("sdstrim")]),s._v(" 之后的 SDS 并没有释放多出来的 "),a("code",[s._v("8")]),s._v(" 字节空间， 而是将这 "),a("code",[s._v("8")]),s._v(" 字节空间作为未使用空间保留在了 SDS 里面， 如果将来要对 SDS 进行增长操作的话， 这些未使用空间就可能会派上用场。")]),s._v(" "),a("p",[s._v("举个例子， 如果现在对 "),a("code",[s._v("s")]),s._v(" 执行：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sdscat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('" Redis"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("那么完成这次 "),a("code",[s._v("sdscat")]),s._v(" 操作将不需要执行内存重分配： 因为 SDS 里面预留的 "),a("code",[s._v("8")]),s._v(" 字节空间已经足以拼接 "),a("code",[s._v("6")]),s._v(" 个字节长的 "),a("code",[s._v('" Redis"')]),s._v(" ， 如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/07/vDibglOWoG.png",alt:"image-20210707002253720",loading:"lazy"}})]),s._v(" "),a("p",[a("strong",[s._v("通过惰性空间释放策略， SDS 避免了缩短字符串时所需的内存重分配操作， 并为将来可能有的增长操作提供了优化。")])]),s._v(" "),a("p",[s._v("与此同时， SDS 也提供了相应的 API ， 让我们可以在有需要时， 真正地释放 SDS 里面的未使用空间， 所以不用担心惰性空间释放策略会造成内存浪费。")]),s._v(" "),a("h4",{attrs:{id:"二进制安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制安全"}},[s._v("#")]),s._v(" 二进制安全")]),s._v(" "),a("p",[s._v("C 字符串中的字符必须符合某种编码（比如 ASCII）， 并且除了字符串的末尾之外， 字符串里面不能包含空字符， 否则最先被程序读入的空字符将被误认为是字符串结尾 —— 这些限制使得 C 字符串只能保存文本数据， 而不能保存像图片、音频、视频、压缩文件这样的二进制数据。")]),s._v(" "),a("p",[s._v("举个例子， 如果有一种使用空字符来分割多个单词的特殊数据格式， 如图 2-17 所示， 那么这种格式就不能使用 C 字符串来保存， 因为 C 字符串所用的函数只会识别出其中的 "),a("code",[s._v('"Redis"')]),s._v(" ， 而忽略之后的 "),a("code",[s._v('"Cluster"')]),s._v(" 。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/07/xhm6txm5sS.png",alt:"image-20210707003448671",loading:"lazy"}})]),s._v(" "),a("p",[s._v("虽然数据库一般用于保存文本数据， 但使用数据库来保存二进制数据的场景也不少见， 因此， 为了确保 Redis 可以适用于各种不同的使用场景， SDS 的 API 都是二进制安全的（binary-safe）： 所有 SDS API 都会以处理二进制的方式来处理 SDS 存放在 "),a("code",[s._v("buf")]),s._v(" 数组里的数据， 程序不会对其中的数据做任何限制、过滤、或者假设 —— 数据在写入时是什么样的， 它被读取时就是什么样。")]),s._v(" "),a("p",[s._v("这也是我们将 SDS 的 "),a("code",[s._v("buf")]),s._v(" 属性称为字节数组的原因 —— Redis 不是用这个数组来保存字符， 而是用它来保存一系列二进制数据。")]),s._v(" "),a("p",[s._v("比如说， 使用 SDS 来保存之前提到的特殊数据格式就没有任何问题， 因为 SDS 使用 "),a("code",[s._v("len")]),s._v(" 属性的值而不是空字符来判断字符串是否结束， 如下图所示：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/07/I2iexbtGZU.png",alt:"image-20210707003515326",loading:"lazy"}})]),s._v(" "),a("p",[s._v("通过使用二进制安全的 SDS ， 而不是 C 字符串， 使得 Redis 不仅可以保存文本数据， 还可以保存任意格式的二进制数据。")]),s._v(" "),a("h4",{attrs:{id:"兼容部分-c-字符串函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容部分-c-字符串函数"}},[s._v("#")]),s._v(" 兼容部分 C 字符串函数")]),s._v(" "),a("p",[s._v("虽然 SDS 的 API 都是二进制安全的， 但它们一样遵循 C 字符串以空字符结尾的惯例： 这些 API 总会将 SDS 保存的数据的末尾设置为空字符， 并且总会在为 "),a("code",[s._v("buf")]),s._v(" 数组分配空间时多分配一个字节来容纳这个空字符， 这是为了让那些保存文本数据的 SDS 可以重用一部分 "),a("code",[s._v("<string.h>")]),s._v("库定义的函数。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://pan.layne666.cn/images/2021/07/07/bvLyu9fAP3.png",alt:"image-20210707003549784",loading:"lazy"}})]),s._v(" "),a("p",[s._v("举个例子， 如上图所示， 如果我们有一个保存文本数据的 SDS 值 "),a("code",[s._v("sds")]),s._v(" ， 那么我们就可以重用 "),a("code",[s._v("<string.h>/strcasecmp")]),s._v(" 函数， 使用它来对比 SDS 保存的字符串和另一个 C 字符串：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strcasecmp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sds"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这样 Redis 就不用自己专门去写一个函数来对比 SDS 值和 C 字符串值了。")]),s._v(" "),a("p",[s._v("与此类似， 我们还可以将一个保存文本数据的 SDS 作为 "),a("code",[s._v("strcat")]),s._v(" 函数的第二个参数， 将 SDS 保存的字符串追加到一个 C 字符串的后面：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("strcat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c_string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sds"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这样 Redis 就不用专门编写一个将 SDS 字符串追加到 C 字符串之后的函数了。")]),s._v(" "),a("p",[a("strong",[s._v("通过遵循 C 字符串以空字符结尾的惯例， SDS 可以在有需要时重用 "),a("code",[s._v("<string.h>")]),s._v(" 函数库， 从而避免了不必要的代码重复。")])]),s._v(" "),a("h4",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[a("strong",[s._v("C 字符串")])]),s._v(" "),a("th",[a("strong",[s._v("SDS")])])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("获取字符串长度的复杂度为 O(N) 。")]),s._v(" "),a("td",[s._v("获取字符串长度的复杂度为 O(1) 。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("API 是不安全的，可能会造成缓冲区溢出。")]),s._v(" "),a("td",[s._v("API 是安全的，不会造成缓冲区溢出")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("修改字符串长度 "),a("code",[s._v("N")]),s._v(" 次必然需要执行 "),a("code",[s._v("N")]),s._v(" 次内存重分配。")]),s._v(" "),a("td",[s._v("修改字符串长度 "),a("code",[s._v("N")]),s._v(" 次最多需要执行 "),a("code",[s._v("N")]),s._v(" 次内存重分配。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("只能保存文本数据。")]),s._v(" "),a("td",[s._v("可以保存文本或者二进制数据。")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[s._v("可以使用所有 "),a("code",[s._v("<string.h>")]),s._v(" 库中的函数。")]),s._v(" "),a("td",[s._v("可以使用一部分 "),a("code",[s._v("<string.h>")]),s._v(" 库中的函数。")])])])])])}),[],!1,null,null,null);t.default=v.exports}}]);