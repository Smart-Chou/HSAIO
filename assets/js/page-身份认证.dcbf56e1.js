(window.webpackJsonp=window.webpackJsonp||[]).push([[401],{882:function(s,t,e){"use strict";e.r(t);var a=e(1),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"身份认证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#身份认证"}},[s._v("#")]),s._v(" 身份认证")]),s._v(" "),e("ul",[e("li",[s._v("当服务器收到客户端的访问请求时，通常需要执行以下安全措施：\n"),e("ul",[e("li",[s._v("身份认证 ：识别客户端的身份。如果是一个已注册的用户，则让该客户端进入登录状态，否则视作未登录。")]),s._v(" "),e("li",[s._v("用户授权 ：当客户端登录成功之后，检查该用户的权限，判断允许访问哪些资源。")])])]),s._v(" "),e("li",[s._v("本文介绍多种身份认证的方式。")])]),s._v(" "),e("h2",{attrs:{id:"密码登录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#密码登录"}},[s._v("#")]),s._v(" 密码登录")]),s._v(" "),e("p",[s._v("：用户访问网站，输入用户名、密码进行登录。")]),s._v(" "),e("ul",[e("li",[s._v("为了避免密码被暴力破解，发现一个用户连续多次登录失败之后，通常禁止该用户登录一段时间。")])]),s._v(" "),e("h2",{attrs:{id:"凭证登录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#凭证登录"}},[s._v("#")]),s._v(" 凭证登录")]),s._v(" "),e("p",[s._v("：服务器通过凭证记录、验证用户的身份信息。")]),s._v(" "),e("ul",[e("li",[s._v("常见的几种凭证：\n"),e("ul",[e("li",[s._v("cookie")]),s._v(" "),e("li",[s._v("session")]),s._v(" "),e("li",[s._v("JWT")]),s._v(" "),e("li",[s._v("SSL 证书")])])])]),s._v(" "),e("h3",{attrs:{id:"cookie"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" cookie")]),s._v(" "),e("ul",[e("li",[s._v("虽然 HTTP 通信是无状态的，但可以通过 cookie 或 session 保存 HTTP 通信的某些信息。")]),s._v(" "),e("li",[s._v("工作流程：\n"),e("ol",[e("li",[s._v("Web 服务器将各个客户端的某些信息（比如用户名、凭证）保存在客户端的 cookie 文件中。")]),s._v(" "),e("li",[s._v("当客户端下一次发出 HTTP 请求时，可以在请求报文的 headers 中填入 cookie 数据，从而告知上一次 HTTP 通信的信息。\n"),e("ul",[e("li",[s._v("Web 浏览器访问某个网站时会自动使用、且仅使用该网站的 cookie ，将它填入请求报文的 headers 中。")])])])])]),s._v(" "),e("li",[s._v("cookie 保存在客户端上，可能被泄露、篡改、盗用，是不安全的。因此服务器应该采取以下措施：\n"),e("ul",[e("li",[s._v("如果数据不重要，可以直接存放到 cookie 中。比如客户端上一次 HTTP 通信的状态。")]),s._v(" "),e("li",[s._v("如果数据是需要保密的，则加密后再存放到 cookie 中。")]),s._v(" "),e("li",[s._v("如果数据是客户端的某种凭证，则要防止篡改、伪造。还要设置过期时间，过期之后服务器就不认。")])])])]),s._v(" "),e("h3",{attrs:{id:"session"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" session")]),s._v(" "),e("ul",[e("li",[s._v("工作流程：\n"),e("ol",[e("li",[s._v("Web 服务器将每个客户端的信息保存在服务器上，比如数据库、缓存中。只将 session id 发送给客户端，用于分辨客户端的身份。")]),s._v(" "),e("li",[s._v("客户端每次发出 HTTP 请求时，可以将 session id 放在 HTTP Header、body 或 URL 中，传给服务器。")]),s._v(" "),e("li",[s._v("服务器根据 session id 找到对应的 session ，载入该客户端的信息。")])])]),s._v(" "),e("li",[s._v("优点：\n"),e("ul",[e("li",[s._v("session 存储在服务器上，因此不怕泄露，可以包含敏感信息。")]),s._v(" "),e("li",[s._v("session 可以要设置过期时间，过期之后就删除。如果客户端再发送该 session id ，服务器不会认可。")])])]),s._v(" "),e("li",[s._v("缺点：\n"),e("ul",[e("li",[s._v("将 session id 存储在客户端的 cookie 中，可能被 CSRF 攻击。")])])])]),s._v(" "),e("h3",{attrs:{id:"jwt"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jwt"}},[s._v("#")]),s._v(" JWT")]),s._v(" "),e("p",[s._v("：JSON Web Token ，一个实现凭证登录的 API 规范，将 JSON 格式的消息编码成 token 。")]),s._v(" "),e("ul",[e("li",[s._v("JWT 的作用与 session 类似。相当于服务器将 session 的内容编码成 token ，发送给客户端。客户端每次发出 HTTP 请求时，可以带上该 token 。")]),s._v(" "),e("li",[s._v("客户端可以将 token 存储在 cookie 中，也可以存储在内存或数据库中，这样还能防止 CSRF 攻击。")])]),s._v(" "),e("h4",{attrs:{id:"示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("生成 header ：")]),s._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"typ"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"JWT"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"alg"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"HS256"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("生成 payload ：")]),s._v(" "),e("div",{staticClass:"language-json line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"username"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"leo"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token property"}},[s._v('"exp"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1577853296")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("生成 signature ：")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" encodedString "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("base64UrlEncode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("header"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("base64UrlEncode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" signature "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HMACSHA256")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("encodedString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'secret'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// secret 用于加盐，需要保密")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("将上述 header、payload、signature 三部分依次拼接，用点号 . 分隔，就生成了 token ：")]),s._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" token "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("base64UrlEncode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("header"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("base64UrlEncode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'.'")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" signature\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("将 token 放到 HTTP Header 中使用：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("'Authorization': 'Bearer ' + token\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])]),s._v(" "),e("h2",{attrs:{id:"单点登录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单点登录"}},[s._v("#")]),s._v(" 单点登录")]),s._v(" "),e("p",[s._v("：SSO（Single Sign On），指多个网站共用一个身份认证系统，使得用户只需登录一次，然后通过同一个身份凭证访问不同网站。")]),s._v(" "),e("ul",[e("li",[s._v("优点：\n"),e("ul",[e("li",[s._v("节约了用户登录多个网站的时间。")])])]),s._v(" "),e("li",[s._v("缺点：\n"),e("ul",[e("li",[s._v("增加了单点故障的风险。SSO 系统故障时，多个网站都会不支持用户登录。")])])]),s._v(" "),e("li",[s._v("实现 SSO 的常见协议：\n"),e("ul",[e("li",[s._v("CAS（Central Authentication Service，中央验证服务）")]),s._v(" "),e("li",[s._v("Kerberos")]),s._v(" "),e("li",[s._v("LDAP")]),s._v(" "),e("li",[s._v("OAuth")]),s._v(" "),e("li",[s._v("OpenID")]),s._v(" "),e("li",[s._v("SAML（安全断言标记语言）：一个认证协议，通信内容采用 XML 格式。")]),s._v(" "),e("li",[s._v("SASL")])])])]),s._v(" "),e("h3",{attrs:{id:"oidc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#oidc"}},[s._v("#")]),s._v(" OIDC")]),s._v(" "),e("p",[s._v("：OpenID Connect，一个实现 SSO 的协议。")]),s._v(" "),e("ul",[e("li",[s._v("它基于 OAuth2 ，在授权的基础上，增加了对用户的身份认证。")]),s._v(" "),e("li",[s._v("角色划分：\n"),e("ul",[e("li",[s._v("End User（EU）：终端用户，用 OpenID 证明自己的身份。")]),s._v(" "),e("li",[s._v("OpenID Provider（OP）：OpenID 提供方。")]),s._v(" "),e("li",[s._v("Relying Part（RP）：OpenID 支持方，允许用户用 OpenID 登录自己的网站。")])])]),s._v(" "),e("li",[s._v("工作流程：\n"),e("ol",[e("li",[s._v("用户访问 RP 网站，以 OAuth 登录方式跳转到 OP 网站。")]),s._v(" "),e("li",[s._v("OP 发送 OAuth 授权码给 RP 。")]),s._v(" "),e("li",[s._v("RP 根据授权码，向 OP 请求该用户的 access_token、id_token 。\n"),e("ul",[e("li",[s._v("id_token 一般有效期较短，需要根据 refresh_token 刷新。")])])]),s._v(" "),e("li",[s._v("RP 根据 id_token ，向 OP 请求该用户的身份信息（UserInfo）。")])])])]),s._v(" "),e("h3",{attrs:{id:"sasl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sasl"}},[s._v("#")]),s._v(" SASL")]),s._v(" "),e("p",[s._v("：简单认证和安全层（Simple Authentication and Security Layer），是一个进行身份认证的框架。")]),s._v(" "),e("ul",[e("li",[s._v("1997 年发布，2006 年制定了 "),e("a",{attrs:{href:"https://datatracker.ietf.org/doc/html/rfc4422",target:"_blank",rel:"noopener noreferrer"}},[s._v("RFC 4422"),e("OutboundLink")],1),s._v(" 标准。")]),s._v(" "),e("li",[s._v("SASL 是一个抽象的认证层，介于应用程序与具体的认证机制之间。\n"),e("ul",[e("li",[s._v("应用程序使用 SASL 时，可以切换到不同的认证机制，通用性更强。")])])]),s._v(" "),e("li",[s._v("SASL 支持多种认证机制，例如：\n"),e("ul",[e("li",[s._v("ANONYMOUS ：表示未登录用户。")]),s._v(" "),e("li",[s._v("PLAIN ：基于用户名 + 明文密码进行认证。")]),s._v(" "),e("li",[s._v("DIGEST-MD5 ：基于用户名 + 密码哈希值进行认证。")]),s._v(" "),e("li",[s._v("EXTERNAL ：使用外部信息来验证身份，比如通过 TLS 获取的验证信息。")]),s._v(" "),e("li",[s._v("GSSAPI ：通常采用 Kerberos 协议来实现。")]),s._v(" "),e("li",[s._v("NTLM ：Windows NT LAN Manager")]),s._v(" "),e("li",[s._v("OAUTHBEARER")]),s._v(" "),e("li",[s._v("SCRAM")])])])]),s._v(" "),e("h3",{attrs:{id:"kerberos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kerberos"}},[s._v("#")]),s._v(" Kerberos")]),s._v(" "),e("p",[s._v("：一个实现 SSO 的协议。")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("1980 年代由麻省理工学院发布。")])]),s._v(" "),e("li",[e("p",[s._v("Kerberos 服务器称为 KDC（Key Distribution Center，密钥发放中心），分为两部分：")]),s._v(" "),e("ul",[e("li",[s._v("身份认证服务器（Authentication Server ，AS）：存储所有用户的密码，负责身份认证。")]),s._v(" "),e("li",[s._v("票据授予服务器（Ticket Granting Service ，TGS）：负责用户授权。")])])]),s._v(" "),e("li",[e("p",[s._v("业务应用的 client 访问 server 时，通过 Kerberos 进行身份认证的流程：")]),s._v(" "),e("ol",[e("li",[s._v("client 向 KDC 请求身份认证。")]),s._v(" "),e("li",[s._v("KDC 通过 client 的身份认证之后，回复一个证明身份的 Ticket（称为 Ticket Granting Ticket，TGT），并用用户密码加密。")]),s._v(" "),e("li",[s._v("client 解密 Ticket ，然后发送到 TGS ，请求访问某个 server 。")]),s._v(" "),e("li",[s._v("TGS 回复一个允许访问该 client 访问 server 的 Ticket（称为 Server Ticket，ST）。")]),s._v(" "),e("li",[s._v("client 拿着授权 Ticket 去访问 server 。")])])]),s._v(" "),e("li",[e("p",[s._v("优点：")]),s._v(" "),e("ul",[e("li",[s._v("属于第三方认证机制，避免了密码被业务服务器泄露。")]),s._v(" "),e("li",[s._v("基于对称加密进行身份认证，避免了密码在网络传输时泄露。")]),s._v(" "),e("li",[s._v("Kerberos 服务器的 API 可以封装为 SASL 的 GSSAPI 再调用。")])])])]),s._v(" "),e("h2",{attrs:{id:"多因素身份认证"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多因素身份认证"}},[s._v("#")]),s._v(" 多因素身份认证")]),s._v(" "),e("p",[s._v("：MFA（Multi-Factor Authentication）。指同时使用多种方式来验证用户的身份。")]),s._v(" "),e("ul",[e("li",[s._v("例如：\n"),e("ul",[e("li",[s._v("当用户通过账号密码验证之后，再验证手机验证码，或者硬件令牌、指纹。")]),s._v(" "),e("li",[s._v("当用户使用 ATM 时，需要同时验证银行卡、密码。")])])])])])}),[],!1,null,null,null);t.default=n.exports}}]);