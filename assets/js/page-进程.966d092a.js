(window.webpackJsonp=window.webpackJsonp||[]).push([[403],{762:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[s._v("#")]),s._v(" 进程")]),s._v(" "),a("h2",{attrs:{id:"程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序"}},[s._v("#")]),s._v(" 程序")]),s._v(" "),a("ul",[a("li",[s._v("程序（Program）是一组可以被 CPU 执行的计算机指令。\n"),a("ul",[a("li",[s._v("比如在 Windows 系统上双击启动一个软件、在 Linux 系统上执行一条命令，都是启动一个程序。")])])]),s._v(" "),a("li",[s._v("程序被 CPU 执行时，主要分为以下几个阶段：\n"),a("ul",[a("li",[s._v("启动 ：开始执行。")]),s._v(" "),a("li",[s._v("运行 ：正在执行。\n"),a("ul",[a("li",[s._v("CPU 不一定会一直执行同一个程序，可能暂停执行它，转去执行其它程序，一段时间后再回来继续执行它。")])])]),s._v(" "),a("li",[s._v("结束 ：终止执行（不是暂停执行），并返回一个退出码。也称为程序退出、终止。")])])]),s._v(" "),a("li",[s._v("程序终止的几种情况：\n"),a("ul",[a("li",[s._v("执行完所有指令，正常退出。此时退出码为 0 。")]),s._v(" "),a("li",[s._v("调用 exit() 函数，提前退出。此时退出码由程序决定。")]),s._v(" "),a("li",[s._v("接收到 SIGTERM 等信号，被杀死。")])])]),s._v(" "),a("li",[s._v("操作系统一般要求程序结束执行时返回一个整数值，称为退出码（Exit Code）、返回码（Return Code），用于表示程序的执行结果。\n"),a("ul",[a("li",[s._v("Shell 中程序退出码的取值范围为 0~255 ，通常取值为 0 时表示正常退出，取值为非 0 时表示异常退出。")])])])]),s._v(" "),a("h2",{attrs:{id:"进程-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程-2"}},[s._v("#")]),s._v(" 进程")]),s._v(" "),a("ul",[a("li",[s._v("进程（Process）是程序运行、分配系统资源的最小单位。\n"),a("ul",[a("li",[s._v("启动一个程序时，至少要创建一个进程，来执行程序指令。")]),s._v(" "),a("li",[s._v("当进程执行程序指令时，实际上是由进程中的线程，在 CPU 中执行。")])])]),s._v(" "),a("li",[s._v("每个进程（称为父进程）可以创建任意个其它进程（称为子进程）。\n"),a("ul",[a("li",[s._v("父进程及其所有子进程属于同一个进程组。")]),s._v(" "),a("li",[s._v("当父进程终止时，内核并不会自动杀死其子进程。如果子进程依然保持运行，则称为孤儿进程（Orphan Process）。\n"),a("ul",[a("li",[s._v("Linux 系统会将出现的孤儿进程立即改为 init 进程的子进程，即 PPID 改为 1 ，被 init 进程管理。")])])])])])]),s._v(" "),a("h3",{attrs:{id:"进程组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程组"}},[s._v("#")]),s._v(" 进程组")]),s._v(" "),a("p",[s._v("：Process Group ，包含一个进程，或多个具有父子关系的进程。")]),s._v(" "),a("ul",[a("li",[s._v("每个进程组中有且仅有一个 Leader 进程，是其它进程的父进程。")])]),s._v(" "),a("h3",{attrs:{id:"进程会话"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程会话"}},[s._v("#")]),s._v(" 进程会话")]),s._v(" "),a("p",[s._v("：Process Session ，包含一个进程组，或多个具有父子关系的进程组。")]),s._v(" "),a("ul",[a("li",[s._v("会话中的进程组又称为 job ，用于完成某种任务。")]),s._v(" "),a("li",[s._v("一个 Session 中有且仅有一个 Leader 进程，是其它进程、进程组的根父进程。\n"),a("ul",[a("li",[s._v("当 Session Leader 终止时，系统会给该 Session 的所有进程发送 SIGHUP 信号来终止它们。当 Session 中的所有进程都终止时，系统就会删除该 Session 。")])])]),s._v(" "),a("li",[s._v("例如：用户登录时会创建一个 login shell ，还会创建一个 Session ，以 login shell 作为 Session Leader 。\n"),a("ul",[a("li",[s._v("在该 Session 中，只有一个进程组能工作在前台，其它进程组都只能工作在后台。")]),s._v(" "),a("li",[s._v("当用户登出时，属于该 Session 的所有进程组都会被系统终止。")])])]),s._v(" "),a("li",[s._v("相关函数："),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setsid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建一个新的进程会话，然后返回其 SID")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建的新会话中，由当前进程担任 Group Leader 和 Session Leader")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果当前进程本来就是当前进程组的 Group Leader ，则不允许创建，避免与当前进程组的其它进程处于不同的会话中")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])])])]),s._v(" "),a("h3",{attrs:{id:"守护进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#守护进程"}},[s._v("#")]),s._v(" 守护进程")]),s._v(" "),a("ul",[a("li",[s._v("前台进程\n"),a("ul",[a("li",[s._v("：绑定到当前终端的 stdin ，因此会阻塞当前终端。")]),s._v(" "),a("li",[s._v("普通方式启动的进程默认会绑定到当前终端的 stdin、stdout、stderr 。")])])]),s._v(" "),a("li",[s._v("后台进程\n"),a("ul",[a("li",[s._v("：没有绑定到终端的 stdin ，但可能绑定了 stdout、stderr 。")]),s._v(" "),a("li",[s._v("前台进程、后台进程都是当前终端的子进程。如果用户关闭当前终端，系统就会给这些进程发送 SIGHUP 信号，终止它们。")])])]),s._v(" "),a("li",[s._v("守护进程（daemon）\n"),a("ul",[a("li",[s._v("：一种特殊的后台进程。运行在一个独立的 Process Session 中，完全脱离用户的终端，不会收到 SIGHUP 信号。")]),s._v(" "),a("li",[s._v("系统服务程序通常以守护进程的方式运行。")])])])]),s._v(" "),a("h3",{attrs:{id:"僵尸进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#僵尸进程"}},[s._v("#")]),s._v(" 僵尸进程")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在类 Unix 系统中，进程退出的流程：")]),s._v(" "),a("ol",[a("li",[s._v("一个进程终止运行（包括主动退出、被杀死的情况）。")]),s._v(" "),a("li",[s._v("内核回收该进程占用的内存、文件等资源，并向其父进程发送 SIGCHLD 信号，通知它有一个子进程退出了。")]),s._v(" "),a("li",[s._v("父进程调用 wait() 或 waitpid() 获取该进程的退出状态。")]),s._v(" "),a("li",[s._v("内核在进程表中删除该进程，删除其 "),a("code",[s._v("/proc/<PID>/")]),s._v(" 目录，使该进程完全消失。")])])]),s._v(" "),a("li",[a("p",[s._v("进程在终止运行之后、完全消失之前，状态为 terminated ，称为僵尸进程（Zombie Process）。")]),s._v(" "),a("ul",[a("li",[s._v("如果僵尸进程越来越多，可能占用内核的所有 PID ，导致不能创建新进程。")]),s._v(" "),a("li",[s._v("僵尸进程不能被 kill 命令杀死，因为它已经终止运行了。")])])]),s._v(" "),a("li",[a("p",[s._v("Windows 系统中，进程退出时会被立即回收、删除，因此不会产生僵尸进程。")])]),s._v(" "),a("li",[a("p",[s._v("init 进程会不断调用 wait() 获取其子进程的退出状态，避免产生僵尸进程。")]),s._v(" "),a("ul",[a("li",[s._v("因此，孤儿进程没有危害，会被 init 进程管理，不会变成僵尸进程。但僵尸进程如果不回收，则会一直存在。")])])]),s._v(" "),a("li",[a("p",[s._v("避免产生僵尸进程的几种措施：")]),s._v(" "),a("ul",[a("li",[s._v("子进程终止时通知父进程，让父进程立即回收它。\n"),a("ul",[a("li",[s._v("比如向父进程发送 SIGCHLD 信号，不过一般的进程会忽略该信号。")])])]),s._v(" "),a("li",[s._v("父进程不断轮询子进程是否终止。")]),s._v(" "),a("li",[s._v("终止父进程，从而让子进程变为孤儿进程，被 init 进程管理。\n"),a("ul",[a("li",[s._v("比如先让当前进程 fork 一个子进程，再让子进程 fork 一个孙进程，然后立即回收子进程。这样孙进程就变为了孤儿进程。")])])])])]),s._v(" "),a("li",[a("p",[s._v("例：")]),s._v(" "),a("ol",[a("li",[s._v("在 Python 解释器中执行 "),a("code",[s._v("p = subprocess.Popen('sleep 10', shell=True)")]),s._v(" 创建子进程。")]),s._v(" "),a("li",[s._v("执行 ps 命令查看："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29457")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("147")]),s._v(".2m   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(".8m   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(".4m S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.09          "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("- python3\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29860")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("105")]),s._v(".5m   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".3m   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".3m S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00              "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("- "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sleep")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[s._v("当子进程执行完之后，就会变成僵尸进程："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29457")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("147")]),s._v(".2m   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(".8m   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(".4m S   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.09          "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("- python3\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("29860")]),s._v(" root      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".0m   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".0m   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(".0m Z   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.0")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(":00.00              "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("- "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("sleep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("defunct"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[s._v("在 Python 解释器中执行 "),a("code",[s._v("p.wait()")]),s._v(" ，僵尸进程就会消失。\n"),a("ul",[a("li",[s._v("另外，创建新的子进程时，Python 会自动清理所有僵尸态的子进程。")])])])])])]),s._v(" "),a("h2",{attrs:{id:"进程属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程属性"}},[s._v("#")]),s._v(" 进程属性")]),s._v(" "),a("h3",{attrs:{id:"标识符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[s._v("#")]),s._v(" 标识符")]),s._v(" "),a("p",[s._v("Linux 系统会给每个进程、线程分配一个标识符（ID），包括：")]),s._v(" "),a("ul",[a("li",[s._v("PID ：进程的 ID ，在整个系统中唯一。")]),s._v(" "),a("li",[s._v("PPID ：父进程的 ID 。")]),s._v(" "),a("li",[s._v("TID ：线程的 ID ，在其线程组中唯一。")]),s._v(" "),a("li",[s._v("PGID ：进程组（Process Group）的 ID ，等于其主进程的 ID 。")]),s._v(" "),a("li",[s._v("TGID ：线程组（Thread Group）的 ID ，等于其主线程的 ID 。")]),s._v(" "),a("li",[s._v("SID ：Process Session 的 ID ，等于其主进程的 PID 。")])]),s._v(" "),a("h3",{attrs:{id:"进程类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程类型"}},[s._v("#")]),s._v(" 进程类型")]),s._v(" "),a("ul",[a("li",[s._v("s ：该进程是 Session Leader 。")]),s._v(" "),a("li",[s._v("+ ：该进程属于前台进程。")]),s._v(" "),a("li",[s._v("< ：high-priority (not nice to other users)。")]),s._v(" "),a("li",[s._v("N ：low-priority (nice to other users)。")]),s._v(" "),a("li",[s._v("L ：已锁定内存中的 page 。")]),s._v(" "),a("li",[s._v("l ：是多线程的。")])]),s._v(" "),a("h3",{attrs:{id:"运行状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行状态"}},[s._v("#")]),s._v(" 运行状态")]),s._v(" "),a("ul",[a("li",[s._v("R ：Running\n"),a("ul",[a("li",[s._v("进程处于 Running 状态时才会占用 CPU 。")])])]),s._v(" "),a("li",[s._v("S ：Sleeping\n"),a("ul",[a("li",[s._v("此时进程处于可中断的睡眠状态，被 CPU 挂起，等到某一时刻或满足某些条件时再继续运")]),s._v(" "),a("li",[s._v("例如，HTTP 服务器通常一直处于 Sleeping 状态，收到 HTTP 请求时才有一瞬间切换到 Running 状态。")])])]),s._v(" "),a("li",[s._v("D ：Disk Sleep\n"),a("ul",[a("li",[s._v("此时进程处于不可中断的睡眠状态，不会响应异步信号，因此不能被 kill -9 杀死。")]),s._v(" "),a("li",[s._v("例如，进程等待磁盘 IO 时，会进入短暂的 D 状态。")])])]),s._v(" "),a("li",[s._v("I ：Idle ，即空闲状态。")]),s._v(" "),a("li",[s._v("Z ：Zombie ，僵尸进程。")]),s._v(" "),a("li",[s._v("T ：Stopped ，暂停状态。")]),s._v(" "),a("li",[s._v("t ：Traced ，比如进程被断点调试时处于被跟踪状态。")]),s._v(" "),a("li",[s._v("X ：进程正在终止，这是一个很短暂的状态。")])]),s._v(" "),a("h2",{attrs:{id:"进程间通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信"}},[s._v("#")]),s._v(" 进程间通信")]),s._v(" "),a("p",[s._v("Linux 系统上，进程间通信（Inter Process Communication ，IPC）的主要方式如下：")]),s._v(" "),a("h3",{attrs:{id:"信号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号"}},[s._v("#")]),s._v(" 信号")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("信号（signal）可能来源于硬件（比如键盘信号），也可能来源于软件（比如用 kill 命令）。信号产生后，会被内核发送给进程，相当于软件层的模拟中断。")])]),s._v(" "),a("li",[a("p",[s._v("Linux 定义了多种信号，常见的如下：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("编号")]),s._v(" "),a("th",[s._v("宏定义名")]),s._v(" "),a("th",[s._v("默认动作")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("1")]),s._v(" "),a("td",[s._v("SIGHUP")]),s._v(" "),a("td",[s._v("终止进程")])]),s._v(" "),a("tr",[a("td",[s._v("2")]),s._v(" "),a("td",[s._v("SIGINT")]),s._v(" "),a("td",[s._v("终止进程")])]),s._v(" "),a("tr",[a("td",[s._v("3")]),s._v(" "),a("td",[s._v("SIGQUIT")]),s._v(" "),a("td",[s._v("终止进程")])]),s._v(" "),a("tr",[a("td",[s._v("9")]),s._v(" "),a("td",[s._v("SIGKILL")]),s._v(" "),a("td",[s._v("终止进程")])]),s._v(" "),a("tr",[a("td",[s._v("10")]),s._v(" "),a("td",[s._v("SIGUSR1")]),s._v(" "),a("td",[s._v("终止进程")])]),s._v(" "),a("tr",[a("td",[s._v("12")]),s._v(" "),a("td",[s._v("SIGUSR2")]),s._v(" "),a("td",[s._v("终止进程")])]),s._v(" "),a("tr",[a("td",[s._v("15")]),s._v(" "),a("td",[s._v("SIGTERM")]),s._v(" "),a("td",[s._v("终止进程")])]),s._v(" "),a("tr",[a("td",[s._v("17")]),s._v(" "),a("td",[s._v("SIGCHLD")]),s._v(" "),a("td",[s._v("表示子进程终止，默认无动作")])]),s._v(" "),a("tr",[a("td",[s._v("19")]),s._v(" "),a("td",[s._v("SIGSTOP")]),s._v(" "),a("td",[s._v("暂停进程")])])])]),s._v(" "),a("ul",[a("li",[s._v("在不同的平台上，信号的编号可能有差异，因此最好通过宏定义名来指定信号。")]),s._v(" "),a("li",[s._v("SIGINT 通常由键盘中断（Ctrl+C）引发。")]),s._v(" "),a("li",[s._v("向某个进程发出一个普通的终止信号时，进程可能立即终止，也可能做完清理工作之后再终止（比如释放占用的资源），甚至不终止。")]),s._v(" "),a("li",[s._v("SIGKILL、SIGSTOP 两种信号不能被进程忽略或捕捉，因此一定会立即执行。")]),s._v(" "),a("li",[s._v("SIGUSR1、SIGUSR2 两种信号常用于被用户绑定自定义的信号处理函数。\n"),a("ul",[a("li",[s._v("SIGUSR1 的默认动作是终止进程，不过 Apache、Nginx 等很多程序收到 SIGUSR1 信号之后会进行复位操作，比如刷新缓存、重新加载配置文件、重新打开日志文件，接近于重启进程。")])])])])]),s._v(" "),a("li",[a("p",[s._v("相关 API ：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<signal.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("kill")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 向进程发送信号，发送成功则返回 0")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("pid\n"),a("ul",[a("li",[s._v("如果为 n > 0 ，则选中 PID 等于 n 的进程。")]),s._v(" "),a("li",[s._v("如果为 0 ，则选中当前进程组的所有进程。")]),s._v(" "),a("li",[s._v("如果为 -1 ，则选中当前进程有权限发送信号的所有进程。")]),s._v(" "),a("li",[s._v("如果为 -n < -1 ，则选中 PGID 等于 n 的进程组中的所有进程。")]),s._v(" "),a("li",[s._v("特别地，内核只支持将已注册 handler 的信号发送给 PID 为 1 的进程（通常是 init、systemd 等），会忽略 SIGKILL、SIGSTOP 等信号，避免系统崩溃。不过此时调用 kill() 依然会返回 0 。")])])]),s._v(" "),a("li",[s._v("sig\n"),a("ul",[a("li",[s._v("可以填 int 值，也可以填 SIGTERM 等宏定义名。")]),s._v(" "),a("li",[s._v("如果为 0 ，则不发送信号，但依然会检测目标进程是否存在、是否有权限发送信号。")])])])])]),s._v(" "),a("li",[a("p",[s._v("当进程收到一个信号时，有三种处理方式：")]),s._v(" "),a("ul",[a("li",[s._v("执行信号的默认动作")]),s._v(" "),a("li",[s._v("忽略信号")]),s._v(" "),a("li",[s._v("捕捉信号：进程将自己的信号处理函数传给内核，与一个信号绑定。当该信号发生时，内核就会执行该函数，从而实现该进程自定义的动作。如下："),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<signal.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sig_handle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sig_no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 定义信号处理函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sig_no "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" SIGUSR1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Received SIGUSR1\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Received signal %d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sig_no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("signal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("SIGUSR1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" sig_handle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" SIG_ERR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 绑定信号处理函数")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Can not catch SIGUSR1\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果不能绑定即不能捕捉，则报错")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])])])])])]),s._v(" "),a("h3",{attrs:{id:"信号量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#信号量"}},[s._v("#")]),s._v(" 信号量")]),s._v(" "),a("ul",[a("li",[s._v("：semophore ，一个非负整数，用于记录某个资源的可用数量。为 0 时表示资源不可用。")])]),s._v(" "),a("h3",{attrs:{id:"套接字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#套接字"}},[s._v("#")]),s._v(" 套接字")]),s._v(" "),a("ul",[a("li",[s._v("："),a("RouterLink",{attrs:{to:"/Notes/Linux/网络/Socket.html"}},[s._v("Socket")])],1)]),s._v(" "),a("h3",{attrs:{id:"管道文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道文件"}},[s._v("#")]),s._v(" 管道文件")]),s._v(" "),a("ul",[a("li",[s._v("进程可以创建一个管道文件（pipe），和另一个进程同时连接到它，从中读写数据。")]),s._v(" "),a("li",[s._v("采用半双工通信，当一个进程写数据时，另一个进程只能读数据。")]),s._v(" "),a("li",[s._v("匿名管道（PIPE）：保存在内存中，没有文件描述符，只能用于父子进程之间的通信。比如管道符 | 。")]),s._v(" "),a("li",[s._v("命名管道（FIFO）：保存为文件系统中的一个文件，常用于两个独立进程之间的通信。")])]),s._v(" "),a("h3",{attrs:{id:"消息队列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息队列"}},[s._v("#")]),s._v(" 消息队列")]),s._v(" "),a("ul",[a("li",[s._v("：message queue ，一个链表结构，允许多个进程从中读写数据。")])]),s._v(" "),a("h3",{attrs:{id:"共享内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享内存"}},[s._v("#")]),s._v(" 共享内存")]),s._v(" "),a("ul",[a("li",[s._v("：shared memory ，一块内存空间，允许被多个进程同时访问。")])]),s._v(" "),a("h2",{attrs:{id:"相关-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关-api"}},[s._v("#")]),s._v(" 相关 API")]),s._v(" "),a("h3",{attrs:{id:"pcb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pcb"}},[s._v("#")]),s._v(" PCB")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Linux 内核会在内存中保存一个进程表（process table），记录当前存在的所有进程，包括其 PID、PCB 。")]),s._v(" "),a("ul",[a("li",[s._v("用户可以通过 "),a("code",[s._v("/proc/<PID>/")]),s._v(" 目录获取进程的 PCB 信息。")])])]),s._v(" "),a("li",[a("p",[s._v("每个进程用一个 task_struct 结构体记录其信息，称为进程控制块（Process Control Block ，PCB）、进程描述符。如下：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("task_struct")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("volatile")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程的运行状态")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("stack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程的内核栈")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("atomic_t")]),s._v(" usage"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程描述符的使用计数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程的状态标志")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" prio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程的 CPU 调度优先级")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" policy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程的 CPU 调度策略")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("cpumask_t")]),s._v(" cpus_allowed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程可以在 CPU 的哪些核上执行")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" exit_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程的退出码")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程的标识符")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("task_struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("parent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个指针，指向父进程")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("task_struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("group_leader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个指针，指向当前进程组的主进程")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("list_head")]),s._v(" children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一个链表，其中每个元素表示一个子进程")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("cputime_t")]),s._v(" utime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" stime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程占用的用户态、内核态 CPU 时长")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("timespec")]),s._v(" start_time"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程的启动时刻")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("用户可以给进程设置 Nice 优先级，而内核运行进程时会转换成 Priority 优先级。")]),s._v(" "),a("ul",[a("li",[s._v("Nice\n"),a("ul",[a("li",[s._v("取值范围为 -20~19 ，取值越小表示优先级越高。默认为 0 。")]),s._v(" "),a("li",[s._v("Nice 也表示友好度。如果一个进程增加其 Nice ，就是降低优先级，对其它进程更友好。")])])]),s._v(" "),a("li",[s._v("Priority\n"),a("ul",[a("li",[s._v("取值范围为 -100~39 ，取值越小表示优先级越高。")]),s._v(" "),a("li",[s._v("对于普通进程，其 Priority = Nice + 20 ，取值范围为 0~39 。")]),s._v(" "),a("li",[s._v("对于 RT 类型的进程，其 Priority = -1 - rt_prior ，取值范围为 -100~-1 。\n"),a("ul",[a("li",[s._v("rt_prior 取值范围为 0~99 ，取值越大，优先级越高。")])])])])])])]),s._v(" "),a("li",[a("p",[s._v("进程的 CPU 调度策略分为多种：")]),s._v(" "),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("SCHED_OTHER   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 对于多个进程尽量平均分配时间，因此占用 CPU 时间较短的进程会被优先调度")]),s._v("\nSCHED_BATCH   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 批处理")]),s._v("\nSCHED_IDLE    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行低优先级的后台 job")]),s._v("\nSCHED_FIFO    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 按先来后到的顺序执行进程，直到进程主动释放 CPU ，或被更高优先级的进程抢占 CPU")]),s._v("\nSCHED_RR      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 与 SCHED_FIFO 类似，但是给每个进程分配时间片，如果耗尽，则轮到相同优先级的其它进程")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[s._v("Linux v2.6 开始，默认采用 CFS（Completely Fair Scheduler）作为 CPU 调度算法。")]),s._v(" "),a("li",[s._v("CPU 调度时，是以线程为单位。")]),s._v(" "),a("li",[s._v("SCHED_FIFO、SCHED_RR 采用实时（Real Time，RT）调度类，对应的进程称为 RT 类型。")])])])]),s._v(" "),a("h3",{attrs:{id:"创建进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建进程"}},[s._v("#")]),s._v(" 创建进程")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("关于创建进程：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 拷贝当前进程，创建一个子进程")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果创建成功，则在父进程中返回子进程的 PID ，在子进程中返回 0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果创建失败，则返回 -1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("ul",[a("li",[s._v("调用 fork() 创建的子进程，与父进程几乎完全相同，比如：\n"),a("ul",[a("li",[s._v("拷贝父进程的虚拟内存空间。")]),s._v(" "),a("li",[s._v("拷贝父进程打开的文件描述符。")])])]),s._v(" "),a("li",[s._v("调用 fork() 创建的子进程，是一个独立的新进程，与父进程存在少量差异，比如：\n"),a("ul",[a("li",[s._v("拥有不同的 PID 。")]),s._v(" "),a("li",[s._v("将资源使用率、CPU 使用时长重置为零，重新计算。")]),s._v(" "),a("li",[s._v("将待处理的信号集清空。")])])])])]),s._v(" "),a("li",[a("p",[s._v("关于执行程序：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("execve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("pathname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" envp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行 pathname 对应的二进制文件，并传入参数 argv 、环境变量 envp")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("调用 execve() 时，是执行另一个程序，替换当前程序。\n"),a("ul",[a("li",[s._v("这会覆盖当前进程的数据段、堆栈。不过进程的 PID 不变，已经打开的文件描述符会保留。")])])]),s._v(" "),a("li",[s._v("例如：在终端执行 "),a("code",[s._v("ls -l")]),s._v(" 命令时，是先调用 "),a("code",[s._v("fork()")]),s._v(" 创建子进程，而子进程再执行 "),a("code",[s._v('execve("/usr/bin/ls", ["ls", "-l"], 0x7ffc0e3d0910 /* 29 vars */)')]),s._v(" 。")])])])]),s._v(" "),a("h3",{attrs:{id:"终止进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#终止进程"}},[s._v("#")]),s._v(" 终止进程")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("关于终止进程：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdlib.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使当前进程退出，且退出码取值为 status")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])]),s._v(" "),a("li",[a("p",[s._v("关于等待进程退出：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/wait.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 阻塞当前线程，直到一个子进程退出，然后返回其 PID")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果没有子进程或执行失败，则返回 -1")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("waitpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("status"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 阻塞当前线程，直到指定子进程的运行状态改变（默认是等待变为 terminated 状态）")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ul",[a("li",[s._v("pid\n"),a("ul",[a("li",[s._v("如果为 n > 0 ，则等待 PID 等于 n 的子进程。")]),s._v(" "),a("li",[s._v("如果为 0 ，则等待当前进程的任一子进程。")]),s._v(" "),a("li",[s._v("如果为 -1 ，则等待任一子进程。")]),s._v(" "),a("li",[s._v("如果为 -n < -1 ，则等待 PGID 等于 n 的进程组中的任一子进程。")])])]),s._v(" "),a("li",[s._v("例："),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 相当于 waitpid(-1, NULL, 0);")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 阻塞当前线程，直到所有子进程都退出")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("li",[s._v("例："),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<unistd.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<sys/wait.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pid_t")]),s._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时拷贝了一个子进程，往下的代码是主进程、父进程同时各执行一份")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Failed to fork"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is child process: [%d] . Its parent process is [%d] \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getppid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is parent process: [%d] . It just created a child process: [%d] \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等待子进程终止")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The child process [%d] has terminated.\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getpid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getppid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" pid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),s._v("运行结果："),a("div",{staticClass:"language-sh line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[s._v("This is parent process: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9961")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" It just created a child process: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9962")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nThis is child process: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9962")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" Its parent process is "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9961")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nThe child process "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9961")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" has terminated.\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);