(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{609:function(v,_,l){"use strict";l.r(_);var i=l(1),e=Object(i.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"配置信息"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#配置信息"}},[v._v("#")]),v._v(" 配置信息")]),v._v(" "),l("p",[v._v("项目的配置信息分为多种，管理措施也不同：")]),v._v(" "),l("ul",[l("li",[v._v("源代码\n"),l("ul",[l("li",[v._v("用 Git 或 SVN 服务器管理。")])])]),v._v(" "),l("li",[v._v("运行环境\n"),l("ul",[l("li",[v._v("比如运行项目需要的操作系统、依赖软件。")]),v._v(" "),l("li",[v._v("如果项目部署在虚拟机上，可用 Ansible 批量管理主机。")]),v._v(" "),l("li",[v._v("如果项目部署在容器中，可用 Dockerfile 配置运行环境。")])])]),v._v(" "),l("li",[v._v("配置文件\n"),l("ul",[l("li",[v._v("有的项目没有准备配置文件，而是将配置信息直接写在代码中。这样不方便管理配置信息，仅适用于开发阶段。")]),v._v(" "),l("li",[v._v("配置文件可能包含服务器密码等敏感信息，因此不应该保存在项目的代码仓库中，否则会被所有人可见。")]),v._v(" "),l("li",[v._v("常见需求：\n"),l("ul",[l("li",[v._v("静态配置\n"),l("ul",[l("li",[v._v("：程序一般只需在启动时读取一次，不需要经常更新。")]),v._v(" "),l("li",[v._v("如果存在大量非私密的静态配置信息，可以保存到一个独立的 Git 仓库中，并进行版本控制。")])])]),v._v(" "),l("li",[v._v("动态配置\n"),l("ul",[l("li",[v._v("：程序在运行时可能多次读取，需要经常更新，甚至实时更新。")]),v._v(" "),l("li",[v._v("用传统的 Ansible 等脚本工具不方便管理，建议使用 Consul 等配置管理工具。")])])]),v._v(" "),l("li",[v._v("服务发现\n"),l("ul",[l("li",[v._v("：指程序需要获取某些服务的数量、地址。")]),v._v(" "),l("li",[v._v("可能属于静态配置，也可能属于动态配置。")])])])])])])]),v._v(" "),l("li",[v._v("构建产物\n"),l("ul",[l("li",[v._v("称为构件、工件，或者 artifact、component 。")]),v._v(" "),l("li",[v._v("应该根据文件格式，用各种仓库存储。例如 jar 包存储到 Nexus 服务器，Docker 镜像存储到 Harbor 服务器。")])])])]),v._v(" "),l("h2",{attrs:{id:"配置管理工具"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#配置管理工具"}},[v._v("#")]),v._v(" 配置管理工具")]),v._v(" "),l("p",[v._v("适合批量管理主机的工具：")]),v._v(" "),l("ul",[l("li",[v._v("Ansible\n"),l("ul",[l("li",[v._v("一个命令行工具。")]),v._v(" "),l("li",[v._v("采用 Python 开发，于 2012 年发布。")]),v._v(" "),l("li",[v._v("采用主从架构。以 SSH 方式控制远程主机，可以执行任意命令、传输文件。")])])]),v._v(" "),l("li",[v._v("Saltstack\n"),l("ul",[l("li",[v._v("一个命令行工具。")]),v._v(" "),l("li",[v._v("采用 Python 开发，于 2011 年发布。")]),v._v(" "),l("li",[v._v("采用 C/S 架构。需要在主控主机上运行 master 进程，在受控主机上运行 minion 进程。它们之间通过消息队列 ZeroMQ 进行通信。")])])]),v._v(" "),l("li",[v._v("Puppet\n"),l("ul",[l("li",[v._v("一个 Web 服务器。")]),v._v(" "),l("li",[v._v("采用 Ruby 开发，于 2005 年发布。")]),v._v(" "),l("li",[v._v("采用 C/S 架构、HTTP 通信。需要在主控主机上运行 master 进程，在受控主机上运行 agent 进程。")])])]),v._v(" "),l("li",[v._v("Chef\n"),l("ul",[l("li",[v._v("一个 Web 服务器。")]),v._v(" "),l("li",[v._v("采用 Ruby 开发，于 2009 年发布。")]),v._v(" "),l("li",[v._v("采用 C/S 架构、HTTP 通信。")])])])]),v._v(" "),l("p",[v._v("适合动态配置的工具：")]),v._v(" "),l("ul",[l("li",[v._v("confd\n"),l("ul",[l("li",[v._v("一个命令行工具，采用 Golang 开发，用于自动生成配置文件。")]),v._v(" "),l("li",[v._v("原理：从 zk、etcd、consul、redis 等后端轮询配置参数，根据 Golang 模板文件，渲染出配置文件。")])])]),v._v(" "),l("li",[v._v("Apollo\n"),l("ul",[l("li",[v._v("一个 Web 服务器。提供了丰富的配置管理功能，支持划分环境、版本回滚、安全审计。")]),v._v(" "),l("li",[v._v("由携程公司开源，采用 Java 开发。")])])])]),v._v(" "),l("p",[v._v("适合服务发现的工具：")]),v._v(" "),l("ul",[l("li",[v._v("Zookeeper")]),v._v(" "),l("li",[v._v("etcd")]),v._v(" "),l("li",[v._v("Consul")]),v._v(" "),l("li",[v._v("Nacos\n"),l("ul",[l("li",[v._v("一个 Web 服务器。支持配置管理、服务发现。")]),v._v(" "),l("li",[v._v("由阿里巴巴公司开源，采用 Java 开发。")])])]),v._v(" "),l("li",[v._v("Eureka ：由 Netflix 公司开源。")])]),v._v(" "),l("h2",{attrs:{id:"gitops"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#gitops"}},[v._v("#")]),v._v(" GitOps")]),v._v(" "),l("p",[v._v("：一种配置文件的管理方案，于 2017 年提出。")]),v._v(" "),l("ul",[l("li",[v._v("特点：\n"),l("ul",[l("li",[v._v("将配置文件全部存储在 Git 仓库中，能够据此重新部署项目。")]),v._v(" "),l("li",[v._v("当用户修改 Git 仓库中的配置文件时，会自动触发 CI/CD 部署脚本。")])])]),v._v(" "),l("li",[v._v("优点：\n"),l("ul",[l("li",[v._v("记录每次修改的版本，并可以回滚。")]),v._v(" "),l("li",[v._v("多个用户操作时，可以通过发出合并请求的方式，修改配置文件，实现流程审批。")])])])]),v._v(" "),l("h2",{attrs:{id:"microservices"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#microservices"}},[v._v("#")]),v._v(" Microservices")]),v._v(" "),l("p",[v._v("：微服务，一种服务器架构，将业务系统从传统的大型服务器，划分成多个小型服务器，有利于模块化。")]),v._v(" "),l("ul",[l("li",[v._v("特点：\n"),l("ul",[l("li",[v._v("每个微服务独立部署，低耦合。")]),v._v(" "),l("li",[v._v("微服务之间通过 API 交互，可以采用不同的编程语言。")]),v._v(" "),l("li",[v._v("需要一个服务发现机制，让微服务之间能够连通。")]),v._v(" "),l("li",[v._v("Docker 技术流行之后，微服务变得容易实现。通常将每个微服务部署到一个 Docker 容器中。")])])]),v._v(" "),l("li",[v._v("常见的几种微服务框架：\n"),l("ul",[l("li",[v._v("Dubbo ：由阿里巴巴公司发布。微服务之间通过 RPC 协议进行通信，仅支持 Java 。")]),v._v(" "),l("li",[v._v("Spring Cloud ：微服务之间通过 RESTful API 进行通信，性能比 RPC 低。")])])])]),v._v(" "),l("h3",{attrs:{id:"service-mesh"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#service-mesh"}},[v._v("#")]),v._v(" Service Mesh")]),v._v(" "),l("p",[v._v("：服务网格，是新一代的微服务技术，于 2016 年提出。")]),v._v(" "),l("ul",[l("li",[v._v("特点：\n"),l("ul",[l("li",[v._v("引入一个网络代理层，自动转发服务的流量，并进行服务发现、负载均衡。")]),v._v(" "),l("li",[v._v("属于透明代理，不需要服务编写代码来使用代理。")])])]),v._v(" "),l("li",[v._v("常见的几种框架：\n"),l("ul",[l("li",[v._v("Envoy")]),v._v(" "),l("li",[v._v("Linkerd")]),v._v(" "),l("li",[v._v("Istio\n"),l("ul",[l("li",[v._v("比 Linkerd 的功能更多。")]),v._v(" "),l("li",[v._v("在 k8s Pod 中加入一个 init 类型的容器，名为 istio-init 。负责设置 iptables 规则，将服务的出入流量转发到 Envoy 。")]),v._v(" "),l("li",[v._v("在 k8s Pod 中加入一个 sidecar 类型的容器，名为 istio-proxy 。负责运行 Envoy ，代理服务的流量。")])])]),v._v(" "),l("li",[v._v("Consul Connect")])])])])])}),[],!1,null,null,null);_.default=e.exports}}]);